
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b740  0800b740  0001b740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b748  0800b748  0001b748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b74c  0800b74c  0001b74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800b750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001ac  24000074  0800b7c4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  24000220  0800b7c4  00020220  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000298ae  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043f0  00000000  00000000  00049950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001188  00000000  00000000  0004dd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001000  00000000  00000000  0004eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003987f  00000000  00000000  0004fec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019e50  00000000  00000000  00089747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d5d7  00000000  00000000  000a3597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00210b6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ebc  00000000  00000000  00210bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b640 	.word	0x0800b640

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800b640 	.word	0x0800b640

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <User_BSP_Init>:
 */

#include "Driver.h"

void User_BSP_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	BSP_Driver_Init();
 800067c:	f000 f87e 	bl	800077c <BSP_Driver_Init>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <Driver_ADC_Data_Init>:
#define USE_ADC_PORT (&hadc1)

uint16_t adc_test[2];

void Driver_ADC_Data_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	Peri_Adc_Init(PERI_ADC1);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f87f 	bl	800078c <Peri_Adc_Init>
	Peri_Adc_Start(PERI_ADC_DMA,USE_ADC_PORT,(uint32_t*)adc_test,2);
 800068e:	2302      	movs	r3, #2
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <Driver_ADC_Data_Init+0x1c>)
 8000692:	4904      	ldr	r1, [pc, #16]	; (80006a4 <Driver_ADC_Data_Init+0x20>)
 8000694:	2002      	movs	r0, #2
 8000696:	f000 f894 	bl	80007c2 <Peri_Adc_Start>
	//Peri_Adc_Start(PERI_ADC_POLL,USE_ADC_PORT,0,0);
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2400009c 	.word	0x2400009c
 80006a4:	240000a0 	.word	0x240000a0

080006a8 <Driver_ADC_DMA_Test>:
	HAL_Delay(50);
}


static void Driver_ADC_DMA_Test(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	uint16_t buf[2]={0,};
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
	Peri_Adc_DMA_Get(USE_ADC_PORT, (uint32_t*)adc_test, buf, 2);
 80006b2:	463a      	mov	r2, r7
 80006b4:	2302      	movs	r3, #2
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <Driver_ADC_DMA_Test+0x50>)
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <Driver_ADC_DMA_Test+0x54>)
 80006ba:	f000 f8ce 	bl	800085a <Peri_Adc_DMA_Get>
	for(uint8_t count=0;count<2;count++)
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e00e      	b.n	80006e2 <Driver_ADC_DMA_Test+0x3a>
	{
		Debug_Msg("ADC%d=[%x]\r\n",count,buf[count]);
 80006c4:	79f9      	ldrb	r1, [r7, #7]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	f107 0208 	add.w	r2, r7, #8
 80006ce:	4413      	add	r3, r2
 80006d0:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80006d4:	461a      	mov	r2, r3
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <Driver_ADC_DMA_Test+0x58>)
 80006d8:	f000 f844 	bl	8000764 <Debug_Msg>
	for(uint8_t count=0;count<2;count++)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3301      	adds	r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d9ed      	bls.n	80006c4 <Driver_ADC_DMA_Test+0x1c>
	}
	HAL_Delay(50);
 80006e8:	2032      	movs	r0, #50	; 0x32
 80006ea:	f000 ff09 	bl	8001500 <HAL_Delay>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2400009c 	.word	0x2400009c
 80006fc:	240000a0 	.word	0x240000a0
 8000700:	0800b658 	.word	0x0800b658

08000704 <Driver_ADC_Test_Task>:

void Driver_ADC_Test_Task(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	Driver_ADC_DMA_Test();
 8000708:	f7ff ffce 	bl	80006a8 <Driver_ADC_DMA_Test>
	//Driver_ADC_Polling_Test();
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <Driver_Uart_Debug_Init>:

#define DEBUG_UART_PORT (&huart1)
#define DEBUG_BAUDRATE  (BAUD_115200)

void Driver_Uart_Debug_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	Peri_Uart_Init(PERI_UART1);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8e9 	bl	80008ec <Peri_Uart_Init>
	Peri_Uart_BuadRate_Change(DEBUG_UART_PORT, DEBUG_BAUDRATE);
 800071a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800071e:	4802      	ldr	r0, [pc, #8]	; (8000728 <Driver_Uart_Debug_Init+0x18>)
 8000720:	f000 f908 	bl	8000934 <Peri_Uart_BuadRate_Change>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2400017c 	.word	0x2400017c

0800072c <_write>:

int _write(int file, char *ptr, int len)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(DEBUG_UART_PORT,(uint8_t*)ptr,(uint16_t)len,100);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	b29a      	uxth	r2, r3
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <_write+0x30>)
 8000742:	f008 ff33 	bl	80095ac <HAL_UART_Transmit>
	fflush(stdout);
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <_write+0x34>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	4618      	mov	r0, r3
 800074e:	f00a f8a3 	bl	800a898 <fflush>
	return len;
 8000752:	687b      	ldr	r3, [r7, #4]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2400017c 	.word	0x2400017c
 8000760:	24000010 	.word	0x24000010

08000764 <Debug_Msg>:

void Debug_Msg(const char *data,...)
{
 8000764:	b40f      	push	{r0, r1, r2, r3}
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
	printf(data);
 800076a:	68b8      	ldr	r0, [r7, #8]
 800076c:	f00a fa76 	bl	800ac5c <iprintf>
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr

0800077c <BSP_Driver_Init>:
 */

#include "DEBUG/debug.h"

void BSP_Driver_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	Driver_Uart_Debug_Init();
 8000780:	f7ff ffc6 	bl	8000710 <Driver_Uart_Debug_Init>
	Driver_ADC_Data_Init();
 8000784:	f7ff ff7e 	bl	8000684 <Driver_ADC_Data_Init>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <Peri_Adc_Init>:
void Peri_Adc_Start(uint8_t mod, ADC_HandleTypeDef* adcHandle,uint32_t *pData, uint32_t Length);
void Peri_Adc_DeInit(ADC_HandleTypeDef* adcHandle);
void Peri_Adc_Init(uint8_t adc_num);

void Peri_Adc_Init(uint8_t adc_num)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	switch(adc_num)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d009      	beq.n	80007b0 <Peri_Adc_Init+0x24>
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc09      	bgt.n	80007b4 <Peri_Adc_Init+0x28>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <Peri_Adc_Init+0x1e>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d007      	beq.n	80007b8 <Peri_Adc_Init+0x2c>
	case PERI_ADC3:

		break;

	default:
			break;
 80007a8:	e004      	b.n	80007b4 <Peri_Adc_Init+0x28>
		MX_ADC1_Init();
 80007aa:	f000 f8d3 	bl	8000954 <MX_ADC1_Init>
		break;
 80007ae:	e004      	b.n	80007ba <Peri_Adc_Init+0x2e>
		break;
 80007b0:	bf00      	nop
 80007b2:	e002      	b.n	80007ba <Peri_Adc_Init+0x2e>
			break;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <Peri_Adc_Init+0x2e>
		break;
 80007b8:	bf00      	nop
	}
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Peri_Adc_Start>:
{
	HAL_ADC_DeInit(adcHandle);
}

void Peri_Adc_Start(uint8_t mod, ADC_HandleTypeDef* adcHandle,uint32_t *pData, uint32_t Length)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]
#if (PERI_ADC_CALIBRATION_OPTION==PERI_ADC_ON)
	HAL_ADCEx_Calibration_Start(adcHandle, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80007d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007d6:	2100      	movs	r1, #0
 80007d8:	68b8      	ldr	r0, [r7, #8]
 80007da:	f002 fd27 	bl	800322c <HAL_ADCEx_Calibration_Start>
#endif

	switch(mod)
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d00e      	beq.n	8000802 <Peri_Adc_Start+0x40>
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	dc12      	bgt.n	800080e <Peri_Adc_Start+0x4c>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <Peri_Adc_Start+0x30>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d004      	beq.n	80007fa <Peri_Adc_Start+0x38>
	case PERI_ADC_DMA:
		HAL_ADC_Start_DMA(adcHandle,pData,Length);
		break;

	default:
		break;
 80007f0:	e00d      	b.n	800080e <Peri_Adc_Start+0x4c>
		HAL_ADC_Start(adcHandle);
 80007f2:	68b8      	ldr	r0, [r7, #8]
 80007f4:	f001 fa8c 	bl	8001d10 <HAL_ADC_Start>
		break;
 80007f8:	e00a      	b.n	8000810 <Peri_Adc_Start+0x4e>
		HAL_ADC_Start_IT(adcHandle);
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	f001 fb86 	bl	8001f0c <HAL_ADC_Start_IT>
		break;
 8000800:	e006      	b.n	8000810 <Peri_Adc_Start+0x4e>
		HAL_ADC_Start_DMA(adcHandle,pData,Length);
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f001 fcfc 	bl	8002204 <HAL_ADC_Start_DMA>
		break;
 800080c:	e000      	b.n	8000810 <Peri_Adc_Start+0x4e>
		break;
 800080e:	bf00      	nop
	}
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Peri_Adc_Stop>:

void Peri_Adc_Stop(uint8_t mod, ADC_HandleTypeDef* adcHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
	switch(mod)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d00e      	beq.n	8000848 <Peri_Adc_Stop+0x30>
 800082a:	2b02      	cmp	r3, #2
 800082c:	dc10      	bgt.n	8000850 <Peri_Adc_Stop+0x38>
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <Peri_Adc_Stop+0x20>
 8000832:	2b01      	cmp	r3, #1
 8000834:	d004      	beq.n	8000840 <Peri_Adc_Stop+0x28>
	case PERI_ADC_DMA:
		HAL_ADC_Stop_DMA(adcHandle);
		break;

	default:
			break;
 8000836:	e00b      	b.n	8000850 <Peri_Adc_Stop+0x38>
		HAL_ADC_Stop(adcHandle);
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	f001 fb33 	bl	8001ea4 <HAL_ADC_Stop>
		break;
 800083e:	e008      	b.n	8000852 <Peri_Adc_Stop+0x3a>
		HAL_ADC_Stop_IT(adcHandle);
 8000840:	6838      	ldr	r0, [r7, #0]
 8000842:	f001 fca3 	bl	800218c <HAL_ADC_Stop_IT>
		break;
 8000846:	e004      	b.n	8000852 <Peri_Adc_Stop+0x3a>
		HAL_ADC_Stop_DMA(adcHandle);
 8000848:	6838      	ldr	r0, [r7, #0]
 800084a:	f001 fd9f 	bl	800238c <HAL_ADC_Stop_DMA>
		break;
 800084e:	e000      	b.n	8000852 <Peri_Adc_Stop+0x3a>
			break;
 8000850:	bf00      	nop
	}
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Peri_Adc_DMA_Get>:
	}
}


void Peri_Adc_DMA_Get(ADC_HandleTypeDef* adcHandle,uint32_t *src,uint32_t *dst, uint8_t len)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	70fb      	strb	r3, [r7, #3]
	uint8_t count=0;
 8000868:	2300      	movs	r3, #0
 800086a:	75fb      	strb	r3, [r7, #23]
	Peri_Adc_Stop(PERI_ADC_DMA,adcHandle);
 800086c:	68f9      	ldr	r1, [r7, #12]
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff ffd2 	bl	8000818 <Peri_Adc_Stop>
	for(count=0;count<len;count++)
 8000874:	2300      	movs	r3, #0
 8000876:	75fb      	strb	r3, [r7, #23]
 8000878:	e00c      	b.n	8000894 <Peri_Adc_DMA_Get+0x3a>
	{
		dst[count]=src[count];
 800087a:	7dfb      	ldrb	r3, [r7, #23]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	441a      	add	r2, r3
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	440b      	add	r3, r1
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	601a      	str	r2, [r3, #0]
	for(count=0;count<len;count++)
 800088e:	7dfb      	ldrb	r3, [r7, #23]
 8000890:	3301      	adds	r3, #1
 8000892:	75fb      	strb	r3, [r7, #23]
 8000894:	7dfa      	ldrb	r2, [r7, #23]
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	429a      	cmp	r2, r3
 800089a:	d3ee      	bcc.n	800087a <Peri_Adc_DMA_Get+0x20>
	}
	Peri_Adc_Start(PERI_ADC_DMA,adcHandle,src,len);
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff ff8d 	bl	80007c2 <Peri_Adc_Start>
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{

}
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <Peri_Uart_Init>:
void Peri_Uart_DMA_Control(uint8_t mod, UART_HandleTypeDef* uartHandle);
void Peri_Uart_Abort_Control(uint8_t mod, UART_HandleTypeDef* uartHandle);
void Peri_Uart_Status_Check(void);

void Peri_Uart_Init(uint8_t peri_num)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	switch(peri_num)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d816      	bhi.n	800092a <Peri_Uart_Init+0x3e>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <Peri_Uart_Init+0x18>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000925 	.word	0x08000925
 8000908:	0800092b 	.word	0x0800092b
 800090c:	0800092b 	.word	0x0800092b
 8000910:	0800092b 	.word	0x0800092b
 8000914:	0800092b 	.word	0x0800092b
 8000918:	0800092b 	.word	0x0800092b
 800091c:	0800092b 	.word	0x0800092b
 8000920:	0800092b 	.word	0x0800092b
	{
	case PERI_UART1:
		MX_USART1_UART_Init();
 8000924:	f000 fc7e 	bl	8001224 <MX_USART1_UART_Init>
		break;
 8000928:	e000      	b.n	800092c <Peri_Uart_Init+0x40>
	case PERI_UART8:

		break;

	default:
			break;
 800092a:	bf00      	nop
	}
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <Peri_Uart_BuadRate_Change>:
	HAL_UART_DeInit(uartHandle);
}


void Peri_Uart_BuadRate_Change(UART_HandleTypeDef* uartHandle,uint32_t buadrate)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	uartHandle->Init.BaudRate=buadrate;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartHandle);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f008 fde1 	bl	800950c <HAL_UART_Init>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <MX_ADC1_Init+0x104>)
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <MX_ADC1_Init+0x108>)
 800097c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <MX_ADC1_Init+0x104>)
 8000980:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <MX_ADC1_Init+0x104>)
 8000988:	220c      	movs	r2, #12
 800098a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <MX_ADC1_Init+0x104>)
 800098e:	2201      	movs	r2, #1
 8000990:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_ADC1_Init+0x104>)
 8000994:	2204      	movs	r2, #4
 8000996:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_ADC1_Init+0x104>)
 800099a:	2200      	movs	r2, #0
 800099c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009be:	2203      	movs	r2, #3
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d6:	4820      	ldr	r0, [pc, #128]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009d8:	f000 fffa 	bl	80019d0 <HAL_ADC_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009e2:	f000 fabb 	bl	8000f5c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4819      	ldr	r0, [pc, #100]	; (8000a58 <MX_ADC1_Init+0x104>)
 80009f2:	f002 fc7f 	bl	80032f4 <HAL_ADCEx_MultiModeConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009fc:	f000 faae 	bl	8000f5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_ADC1_Init+0x10c>)
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2306      	movs	r3, #6
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a12:	2304      	movs	r3, #4
 8000a14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_ADC1_Init+0x104>)
 8000a24:	f001 fd14 	bl	8002450 <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a2e:	f000 fa95 	bl	8000f5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_ADC1_Init+0x110>)
 8000a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a36:	230c      	movs	r3, #12
 8000a38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_ADC1_Init+0x104>)
 8000a40:	f001 fd06 	bl	8002450 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000a4a:	f000 fa87 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	240000a0 	.word	0x240000a0
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	0c900008 	.word	0x0c900008
 8000a64:	1d500080 	.word	0x1d500080

08000a68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0b8      	sub	sp, #224	; 0xe0
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	22bc      	movs	r2, #188	; 0xbc
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f00a f834 	bl	800aaf6 <memset>
  if(adcHandle->Instance==ADC1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <HAL_ADC_MspInit+0x134>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d17d      	bne.n	8000b94 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 8000aa2:	2378      	movs	r3, #120	; 0x78
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8000aae:	231e      	movs	r3, #30
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8000ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4618      	mov	r0, r3
 8000ace:	f006 fb97 	bl	8007200 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 8000ad8:	f000 fa40 	bl	8000f5c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <HAL_ADC_MspInit+0x138>)
 8000ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <HAL_ADC_MspInit+0x138>)
 8000ae4:	f043 0320 	orr.w	r3, r3, #32
 8000ae8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <HAL_ADC_MspInit+0x138>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <HAL_ADC_MspInit+0x138>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <HAL_ADC_MspInit+0x138>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <HAL_ADC_MspInit+0x138>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b18:	23c0      	movs	r3, #192	; 0xc0
 8000b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <HAL_ADC_MspInit+0x13c>)
 8000b32:	f005 f9c3 	bl	8005ebc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_ADC_MspInit+0x144>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b3e:	2209      	movs	r2, #9
 8000b40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b7a:	f002 fda9 	bl	80036d0 <HAL_DMA_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8000b84:	f000 f9ea 	bl	8000f5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b8e:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_ADC_MspInit+0x140>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	37e0      	adds	r7, #224	; 0xe0
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40022000 	.word	0x40022000
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	58020000 	.word	0x58020000
 8000ba8:	24000104 	.word	0x24000104
 8000bac:	40020010 	.word	0x40020010

08000bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_DMA_Init+0x3c>)
 8000bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <MX_DMA_Init+0x3c>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_DMA_Init+0x3c>)
 8000bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	200b      	movs	r0, #11
 8000bda:	f002 fd44 	bl	8003666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bde:	200b      	movs	r0, #11
 8000be0:	f002 fd5b 	bl	800369a <HAL_NVIC_EnableIRQ>

}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58024400 	.word	0x58024400

08000bf0 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c06:	4b80      	ldr	r3, [pc, #512]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a7e      	ldr	r2, [pc, #504]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b7c      	ldr	r3, [pc, #496]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	623b      	str	r3, [r7, #32]
 8000c22:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c24:	4b78      	ldr	r3, [pc, #480]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a77      	ldr	r2, [pc, #476]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b74      	ldr	r3, [pc, #464]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b71      	ldr	r3, [pc, #452]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a6f      	ldr	r2, [pc, #444]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b6d      	ldr	r3, [pc, #436]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c60:	4b69      	ldr	r3, [pc, #420]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a68      	ldr	r2, [pc, #416]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c68:	f043 0320 	orr.w	r3, r3, #32
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b65      	ldr	r3, [pc, #404]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0320 	and.w	r3, r3, #32
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	4b62      	ldr	r3, [pc, #392]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a60      	ldr	r2, [pc, #384]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b5a      	ldr	r3, [pc, #360]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	4a59      	ldr	r2, [pc, #356]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cac:	4b56      	ldr	r3, [pc, #344]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a51      	ldr	r2, [pc, #324]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a4a      	ldr	r2, [pc, #296]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a42      	ldr	r2, [pc, #264]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <MX_GPIO_Init+0x218>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4838      	ldr	r0, [pc, #224]	; (8000e0c <MX_GPIO_Init+0x21c>)
 8000d2a:	f005 f8c7 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI9 PI10 PI11
                           PI0 PI1 PI2 PI3
                           PI4 PI5 PI6 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d2e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <MX_GPIO_Init+0x220>)
 8000d44:	f005 f8ba 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000d48:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	482d      	ldr	r0, [pc, #180]	; (8000e14 <MX_GPIO_Init+0x224>)
 8000d5e:	f005 f8ad 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4828      	ldr	r0, [pc, #160]	; (8000e18 <MX_GPIO_Init+0x228>)
 8000d78:	f005 f8a0 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d7c:	f641 133f 	movw	r3, #6463	; 0x193f
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	2303      	movs	r3, #3
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4822      	ldr	r0, [pc, #136]	; (8000e1c <MX_GPIO_Init+0x22c>)
 8000d92:	f005 f893 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5
                           PH6 PH7 PH8 PH9
                           PH10 PH11 PH12 PH13
                           PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d96:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	481d      	ldr	r0, [pc, #116]	; (8000e20 <MX_GPIO_Init+0x230>)
 8000dac:	f005 f886 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000db0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4817      	ldr	r0, [pc, #92]	; (8000e24 <MX_GPIO_Init+0x234>)
 8000dc6:	f005 f879 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4812      	ldr	r0, [pc, #72]	; (8000e28 <MX_GPIO_Init+0x238>)
 8000de0:	f005 f86c 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_GPIO_Init+0x23c>)
 8000dfa:	f005 f85f 	bl	8005ebc <HAL_GPIO_Init>

}
 8000dfe:	bf00      	nop
 8000e00:	3738      	adds	r7, #56	; 0x38
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58021000 	.word	0x58021000
 8000e10:	58022000 	.word	0x58022000
 8000e14:	58020800 	.word	0x58020800
 8000e18:	58021400 	.word	0x58021400
 8000e1c:	58020000 	.word	0x58020000
 8000e20:	58021c00 	.word	0x58021c00
 8000e24:	58020400 	.word	0x58020400
 8000e28:	58021800 	.word	0x58021800
 8000e2c:	58020c00 	.word	0x58020c00

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f000 fad2 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f80c 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f7ff fed8 	bl	8000bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e40:	f7ff feb6 	bl	8000bb0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e44:	f000 f9ee 	bl	8001224 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  User_BSP_Init();
 8000e48:	f7ff fc16 	bl	8000678 <User_BSP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Driver_ADC_Test_Task();
 8000e4c:	f7ff fc5a 	bl	8000704 <Driver_ADC_Test_Task>
 8000e50:	e7fc      	b.n	8000e4c <main+0x1c>
	...

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b09c      	sub	sp, #112	; 0x70
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	224c      	movs	r2, #76	; 0x4c
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f009 fe47 	bl	800aaf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f009 fe41 	bl	800aaf6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e74:	2002      	movs	r0, #2
 8000e76:	f005 f9d1 	bl	800621c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <SystemClock_Config+0xfc>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a33      	ldr	r2, [pc, #204]	; (8000f50 <SystemClock_Config+0xfc>)
 8000e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <SystemClock_Config+0xfc>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <SystemClock_Config+0x100>)
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <SystemClock_Config+0x100>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <SystemClock_Config+0x100>)
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eac:	bf00      	nop
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <SystemClock_Config+0xfc>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eba:	d1f8      	bne.n	8000eae <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <SystemClock_Config+0x104>)
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <SystemClock_Config+0x104>)
 8000ec2:	f023 0303 	bic.w	r3, r3, #3
 8000ec6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ee0:	233c      	movs	r3, #60	; 0x3c
 8000ee2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4618      	mov	r0, r3
 8000f02:	f005 f9c5 	bl	8006290 <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f0c:	f000 f826 	bl	8000f5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f10:	233f      	movs	r3, #63	; 0x3f
 8000f12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2303      	movs	r3, #3
 8000f16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f24:	2340      	movs	r3, #64	; 0x40
 8000f26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f2e:	2340      	movs	r3, #64	; 0x40
 8000f30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2104      	movs	r1, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fdd6 	bl	8006ae8 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f42:	f000 f80b 	bl	8000f5c <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3770      	adds	r7, #112	; 0x70
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	58024800 	.word	0x58024800
 8000f54:	58000400 	.word	0x58000400
 8000f58:	58024400 	.word	0x58024400

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_MspInit+0x30>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x30>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x30>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58024400 	.word	0x58024400

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 fa6a 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <DMA1_Stream0_IRQHandler+0x10>)
 8000ff6:	f003 fc4f 	bl	8004898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000104 	.word	0x24000104

08001004 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00a      	b.n	800102c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001016:	f3af 8000 	nop.w
 800101a:	4601      	mov	r1, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf0      	blt.n	8001016 <_read+0x12>
	}

return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_close>:
	}
	return len;
}

int _close(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001066:	605a      	str	r2, [r3, #4]
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_isatty>:

int _isatty(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	return 1;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f009 fb16 	bl	800a708 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	24080000 	.word	0x24080000
 8001108:	00001000 	.word	0x00001000
 800110c:	24000090 	.word	0x24000090
 8001110:	24000220 	.word	0x24000220

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <SystemInit+0xe4>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a36      	ldr	r2, [pc, #216]	; (80011f8 <SystemInit+0xe4>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <SystemInit+0xe8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	2b06      	cmp	r3, #6
 8001132:	d807      	bhi.n	8001144 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <SystemInit+0xe8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 030f 	bic.w	r3, r3, #15
 800113c:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <SystemInit+0xe8>)
 800113e:	f043 0307 	orr.w	r3, r3, #7
 8001142:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001144:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <SystemInit+0xec>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a2d      	ldr	r2, [pc, #180]	; (8001200 <SystemInit+0xec>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <SystemInit+0xec>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <SystemInit+0xec>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4929      	ldr	r1, [pc, #164]	; (8001200 <SystemInit+0xec>)
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <SystemInit+0xf0>)
 800115e:	4013      	ands	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <SystemInit+0xe8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <SystemInit+0xe8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 030f 	bic.w	r3, r3, #15
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <SystemInit+0xe8>)
 8001178:	f043 0307 	orr.w	r3, r3, #7
 800117c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <SystemInit+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <SystemInit+0xec>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <SystemInit+0xec>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <SystemInit+0xec>)
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <SystemInit+0xf4>)
 8001194:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <SystemInit+0xec>)
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <SystemInit+0xf8>)
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <SystemInit+0xec>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <SystemInit+0xfc>)
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <SystemInit+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <SystemInit+0xec>)
 80011aa:	4a19      	ldr	r2, [pc, #100]	; (8001210 <SystemInit+0xfc>)
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <SystemInit+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <SystemInit+0xec>)
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <SystemInit+0xfc>)
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <SystemInit+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <SystemInit+0xec>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <SystemInit+0xec>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <SystemInit+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <SystemInit+0x100>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <SystemInit+0x104>)
 80011d8:	4013      	ands	r3, r2
 80011da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011de:	d202      	bcs.n	80011e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <SystemInit+0x108>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <SystemInit+0x10c>)
 80011e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011ec:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	52002000 	.word	0x52002000
 8001200:	58024400 	.word	0x58024400
 8001204:	eaf6ed7f 	.word	0xeaf6ed7f
 8001208:	02020200 	.word	0x02020200
 800120c:	01ff0000 	.word	0x01ff0000
 8001210:	01010280 	.word	0x01010280
 8001214:	5c001000 	.word	0x5c001000
 8001218:	ffff0000 	.word	0xffff0000
 800121c:	51008108 	.word	0x51008108
 8001220:	52004000 	.word	0x52004000

08001224 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <MX_USART1_UART_Init+0x94>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 800126e:	f008 f94d 	bl	800950c <HAL_UART_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001278:	f7ff fe70 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127c:	2100      	movs	r1, #0
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001280:	f009 f978 	bl	800a574 <HAL_UARTEx_SetTxFifoThreshold>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800128a:	f7ff fe67 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128e:	2100      	movs	r1, #0
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 8001292:	f009 f9ad 	bl	800a5f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800129c:	f7ff fe5e 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_USART1_UART_Init+0x90>)
 80012a2:	f009 f92e 	bl	800a502 <HAL_UARTEx_DisableFifoMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f7ff fe56 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2400017c 	.word	0x2400017c
 80012b8:	40011000 	.word	0x40011000

080012bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0b8      	sub	sp, #224	; 0xe0
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	22bc      	movs	r2, #188	; 0xbc
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f009 fc0a 	bl	800aaf6 <memset>
  if(uartHandle->Instance==USART1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <HAL_UART_MspInit+0xc0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d142      	bne.n	8001372 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 ff80 	bl	8007200 <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001306:	f7ff fe29 	bl	8000f5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800130c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_UART_MspInit+0xc4>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800131c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_UART_MspInit+0xc4>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001346:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800134a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001360:	2307      	movs	r3, #7
 8001362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_UART_MspInit+0xc8>)
 800136e:	f004 fda5 	bl	8005ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	37e0      	adds	r7, #224	; 0xe0
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40011000 	.word	0x40011000
 8001380:	58024400 	.word	0x58024400
 8001384:	58020000 	.word	0x58020000

08001388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800138c:	f7ff fec2 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	; (80013c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	; (80013d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f009 fb77 	bl	800aaa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ba:	f7ff fd39 	bl	8000e30 <main>
  bx  lr
 80013be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013c8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80013cc:	0800b750 	.word	0x0800b750
  ldr r2, =_sbss
 80013d0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80013d4:	24000220 	.word	0x24000220

080013d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC3_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e2:	2003      	movs	r0, #3
 80013e4:	f002 f934 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013e8:	f005 fd34 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_Init+0x68>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	4913      	ldr	r1, [pc, #76]	; (8001448 <HAL_Init+0x6c>)
 80013fa:	5ccb      	ldrb	r3, [r1, r3]
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_Init+0x68>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_Init+0x6c>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <HAL_Init+0x70>)
 800141e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_Init+0x74>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f814 	bl	8001454 <HAL_InitTick>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e002      	b.n	800143c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001436:	f7ff fd97 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58024400 	.word	0x58024400
 8001448:	0800b668 	.word	0x0800b668
 800144c:	24000004 	.word	0x24000004
 8001450:	24000000 	.word	0x24000000

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_InitTick+0x60>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e021      	b.n	80014ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_InitTick+0x64>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_InitTick+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f002 f919 	bl	80036b6 <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f002 f8e3 	bl	8003666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_InitTick+0x68>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2400000c 	.word	0x2400000c
 80014b8:	24000000 	.word	0x24000000
 80014bc:	24000008 	.word	0x24000008

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	2400000c 	.word	0x2400000c
 80014e4:	2400020c 	.word	0x2400020c

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2400020c 	.word	0x2400020c

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ffee 	bl	80014e8 <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_Delay+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffde 	bl	80014e8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2400000c 	.word	0x2400000c

08001548 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetREVID+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0c1b      	lsrs	r3, r3, #16
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	5c001000 	.word	0x5c001000

08001560 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3360      	adds	r3, #96	; 0x60
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	611a      	str	r2, [r3, #16]
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800163a:	b480      	push	{r7}
 800163c:	b087      	sub	sp, #28
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3360      	adds	r3, #96	; 0x60
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
  }
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001696:	b480      	push	{r7}
 8001698:	b087      	sub	sp, #28
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3330      	adds	r3, #48	; 0x30
 80016a6:	461a      	mov	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	4413      	add	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	211f      	movs	r1, #31
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0e9b      	lsrs	r3, r3, #26
 80016ce:	f003 011f 	and.w	r1, r3, #31
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f023 0203 	bic.w	r2, r3, #3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60da      	str	r2, [r3, #12]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3314      	adds	r3, #20
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	0e5b      	lsrs	r3, r3, #25
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	0d1b      	lsrs	r3, r3, #20
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2107      	movs	r1, #7
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	401a      	ands	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0d1b      	lsrs	r3, r3, #20
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0318 	and.w	r3, r3, #24
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001790:	40d9      	lsrs	r1, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	400b      	ands	r3, r1
 8001796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800179a:	431a      	orrs	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	000fffff 	.word	0x000fffff

080017b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6093      	str	r3, [r2, #8]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	5fffffc0 	.word	0x5fffffc0

080017f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001808:	d101      	bne.n	800180e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <LL_ADC_EnableInternalRegulator+0x24>)
 800182a:	4013      	ands	r3, r2
 800182c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	6fffffc0 	.word	0x6fffffc0

08001844 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001858:	d101      	bne.n	800185e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <LL_ADC_Enable+0x24>)
 800187a:	4013      	ands	r3, r2
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	7fffffc0 	.word	0x7fffffc0

08001894 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LL_ADC_Disable+0x24>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	f043 0202 	orr.w	r2, r3, #2
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	7fffffc0 	.word	0x7fffffc0

080018bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <LL_ADC_IsEnabled+0x18>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_ADC_IsEnabled+0x1a>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d101      	bne.n	80018fa <LL_ADC_IsDisableOngoing+0x18>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_ADC_IsDisableOngoing+0x1a>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <LL_ADC_REG_StartConversion+0x24>)
 8001916:	4013      	ands	r3, r2
 8001918:	f043 0204 	orr.w	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	7fffffc0 	.word	0x7fffffc0

08001930 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <LL_ADC_REG_StopConversion+0x24>)
 800193e:	4013      	ands	r3, r2
 8001940:	f043 0210 	orr.w	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	7fffffc0 	.word	0x7fffffc0

08001958 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b04      	cmp	r3, #4
 800196a:	d101      	bne.n	8001970 <LL_ADC_REG_IsConversionOngoing+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <LL_ADC_INJ_StopConversion+0x24>)
 800198e:	4013      	ands	r3, r2
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	7fffffc0 	.word	0x7fffffc0

080019a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d101      	bne.n	80019c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e18e      	b.n	8001d08 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff f835 	bl	8000a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff feef 	bl	80017f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fed5 	bl	80017d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff0a 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d114      	bne.n	8001a60 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff feee 	bl	800181c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a40:	4b9a      	ldr	r3, [pc, #616]	; (8001cac <HAL_ADC_Init+0x2dc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	4a9a      	ldr	r2, [pc, #616]	; (8001cb0 <HAL_ADC_Init+0x2e0>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a52:	e002      	b.n	8001a5a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f9      	bne.n	8001a54 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff feed 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f043 0210 	orr.w	r2, r3, #16
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff61 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 8001a96:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8128 	bne.w	8001cf6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 8124 	bne.w	8001cf6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ab6:	f043 0202 	orr.w	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fefa 	bl	80018bc <LL_ADC_IsEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d136      	bne.n	8001b3c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a78      	ldr	r2, [pc, #480]	; (8001cb4 <HAL_ADC_Init+0x2e4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_Init+0x112>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <HAL_ADC_Init+0x2e8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10e      	bne.n	8001b00 <HAL_ADC_Init+0x130>
 8001ae2:	4874      	ldr	r0, [pc, #464]	; (8001cb4 <HAL_ADC_Init+0x2e4>)
 8001ae4:	f7ff feea 	bl	80018bc <LL_ADC_IsEnabled>
 8001ae8:	4604      	mov	r4, r0
 8001aea:	4873      	ldr	r0, [pc, #460]	; (8001cb8 <HAL_ADC_Init+0x2e8>)
 8001aec:	f7ff fee6 	bl	80018bc <LL_ADC_IsEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4323      	orrs	r3, r4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	e008      	b.n	8001b12 <HAL_ADC_Init+0x142>
 8001b00:	486e      	ldr	r0, [pc, #440]	; (8001cbc <HAL_ADC_Init+0x2ec>)
 8001b02:	f7ff fedb 	bl	80018bc <LL_ADC_IsEnabled>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d012      	beq.n	8001b3c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_ADC_Init+0x2e4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Init+0x15a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a64      	ldr	r2, [pc, #400]	; (8001cb8 <HAL_ADC_Init+0x2e8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_Init+0x15e>
 8001b2a:	4a65      	ldr	r2, [pc, #404]	; (8001cc0 <HAL_ADC_Init+0x2f0>)
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_Init+0x160>
 8001b2e:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_ADC_Init+0x2f4>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f7ff fd12 	bl	8001560 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b3c:	f7ff fd04 	bl	8001548 <HAL_GetREVID>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d914      	bls.n	8001b74 <HAL_ADC_Init+0x1a4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d110      	bne.n	8001b74 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7d5b      	ldrb	r3, [r3, #21]
 8001b56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b5c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7f1b      	ldrb	r3, [r3, #28]
 8001b68:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b6a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b6c:	f043 030c 	orr.w	r3, r3, #12
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	e00d      	b.n	8001b90 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7d5b      	ldrb	r3, [r3, #21]
 8001b78:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b7e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b84:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7f1b      	ldrb	r3, [r3, #28]
 8001b8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7f1b      	ldrb	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	045b      	lsls	r3, r3, #17
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_ADC_Init+0x2f8>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	69b9      	ldr	r1, [r7, #24]
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff febc 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 8001be0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fede 	bl	80019a8 <LL_ADC_INJ_IsConversionOngoing>
 8001bec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d14a      	bne.n	8001c8a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d147      	bne.n	8001c8a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7d1b      	ldrb	r3, [r3, #20]
 8001bfe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_ADC_Init+0x2fc>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d11b      	bne.n	8001c5e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_ADC_Init+0x300>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c3a:	3a01      	subs	r2, #1
 8001c3c:	0411      	lsls	r1, r2, #16
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	611a      	str	r2, [r3, #16]
 8001c5c:	e007      	b.n	8001c6e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f001 f96d 	bl	8002f64 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d120      	bne.n	8001cd4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f023 010f 	bic.w	r1, r3, #15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8001caa:	e01b      	b.n	8001ce4 <HAL_ADC_Init+0x314>
 8001cac:	24000000 	.word	0x24000000
 8001cb0:	053e2d63 	.word	0x053e2d63
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40022100 	.word	0x40022100
 8001cbc:	58026000 	.word	0x58026000
 8001cc0:	40022300 	.word	0x40022300
 8001cc4:	58026300 	.word	0x58026300
 8001cc8:	fff0c003 	.word	0xfff0c003
 8001ccc:	ffffbffc 	.word	0xffffbffc
 8001cd0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020f 	bic.w	r2, r2, #15
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f023 0303 	bic.w	r3, r3, #3
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
 8001cf4:	e007      	b.n	8001d06 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f043 0210 	orr.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3724      	adds	r7, #36	; 0x24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}

08001d10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a5c      	ldr	r2, [pc, #368]	; (8001e90 <HAL_ADC_Start+0x180>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_ADC_Start+0x1c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a5b      	ldr	r2, [pc, #364]	; (8001e94 <HAL_ADC_Start+0x184>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_Start+0x20>
 8001d2c:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <HAL_ADC_Start+0x188>)
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_Start+0x22>
 8001d30:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <HAL_ADC_Start+0x18c>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fd3e 	bl	80017b4 <LL_ADC_GetMultimode>
 8001d38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fe0a 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 809a 	bne.w	8001e80 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Start+0x4a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e095      	b.n	8001e86 <HAL_ADC_Start+0x176>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 ff80 	bl	8002c68 <ADC_Enable>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 8081 	bne.w	8001e76 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d78:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_ADC_Start+0x190>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <HAL_ADC_Start+0x184>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d002      	beq.n	8001d94 <HAL_ADC_Start+0x84>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_Start+0x86>
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_ADC_Start+0x180>)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d002      	beq.n	8001da4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dbc:	d106      	bne.n	8001dcc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	221c      	movs	r2, #28
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <HAL_ADC_Start+0x184>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d002      	beq.n	8001df2 <HAL_ADC_Start+0xe2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Start+0xe4>
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_ADC_Start+0x180>)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d008      	beq.n	8001e0e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d002      	beq.n	8001e0e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d114      	bne.n	8001e38 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fd69 	bl	8001908 <LL_ADC_REG_StartConversion>
 8001e36:	e025      	b.n	8001e84 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_ADC_Start+0x184>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d002      	beq.n	8001e54 <HAL_ADC_Start+0x144>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e000      	b.n	8001e56 <HAL_ADC_Start+0x146>
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_ADC_Start+0x180>)
 8001e56:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00f      	beq.n	8001e84 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
 8001e74:	e006      	b.n	8001e84 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e7e:	e001      	b.n	8001e84 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
 8001e82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40022100 	.word	0x40022100
 8001e98:	40022300 	.word	0x40022300
 8001e9c:	58026300 	.word	0x58026300
 8001ea0:	fffff0fe 	.word	0xfffff0fe

08001ea4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Stop+0x16>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e021      	b.n	8001efe <HAL_ADC_Stop+0x5a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fe13 	bl	8002af0 <ADC_ConversionStop>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 ff51 	bl	8002d7c <ADC_Disable>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_ADC_Stop+0x64>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	ffffeefe 	.word	0xffffeefe

08001f0c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a97      	ldr	r2, [pc, #604]	; (8002178 <HAL_ADC_Start_IT+0x26c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_Start_IT+0x1c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a96      	ldr	r2, [pc, #600]	; (800217c <HAL_ADC_Start_IT+0x270>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_Start_IT+0x20>
 8001f28:	4b95      	ldr	r3, [pc, #596]	; (8002180 <HAL_ADC_Start_IT+0x274>)
 8001f2a:	e000      	b.n	8001f2e <HAL_ADC_Start_IT+0x22>
 8001f2c:	4b95      	ldr	r3, [pc, #596]	; (8002184 <HAL_ADC_Start_IT+0x278>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc40 	bl	80017b4 <LL_ADC_GetMultimode>
 8001f34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fd0c 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 810f 	bne.w	8002166 <HAL_ADC_Start_IT+0x25a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Start_IT+0x4a>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e10c      	b.n	8002170 <HAL_ADC_Start_IT+0x264>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fe82 	bl	8002c68 <ADC_Enable>
 8001f64:	4603      	mov	r3, r0
 8001f66:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 80f6 	bne.w	800215c <HAL_ADC_Start_IT+0x250>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f74:	4b84      	ldr	r3, [pc, #528]	; (8002188 <HAL_ADC_Start_IT+0x27c>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_ADC_Start_IT+0x270>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d002      	beq.n	8001f90 <HAL_ADC_Start_IT+0x84>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e000      	b.n	8001f92 <HAL_ADC_Start_IT+0x86>
 8001f90:	4b79      	ldr	r3, [pc, #484]	; (8002178 <HAL_ADC_Start_IT+0x26c>)
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d002      	beq.n	8001fa0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f023 0206 	bic.w	r2, r3, #6
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fc4:	e002      	b.n	8001fcc <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	221c      	movs	r2, #28
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 021c 	bic.w	r2, r2, #28
 8001fea:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d108      	bne.n	8002006 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0208 	orr.w	r2, r2, #8
 8002002:	605a      	str	r2, [r3, #4]
          break;
 8002004:	e008      	b.n	8002018 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0204 	orr.w	r2, r2, #4
 8002014:	605a      	str	r2, [r3, #4]
          break;
 8002016:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0210 	orr.w	r2, r2, #16
 800202e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_ADC_Start_IT+0x270>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d002      	beq.n	8002040 <HAL_ADC_Start_IT+0x134>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e000      	b.n	8002042 <HAL_ADC_Start_IT+0x136>
 8002040:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <HAL_ADC_Start_IT+0x26c>)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4293      	cmp	r3, r2
 8002048:	d008      	beq.n	800205c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d002      	beq.n	800205c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d13b      	bne.n	80020d4 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d02d      	beq.n	80020c6 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b08      	cmp	r3, #8
 8002080:	d110      	bne.n	80020a4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0220 	bic.w	r2, r2, #32
 8002090:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a0:	605a      	str	r2, [r3, #4]
              break;
 80020a2:	e011      	b.n	80020c8 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	605a      	str	r2, [r3, #4]
              break;
 80020c4:	e000      	b.n	80020c8 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80020c6:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fc1b 	bl	8001908 <LL_ADC_REG_StartConversion>
 80020d2:	e04c      	b.n	800216e <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_ADC_Start_IT+0x270>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_Start_IT+0x1e4>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_Start_IT+0x1e6>
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <HAL_ADC_Start_IT+0x26c>)
 80020f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d035      	beq.n	800216c <HAL_ADC_Start_IT+0x260>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002108:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d110      	bne.n	800213a <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0220 	bic.w	r2, r2, #32
 8002126:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002136:	605a      	str	r2, [r3, #4]
              break;
 8002138:	e019      	b.n	800216e <HAL_ADC_Start_IT+0x262>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002148:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0220 	orr.w	r2, r2, #32
 8002158:	605a      	str	r2, [r3, #4]
              break;
 800215a:	e008      	b.n	800216e <HAL_ADC_Start_IT+0x262>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002164:	e003      	b.n	800216e <HAL_ADC_Start_IT+0x262>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	75fb      	strb	r3, [r7, #23]
 800216a:	e000      	b.n	800216e <HAL_ADC_Start_IT+0x262>
        }
 800216c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800216e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40022000 	.word	0x40022000
 800217c:	40022100 	.word	0x40022100
 8002180:	40022300 	.word	0x40022300
 8002184:	58026300 	.word	0x58026300
 8002188:	fffff0fe 	.word	0xfffff0fe

0800218c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Stop_IT+0x16>
 800219e:	2302      	movs	r3, #2
 80021a0:	e029      	b.n	80021f6 <HAL_ADC_Stop_IT+0x6a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021aa:	2103      	movs	r1, #3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fc9f 	bl	8002af0 <ADC_ConversionStop>
 80021b2:	4603      	mov	r3, r0
 80021b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d117      	bne.n	80021ec <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 021c 	bic.w	r2, r2, #28
 80021ca:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fdd5 	bl	8002d7c <ADC_Disable>
 80021d2:	4603      	mov	r3, r0
 80021d4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_ADC_Stop_IT+0x74>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	ffffeefe 	.word	0xffffeefe

08002204 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a55      	ldr	r2, [pc, #340]	; (800236c <HAL_ADC_Start_DMA+0x168>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_ADC_Start_DMA+0x20>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a54      	ldr	r2, [pc, #336]	; (8002370 <HAL_ADC_Start_DMA+0x16c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_ADC_Start_DMA+0x24>
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_ADC_Start_DMA+0x170>)
 8002226:	e000      	b.n	800222a <HAL_ADC_Start_DMA+0x26>
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_ADC_Start_DMA+0x174>)
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fac2 	bl	80017b4 <LL_ADC_GetMultimode>
 8002230:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fb8e 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 808c 	bne.w	800235c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Start_DMA+0x4e>
 800224e:	2302      	movs	r3, #2
 8002250:	e087      	b.n	8002362 <HAL_ADC_Start_DMA+0x15e>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d002      	beq.n	800226c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b09      	cmp	r3, #9
 800226a:	d170      	bne.n	800234e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fcfb 	bl	8002c68 <ADC_Enable>
 8002272:	4603      	mov	r3, r0
 8002274:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d163      	bne.n	8002344 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002280:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_ADC_Start_DMA+0x178>)
 8002282:	4013      	ands	r3, r2
 8002284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a37      	ldr	r2, [pc, #220]	; (8002370 <HAL_ADC_Start_DMA+0x16c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d002      	beq.n	800229c <HAL_ADC_Start_DMA+0x98>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	e000      	b.n	800229e <HAL_ADC_Start_DMA+0x9a>
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_ADC_Start_DMA+0x168>)
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d002      	beq.n	80022ac <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f023 0206 	bic.w	r2, r3, #6
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	659a      	str	r2, [r3, #88]	; 0x58
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <HAL_ADC_Start_DMA+0x17c>)
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_ADC_Start_DMA+0x180>)
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ec:	4a26      	ldr	r2, [pc, #152]	; (8002388 <HAL_ADC_Start_DMA+0x184>)
 80022ee:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	221c      	movs	r2, #28
 80022f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0210 	orr.w	r2, r2, #16
 800230e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7ff f9e7 	bl	80016ee <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	4619      	mov	r1, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f001 fd2a 	bl	8003d88 <HAL_DMA_Start_IT>
 8002334:	4603      	mov	r3, r0
 8002336:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fae3 	bl	8001908 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002342:	e00d      	b.n	8002360 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800234c:	e008      	b.n	8002360 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800235a:	e001      	b.n	8002360 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002360:	7dfb      	ldrb	r3, [r7, #23]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40022000 	.word	0x40022000
 8002370:	40022100 	.word	0x40022100
 8002374:	40022300 	.word	0x40022300
 8002378:	58026300 	.word	0x58026300
 800237c:	fffff0fe 	.word	0xfffff0fe
 8002380:	08002e3b 	.word	0x08002e3b
 8002384:	08002f13 	.word	0x08002f13
 8002388:	08002f2f 	.word	0x08002f2f

0800238c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Stop_DMA+0x16>
 800239e:	2302      	movs	r3, #2
 80023a0:	e04f      	b.n	8002442 <HAL_ADC_Stop_DMA+0xb6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023aa:	2103      	movs	r1, #3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fb9f 	bl	8002af0 <ADC_ConversionStop>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d13d      	bne.n	8002438 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0203 	bic.w	r2, r2, #3
 80023ca:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d10f      	bne.n	80023fa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 ff3c 	bl	800425c <HAL_DMA_Abort>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0210 	bic.w	r2, r2, #16
 8002408:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fcb3 	bl	8002d7c <ADC_Disable>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e002      	b.n	8002422 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fcad 	bl	8002d7c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_ADC_Stop_DMA+0xc0>)
 800242e:	4013      	ands	r3, r2
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	ffffeefe 	.word	0xffffeefe

08002450 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b0a1      	sub	sp, #132	; 0x84
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a9d      	ldr	r2, [pc, #628]	; (80026e0 <HAL_ADC_ConfigChannel+0x290>)
 800246a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x2a>
 8002476:	2302      	movs	r3, #2
 8002478:	e321      	b.n	8002abe <HAL_ADC_ConfigChannel+0x66e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fa66 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 8306 	bne.w	8002aa0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249c:	2b00      	cmp	r3, #0
 800249e:	d108      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x62>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	e016      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x90>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80024ca:	2320      	movs	r3, #32
 80024cc:	e003      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80024ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	69d1      	ldr	r1, [r2, #28]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	430b      	orrs	r3, r1
 80024ec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f7ff f8cb 	bl	8001696 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fa27 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 800250a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fa49 	bl	80019a8 <LL_ADC_INJ_IsConversionOngoing>
 8002516:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 80b3 	bne.w	8002686 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 80af 	bne.w	8002686 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff f8ed 	bl	8001714 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800253a:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <HAL_ADC_ConfigChannel+0x294>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002546:	d10b      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x110>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	e01d      	b.n	800259c <HAL_ADC_ConfigChannel+0x14c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x136>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	e00a      	b.n	800259c <HAL_ADC_ConfigChannel+0x14c>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d027      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6919      	ldr	r1, [r3, #16]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b4:	f7ff f808 	bl	80015c8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	7e5b      	ldrb	r3, [r3, #25]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x17e>
 80025c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025cc:	e000      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x180>
 80025ce:	2300      	movs	r3, #0
 80025d0:	461a      	mov	r2, r3
 80025d2:	f7ff f832 	bl	800163a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	7e1b      	ldrb	r3, [r3, #24]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d102      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x19c>
 80025e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ea:	e000      	b.n	80025ee <HAL_ADC_ConfigChannel+0x19e>
 80025ec:	2300      	movs	r3, #0
 80025ee:	461a      	mov	r2, r3
 80025f0:	f7ff f80a 	bl	8001608 <LL_ADC_SetDataRightShift>
 80025f4:	e047      	b.n	8002686 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	069b      	lsls	r3, r3, #26
 8002606:	429a      	cmp	r2, r3
 8002608:	d107      	bne.n	800261a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002618:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	069b      	lsls	r3, r3, #26
 800262a:	429a      	cmp	r2, r3
 800262c:	d107      	bne.n	800263e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800263c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	069b      	lsls	r3, r3, #26
 800264e:	429a      	cmp	r2, r3
 8002650:	d107      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002660:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	069b      	lsls	r3, r3, #26
 8002672:	429a      	cmp	r2, r3
 8002674:	d107      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002684:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f916 	bl	80018bc <LL_ADC_IsEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 820d 	bne.w	8002ab2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f7ff f861 	bl	800176c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_ADC_ConfigChannel+0x290>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	f040 8133 	bne.w	800291c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d110      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x298>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	bf94      	ite	ls
 80026d6:	2301      	movls	r3, #1
 80026d8:	2300      	movhi	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	e01e      	b.n	800271c <HAL_ADC_ConfigChannel+0x2cc>
 80026de:	bf00      	nop
 80026e0:	47ff0000 	.word	0x47ff0000
 80026e4:	5c001000 	.word	0x5c001000
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80026fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e003      	b.n	800270c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2b09      	cmp	r3, #9
 8002714:	bf94      	ite	ls
 8002716:	2301      	movls	r3, #1
 8002718:	2300      	movhi	r3, #0
 800271a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	2b00      	cmp	r3, #0
 800271e:	d079      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_ADC_ConfigChannel+0x2ec>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	3301      	adds	r3, #1
 8002734:	069b      	lsls	r3, r3, #26
 8002736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273a:	e015      	b.n	8002768 <HAL_ADC_ConfigChannel+0x318>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800274e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e003      	b.n	8002760 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3301      	adds	r3, #1
 8002762:	069b      	lsls	r3, r3, #26
 8002764:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x338>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0e9b      	lsrs	r3, r3, #26
 800277a:	3301      	adds	r3, #1
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	e017      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x368>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002798:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800279a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80027a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	ea42 0103 	orr.w	r1, r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_ADC_ConfigChannel+0x38e>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	e018      	b.n	8002810 <HAL_ADC_ConfigChannel+0x3c0>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80027f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002810:	430b      	orrs	r3, r1
 8002812:	e07e      	b.n	8002912 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x3e0>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800282e:	e015      	b.n	800285c <HAL_ADC_ConfigChannel+0x40c>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e003      	b.n	8002854 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	069b      	lsls	r3, r3, #26
 8002858:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_ConfigChannel+0x42c>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	3301      	adds	r3, #1
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	e017      	b.n	80028ac <HAL_ADC_ConfigChannel+0x45c>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	61bb      	str	r3, [r7, #24]
  return result;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e003      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x488>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	3b1e      	subs	r3, #30
 80028d0:	051b      	lsls	r3, r3, #20
 80028d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d6:	e01b      	b.n	8002910 <HAL_ADC_ConfigChannel+0x4c0>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	60fb      	str	r3, [r7, #12]
  return result;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	3b1e      	subs	r3, #30
 800290a:	051b      	lsls	r3, r3, #20
 800290c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002910:	430b      	orrs	r3, r1
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	6892      	ldr	r2, [r2, #8]
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe fefc 	bl	8001714 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f280 80c6 	bge.w	8002ab2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a67      	ldr	r2, [pc, #412]	; (8002ac8 <HAL_ADC_ConfigChannel+0x678>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_ADC_ConfigChannel+0x4ea>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_ADC_ConfigChannel+0x67c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x4ee>
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_ADC_ConfigChannel+0x680>)
 800293c:	e000      	b.n	8002940 <HAL_ADC_ConfigChannel+0x4f0>
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_ADC_ConfigChannel+0x684>)
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fe33 	bl	80015ac <LL_ADC_GetCommonPathInternalCh>
 8002946:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_ADC_ConfigChannel+0x678>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_ADC_ConfigChannel+0x50c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5d      	ldr	r2, [pc, #372]	; (8002acc <HAL_ADC_ConfigChannel+0x67c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10e      	bne.n	800297a <HAL_ADC_ConfigChannel+0x52a>
 800295c:	485a      	ldr	r0, [pc, #360]	; (8002ac8 <HAL_ADC_ConfigChannel+0x678>)
 800295e:	f7fe ffad 	bl	80018bc <LL_ADC_IsEnabled>
 8002962:	4604      	mov	r4, r0
 8002964:	4859      	ldr	r0, [pc, #356]	; (8002acc <HAL_ADC_ConfigChannel+0x67c>)
 8002966:	f7fe ffa9 	bl	80018bc <LL_ADC_IsEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	4323      	orrs	r3, r4
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e008      	b.n	800298c <HAL_ADC_ConfigChannel+0x53c>
 800297a:	4857      	ldr	r0, [pc, #348]	; (8002ad8 <HAL_ADC_ConfigChannel+0x688>)
 800297c:	f7fe ff9e 	bl	80018bc <LL_ADC_IsEnabled>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d07d      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a51      	ldr	r2, [pc, #324]	; (8002adc <HAL_ADC_ConfigChannel+0x68c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d130      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x5ac>
 800299a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12b      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a4b      	ldr	r2, [pc, #300]	; (8002ad8 <HAL_ADC_ConfigChannel+0x688>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	f040 8081 	bne.w	8002ab2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a44      	ldr	r2, [pc, #272]	; (8002ac8 <HAL_ADC_ConfigChannel+0x678>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x574>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a43      	ldr	r2, [pc, #268]	; (8002acc <HAL_ADC_ConfigChannel+0x67c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x578>
 80029c4:	4a42      	ldr	r2, [pc, #264]	; (8002ad0 <HAL_ADC_ConfigChannel+0x680>)
 80029c6:	e000      	b.n	80029ca <HAL_ADC_ConfigChannel+0x57a>
 80029c8:	4a42      	ldr	r2, [pc, #264]	; (8002ad4 <HAL_ADC_ConfigChannel+0x684>)
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f7fe fdd7 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d8:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_ADC_ConfigChannel+0x690>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	4a41      	ldr	r2, [pc, #260]	; (8002ae4 <HAL_ADC_ConfigChannel+0x694>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029ec:	e002      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f9      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029fa:	e05a      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a39      	ldr	r2, [pc, #228]	; (8002ae8 <HAL_ADC_ConfigChannel+0x698>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11e      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x5f4>
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d119      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a30      	ldr	r2, [pc, #192]	; (8002ad8 <HAL_ADC_ConfigChannel+0x688>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d14b      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2a      	ldr	r2, [pc, #168]	; (8002ac8 <HAL_ADC_ConfigChannel+0x678>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x5de>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a28      	ldr	r2, [pc, #160]	; (8002acc <HAL_ADC_ConfigChannel+0x67c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x5e2>
 8002a2e:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <HAL_ADC_ConfigChannel+0x680>)
 8002a30:	e000      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x5e4>
 8002a32:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <HAL_ADC_ConfigChannel+0x684>)
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f7fe fda2 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a42:	e036      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a28      	ldr	r2, [pc, #160]	; (8002aec <HAL_ADC_ConfigChannel+0x69c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d131      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
 8002a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d12c      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ad8 <HAL_ADC_ConfigChannel+0x688>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d127      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_ADC_ConfigChannel+0x678>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x626>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a16      	ldr	r2, [pc, #88]	; (8002acc <HAL_ADC_ConfigChannel+0x67c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x62a>
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_ADC_ConfigChannel+0x680>)
 8002a78:	e000      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x62c>
 8002a7a:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <HAL_ADC_ConfigChannel+0x684>)
 8002a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7fe fd7e 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
 8002a8a:	e012      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a9e:	e008      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3784      	adds	r7, #132	; 0x84
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022100 	.word	0x40022100
 8002ad0:	40022300 	.word	0x40022300
 8002ad4:	58026300 	.word	0x58026300
 8002ad8:	58026000 	.word	0x58026000
 8002adc:	cb840000 	.word	0xcb840000
 8002ae0:	24000000 	.word	0x24000000
 8002ae4:	053e2d63 	.word	0x053e2d63
 8002ae8:	c7520000 	.word	0xc7520000
 8002aec:	cfb80000 	.word	0xcfb80000

08002af0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe ff26 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 8002b0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe ff48 	bl	80019a8 <LL_ADC_INJ_IsConversionOngoing>
 8002b18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d103      	bne.n	8002b28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8098 	beq.w	8002c58 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d02a      	beq.n	8002b8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7d5b      	ldrb	r3, [r3, #21]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d126      	bne.n	8002b8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7d1b      	ldrb	r3, [r3, #20]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d122      	bne.n	8002b8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b4a:	e014      	b.n	8002b76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4a45      	ldr	r2, [pc, #276]	; (8002c64 <ADC_ConversionStop+0x174>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d90d      	bls.n	8002b70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f043 0210 	orr.w	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e074      	b.n	8002c5a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d1e3      	bne.n	8002b4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d014      	beq.n	8002bbc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fede 	bl	8001958 <LL_ADC_REG_IsConversionOngoing>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fe9b 	bl	80018e2 <LL_ADC_IsDisableOngoing>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe feba 	bl	8001930 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d014      	beq.n	8002bec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe feee 	bl	80019a8 <LL_ADC_INJ_IsConversionOngoing>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fe83 	bl	80018e2 <LL_ADC_IsDisableOngoing>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe feca 	bl	8001980 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d005      	beq.n	8002bfe <ADC_ConversionStop+0x10e>
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d105      	bne.n	8002c04 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	617b      	str	r3, [r7, #20]
        break;
 8002bfc:	e005      	b.n	8002c0a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	617b      	str	r3, [r7, #20]
        break;
 8002c02:	e002      	b.n	8002c0a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002c04:	2304      	movs	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]
        break;
 8002c08:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fc6d 	bl	80014e8 <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c10:	e01b      	b.n	8002c4a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c12:	f7fe fc69 	bl	80014e8 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d914      	bls.n	8002c4a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	f043 0210 	orr.w	r2, r3, #16
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e007      	b.n	8002c5a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1dc      	bne.n	8002c12 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	000cdbff 	.word	0x000cdbff

08002c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fe21 	bl	80018bc <LL_ADC_IsEnabled>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d16e      	bne.n	8002d5e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <ADC_Enable+0x100>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f043 0210 	orr.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e05a      	b.n	8002d60 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fddc 	bl	800186c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fc18 	bl	80014e8 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <ADC_Enable+0x104>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <ADC_Enable+0x66>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <ADC_Enable+0x108>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <ADC_Enable+0x6a>
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <ADC_Enable+0x10c>)
 8002cd0:	e000      	b.n	8002cd4 <ADC_Enable+0x6c>
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <ADC_Enable+0x110>)
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fd6d 	bl	80017b4 <LL_ADC_GetMultimode>
 8002cda:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <ADC_Enable+0x108>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d002      	beq.n	8002cec <ADC_Enable+0x84>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e000      	b.n	8002cee <ADC_Enable+0x86>
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <ADC_Enable+0x104>)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02c      	beq.n	8002d50 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d130      	bne.n	8002d5e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cfc:	e028      	b.n	8002d50 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe fdda 	bl	80018bc <LL_ADC_IsEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fdaa 	bl	800186c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d18:	f7fe fbe6 	bl	80014e8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d914      	bls.n	8002d50 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d00d      	beq.n	8002d50 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0210 	orr.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d1cf      	bne.n	8002cfe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	8000003f 	.word	0x8000003f
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40022100 	.word	0x40022100
 8002d74:	40022300 	.word	0x40022300
 8002d78:	58026300 	.word	0x58026300

08002d7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fdaa 	bl	80018e2 <LL_ADC_IsDisableOngoing>
 8002d8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe fd91 	bl	80018bc <LL_ADC_IsEnabled>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d047      	beq.n	8002e30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d144      	bne.n	8002e30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030d 	and.w	r3, r3, #13
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10c      	bne.n	8002dce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fd6b 	bl	8001894 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dc6:	f7fe fb8f 	bl	80014e8 <HAL_GetTick>
 8002dca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dcc:	e029      	b.n	8002e22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f043 0210 	orr.w	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e023      	b.n	8002e32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dea:	f7fe fb7d 	bl	80014e8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d914      	bls.n	8002e22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e007      	b.n	8002e32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1dc      	bne.n	8002dea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d14b      	bne.n	8002eec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d021      	beq.n	8002eb2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fbfc 	bl	8001670 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d032      	beq.n	8002ee4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d12b      	bne.n	8002ee4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11f      	bne.n	8002ee4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
 8002eb0:	e018      	b.n	8002ee4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7fd fce3 	bl	80008b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eea:	e00e      	b.n	8002f0a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7fd fced 	bl	80008d8 <HAL_ADC_ErrorCallback>
}
 8002efe:	e004      	b.n	8002f0a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7fd fccf 	bl	80008c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7fd fcbf 	bl	80008d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a79      	ldr	r2, [pc, #484]	; (8003158 <ADC_ConfigureBoostMode+0x1f4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <ADC_ConfigureBoostMode+0x1c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a78      	ldr	r2, [pc, #480]	; (800315c <ADC_ConfigureBoostMode+0x1f8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d109      	bne.n	8002f94 <ADC_ConfigureBoostMode+0x30>
 8002f80:	4b77      	ldr	r3, [pc, #476]	; (8003160 <ADC_ConfigureBoostMode+0x1fc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e008      	b.n	8002fa6 <ADC_ConfigureBoostMode+0x42>
 8002f94:	4b73      	ldr	r3, [pc, #460]	; (8003164 <ADC_ConfigureBoostMode+0x200>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01c      	beq.n	8002fe4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002faa:	f004 f8cd 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8002fae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb8:	d010      	beq.n	8002fdc <ADC_ConfigureBoostMode+0x78>
 8002fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fbe:	d871      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x140>
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d002      	beq.n	8002fcc <ADC_ConfigureBoostMode+0x68>
 8002fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fca:	d16b      	bne.n	80030a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	60fb      	str	r3, [r7, #12]
        break;
 8002fda:	e066      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	60fb      	str	r3, [r7, #12]
        break;
 8002fe2:	e062      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fe4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002fe8:	f005 f84a 	bl	8008080 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ff6:	d051      	beq.n	800309c <ADC_ConfigureBoostMode+0x138>
 8002ff8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ffc:	d854      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 8002ffe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003002:	d047      	beq.n	8003094 <ADC_ConfigureBoostMode+0x130>
 8003004:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003008:	d84e      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 800300a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800300e:	d03d      	beq.n	800308c <ADC_ConfigureBoostMode+0x128>
 8003010:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003014:	d848      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 8003016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800301a:	d033      	beq.n	8003084 <ADC_ConfigureBoostMode+0x120>
 800301c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003020:	d842      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 8003022:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003026:	d029      	beq.n	800307c <ADC_ConfigureBoostMode+0x118>
 8003028:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800302c:	d83c      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 800302e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003032:	d01a      	beq.n	800306a <ADC_ConfigureBoostMode+0x106>
 8003034:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003038:	d836      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 800303a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800303e:	d014      	beq.n	800306a <ADC_ConfigureBoostMode+0x106>
 8003040:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003044:	d830      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 8003046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304a:	d00e      	beq.n	800306a <ADC_ConfigureBoostMode+0x106>
 800304c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003050:	d82a      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 8003052:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003056:	d008      	beq.n	800306a <ADC_ConfigureBoostMode+0x106>
 8003058:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800305c:	d824      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x144>
 800305e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003062:	d002      	beq.n	800306a <ADC_ConfigureBoostMode+0x106>
 8003064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003068:	d11e      	bne.n	80030a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0c9b      	lsrs	r3, r3, #18
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	60fb      	str	r3, [r7, #12]
        break;
 800307a:	e016      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
        break;
 8003082:	e012      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	60fb      	str	r3, [r7, #12]
        break;
 800308a:	e00e      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	60fb      	str	r3, [r7, #12]
        break;
 8003092:	e00a      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	09db      	lsrs	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
        break;
 800309a:	e006      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	60fb      	str	r3, [r7, #12]
        break;
 80030a2:	e002      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
        break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80030a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80030aa:	f7fe fa4d 	bl	8001548 <HAL_GetREVID>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d815      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <ADC_ConfigureBoostMode+0x204>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d908      	bls.n	80030d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030d0:	e03e      	b.n	8003150 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e0:	609a      	str	r2, [r3, #8]
}
 80030e2:	e035      	b.n	8003150 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a1f      	ldr	r2, [pc, #124]	; (800316c <ADC_ConfigureBoostMode+0x208>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d808      	bhi.n	8003104 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003100:	609a      	str	r2, [r3, #8]
}
 8003102:	e025      	b.n	8003150 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <ADC_ConfigureBoostMode+0x20c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d80a      	bhi.n	8003122 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	e016      	b.n	8003150 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a13      	ldr	r2, [pc, #76]	; (8003174 <ADC_ConfigureBoostMode+0x210>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d80a      	bhi.n	8003140 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	e007      	b.n	8003150 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40022000 	.word	0x40022000
 800315c:	40022100 	.word	0x40022100
 8003160:	40022300 	.word	0x40022300
 8003164:	58026300 	.word	0x58026300
 8003168:	01312d00 	.word	0x01312d00
 800316c:	005f5e10 	.word	0x005f5e10
 8003170:	00bebc20 	.word	0x00bebc20
 8003174:	017d7840 	.word	0x017d7840

08003178 <LL_ADC_IsEnabled>:
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <LL_ADC_IsEnabled+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_ADC_IsEnabled+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <LL_ADC_StartCalibration>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <LL_ADC_StartCalibration+0x38>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031c0:	430a      	orrs	r2, r1
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	3ffeffc0 	.word	0x3ffeffc0

080031dc <LL_ADC_IsCalibrationOnGoing>:
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031f0:	d101      	bne.n	80031f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_REG_IsConversionOngoing>:
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d101      	bne.n	800321c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADCEx_Calibration_Start+0x1e>
 8003246:	2302      	movs	r3, #2
 8003248:	e04c      	b.n	80032e4 <HAL_ADCEx_Calibration_Start+0xb8>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff fd92 	bl	8002d7c <ADC_Disable>
 8003258:	4603      	mov	r3, r0
 800325a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d135      	bne.n	80032ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <HAL_ADCEx_Calibration_Start+0xc0>)
 8003268:	4013      	ands	r3, r2
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff90 	bl	80031a0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003280:	e014      	b.n	80032ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3301      	adds	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d30d      	bcc.n	80032ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f023 0312 	bic.w	r3, r3, #18
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e01b      	b.n	80032e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff93 	bl	80031dc <LL_ADC_IsCalibrationOnGoing>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e2      	bne.n	8003282 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f023 0303 	bic.w	r3, r3, #3
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
 80032cc:	e005      	b.n	80032da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	ffffeefd 	.word	0xffffeefd
 80032f0:	25c3f800 	.word	0x25c3f800

080032f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b09f      	sub	sp, #124	; 0x7c
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800330e:	2302      	movs	r3, #2
 8003310:	e0be      	b.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5c      	ldr	r2, [pc, #368]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d102      	bne.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800332c:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	e001      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e09d      	b.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff54 	bl	8003204 <LL_ADC_REG_IsConversionOngoing>
 800335c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff4e 	bl	8003204 <LL_ADC_REG_IsConversionOngoing>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d17f      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	2b00      	cmp	r3, #0
 8003372:	d17c      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a46      	ldr	r2, [pc, #280]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003388:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800338a:	e000      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800338c:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800338e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d039      	beq.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3a      	ldr	r2, [pc, #232]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a38      	ldr	r2, [pc, #224]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10e      	bne.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033be:	4836      	ldr	r0, [pc, #216]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033c0:	f7ff feda 	bl	8003178 <LL_ADC_IsEnabled>
 80033c4:	4604      	mov	r4, r0
 80033c6:	4835      	ldr	r0, [pc, #212]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033c8:	f7ff fed6 	bl	8003178 <LL_ADC_IsEnabled>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4323      	orrs	r3, r4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e008      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033dc:	4832      	ldr	r0, [pc, #200]	; (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033de:	f7ff fecb 	bl	8003178 <LL_ADC_IsEnabled>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d047      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	6811      	ldr	r1, [r2, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	431a      	orrs	r2, r3
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800340a:	e03a      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10e      	bne.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800342c:	481a      	ldr	r0, [pc, #104]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800342e:	f7ff fea3 	bl	8003178 <LL_ADC_IsEnabled>
 8003432:	4604      	mov	r4, r0
 8003434:	4819      	ldr	r0, [pc, #100]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003436:	f7ff fe9f 	bl	8003178 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	4323      	orrs	r3, r4
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e008      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800344a:	4817      	ldr	r0, [pc, #92]	; (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800344c:	f7ff fe94 	bl	8003178 <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003466:	4013      	ands	r3, r2
 8003468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800346a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800346c:	e009      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003480:	e000      	b.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003482:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800348c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003490:	4618      	mov	r0, r3
 8003492:	377c      	adds	r7, #124	; 0x7c
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}
 8003498:	40022000 	.word	0x40022000
 800349c:	40022100 	.word	0x40022100
 80034a0:	40022300 	.word	0x40022300
 80034a4:	58026300 	.word	0x58026300
 80034a8:	58026000 	.word	0x58026000
 80034ac:	fffff0e0 	.word	0xfffff0e0

080034b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <__NVIC_SetPriorityGrouping+0x40>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <__NVIC_SetPriorityGrouping+0x40>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	05fa0000 	.word	0x05fa0000

080034f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800351e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db0b      	blt.n	800353e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <__NVIC_EnableIRQ+0x38>)
 800352e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2001      	movs	r0, #1
 8003536:	fa00 f202 	lsl.w	r2, r0, r2
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	; (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800361c:	d301      	bcc.n	8003622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <SysTick_Config+0x40>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362a:	210f      	movs	r1, #15
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f7ff ff8e 	bl	8003550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <SysTick_Config+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <SysTick_Config+0x40>)
 800363c:	2207      	movs	r2, #7
 800363e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff29 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003674:	f7ff ff40 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 8003678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff90 	bl	80035a4 <NVIC_EncodePriority>
 8003684:	4602      	mov	r2, r0
 8003686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5f 	bl	8003550 <__NVIC_SetPriority>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff33 	bl	8003514 <__NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffa4 	bl	800360c <SysTick_Config>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7fd ff06 	bl	80014e8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e316      	b.n	8003d16 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a66      	ldr	r2, [pc, #408]	; (8003888 <HAL_DMA_Init+0x1b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_DMA_Init+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a63      	ldr	r2, [pc, #396]	; (8003890 <HAL_DMA_Init+0x1c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a62      	ldr	r2, [pc, #392]	; (8003894 <HAL_DMA_Init+0x1c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_DMA_Init+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5f      	ldr	r2, [pc, #380]	; (800389c <HAL_DMA_Init+0x1cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_DMA_Init+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	; (80038a4 <HAL_DMA_Init+0x1d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5a      	ldr	r2, [pc, #360]	; (80038a8 <HAL_DMA_Init+0x1d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a59      	ldr	r2, [pc, #356]	; (80038ac <HAL_DMA_Init+0x1dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a57      	ldr	r2, [pc, #348]	; (80038b0 <HAL_DMA_Init+0x1e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a56      	ldr	r2, [pc, #344]	; (80038b4 <HAL_DMA_Init+0x1e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_DMA_Init+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a53      	ldr	r2, [pc, #332]	; (80038bc <HAL_DMA_Init+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_DMA_Init+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a50      	ldr	r2, [pc, #320]	; (80038c4 <HAL_DMA_Init+0x1f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_Init+0xbc>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_Init+0xbe>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 813b 	beq.w	8003a0a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a37      	ldr	r2, [pc, #220]	; (8003888 <HAL_DMA_Init+0x1b8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04a      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a36      	ldr	r2, [pc, #216]	; (800388c <HAL_DMA_Init+0x1bc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d045      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a34      	ldr	r2, [pc, #208]	; (8003890 <HAL_DMA_Init+0x1c0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d040      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a33      	ldr	r2, [pc, #204]	; (8003894 <HAL_DMA_Init+0x1c4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d03b      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a31      	ldr	r2, [pc, #196]	; (8003898 <HAL_DMA_Init+0x1c8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d036      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a30      	ldr	r2, [pc, #192]	; (800389c <HAL_DMA_Init+0x1cc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d031      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2e      	ldr	r2, [pc, #184]	; (80038a0 <HAL_DMA_Init+0x1d0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02c      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <HAL_DMA_Init+0x1d4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d027      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <HAL_DMA_Init+0x1d8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <HAL_DMA_Init+0x1dc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <HAL_DMA_Init+0x1e0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <HAL_DMA_Init+0x1e4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_DMA_Init+0x174>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <HAL_DMA_Init+0x1e8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a24      	ldr	r2, [pc, #144]	; (80038bc <HAL_DMA_Init+0x1ec>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_DMA_Init+0x1f0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_Init+0x174>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_DMA_Init+0x1f4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <HAL_DMA_Init+0x186>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e007      	b.n	8003866 <HAL_DMA_Init+0x196>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003866:	e02f      	b.n	80038c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003868:	f7fd fe3e 	bl	80014e8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b05      	cmp	r3, #5
 8003874:	d928      	bls.n	80038c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e246      	b.n	8003d16 <HAL_DMA_Init+0x646>
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1c8      	bne.n	8003868 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4b83      	ldr	r3, [pc, #524]	; (8003af0 <HAL_DMA_Init+0x420>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80038ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003906:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b04      	cmp	r3, #4
 800391a:	d107      	bne.n	800392c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4313      	orrs	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800392c:	4b71      	ldr	r3, [pc, #452]	; (8003af4 <HAL_DMA_Init+0x424>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b71      	ldr	r3, [pc, #452]	; (8003af8 <HAL_DMA_Init+0x428>)
 8003932:	4013      	ands	r3, r2
 8003934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003938:	d328      	bcc.n	800398c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b28      	cmp	r3, #40	; 0x28
 8003940:	d903      	bls.n	800394a <HAL_DMA_Init+0x27a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b2e      	cmp	r3, #46	; 0x2e
 8003948:	d917      	bls.n	800397a <HAL_DMA_Init+0x2aa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b3e      	cmp	r3, #62	; 0x3e
 8003950:	d903      	bls.n	800395a <HAL_DMA_Init+0x28a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b42      	cmp	r3, #66	; 0x42
 8003958:	d90f      	bls.n	800397a <HAL_DMA_Init+0x2aa>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b46      	cmp	r3, #70	; 0x46
 8003960:	d903      	bls.n	800396a <HAL_DMA_Init+0x29a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b48      	cmp	r3, #72	; 0x48
 8003968:	d907      	bls.n	800397a <HAL_DMA_Init+0x2aa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b4e      	cmp	r3, #78	; 0x4e
 8003970:	d905      	bls.n	800397e <HAL_DMA_Init+0x2ae>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b52      	cmp	r3, #82	; 0x52
 8003978:	d801      	bhi.n	800397e <HAL_DMA_Init+0x2ae>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_DMA_Init+0x2b0>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0307 	bic.w	r3, r3, #7
 80039a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d117      	bne.n	80039e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f002 f8ed 	bl	8005ba8 <DMA_CheckFifoParam>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e197      	b.n	8003d16 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f002 f828 	bl	8005a44 <DMA_CalcBaseAndBitshift>
 80039f4:	4603      	mov	r3, r0
 80039f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	223f      	movs	r2, #63	; 0x3f
 8003a02:	409a      	lsls	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	e0cd      	b.n	8003ba6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_DMA_Init+0x42c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_DMA_Init+0x430>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01d      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_DMA_Init+0x434>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a36      	ldr	r2, [pc, #216]	; (8003b08 <HAL_DMA_Init+0x438>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a35      	ldr	r2, [pc, #212]	; (8003b0c <HAL_DMA_Init+0x43c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a33      	ldr	r2, [pc, #204]	; (8003b10 <HAL_DMA_Init+0x440>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <HAL_DMA_Init+0x444>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a30      	ldr	r2, [pc, #192]	; (8003b18 <HAL_DMA_Init+0x448>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_DMA_Init+0x38e>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_DMA_Init+0x390>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8097 	beq.w	8003b94 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a24      	ldr	r2, [pc, #144]	; (8003afc <HAL_DMA_Init+0x42c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d021      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <HAL_DMA_Init+0x430>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01c      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <HAL_DMA_Init+0x434>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d017      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_DMA_Init+0x438>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d012      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <HAL_DMA_Init+0x43c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00d      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_DMA_Init+0x440>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d008      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_DMA_Init+0x444>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_DMA_Init+0x448>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_DMA_Init+0x44c>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d020      	beq.n	8003b20 <HAL_DMA_Init+0x450>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d102      	bne.n	8003aec <HAL_DMA_Init+0x41c>
 8003ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aea:	e01a      	b.n	8003b22 <HAL_DMA_Init+0x452>
 8003aec:	2300      	movs	r3, #0
 8003aee:	e018      	b.n	8003b22 <HAL_DMA_Init+0x452>
 8003af0:	fe10803f 	.word	0xfe10803f
 8003af4:	5c001000 	.word	0x5c001000
 8003af8:	ffff0000 	.word	0xffff0000
 8003afc:	58025408 	.word	0x58025408
 8003b00:	5802541c 	.word	0x5802541c
 8003b04:	58025430 	.word	0x58025430
 8003b08:	58025444 	.word	0x58025444
 8003b0c:	58025458 	.word	0x58025458
 8003b10:	5802546c 	.word	0x5802546c
 8003b14:	58025480 	.word	0x58025480
 8003b18:	58025494 	.word	0x58025494
 8003b1c:	fffe000f 	.word	0xfffe000f
 8003b20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68d2      	ldr	r2, [r2, #12]
 8003b26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <HAL_DMA_Init+0x650>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_DMA_Init+0x654>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f001 ff63 	bl	8005a44 <DMA_CalcBaseAndBitshift>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e008      	b.n	8003ba6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0b7      	b.n	8003d16 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5f      	ldr	r2, [pc, #380]	; (8003d28 <HAL_DMA_Init+0x658>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d072      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5d      	ldr	r2, [pc, #372]	; (8003d2c <HAL_DMA_Init+0x65c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d06d      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5c      	ldr	r2, [pc, #368]	; (8003d30 <HAL_DMA_Init+0x660>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d068      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5a      	ldr	r2, [pc, #360]	; (8003d34 <HAL_DMA_Init+0x664>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d063      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a59      	ldr	r2, [pc, #356]	; (8003d38 <HAL_DMA_Init+0x668>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d05e      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a57      	ldr	r2, [pc, #348]	; (8003d3c <HAL_DMA_Init+0x66c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d059      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_DMA_Init+0x670>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d054      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a54      	ldr	r2, [pc, #336]	; (8003d44 <HAL_DMA_Init+0x674>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d04f      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <HAL_DMA_Init+0x678>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d04a      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_DMA_Init+0x67c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d045      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a50      	ldr	r2, [pc, #320]	; (8003d50 <HAL_DMA_Init+0x680>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d040      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4e      	ldr	r2, [pc, #312]	; (8003d54 <HAL_DMA_Init+0x684>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d03b      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <HAL_DMA_Init+0x688>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d036      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_DMA_Init+0x68c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d031      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_DMA_Init+0x690>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d02c      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <HAL_DMA_Init+0x694>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d027      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <HAL_DMA_Init+0x698>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <HAL_DMA_Init+0x69c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01d      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a44      	ldr	r2, [pc, #272]	; (8003d70 <HAL_DMA_Init+0x6a0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <HAL_DMA_Init+0x6a4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <HAL_DMA_Init+0x6a8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <HAL_DMA_Init+0x6ac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <HAL_DMA_Init+0x6b0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <HAL_DMA_Init+0x6b4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_DMA_Init+0x5ca>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_DMA_Init+0x5cc>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d032      	beq.n	8003d06 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f001 fffd 	bl	8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d102      	bne.n	8003cb4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <HAL_DMA_Init+0x624>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d80c      	bhi.n	8003cf4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f002 f87a 	bl	8005dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	e008      	b.n	8003d06 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	a7fdabf8 	.word	0xa7fdabf8
 8003d24:	cccccccd 	.word	0xcccccccd
 8003d28:	40020010 	.word	0x40020010
 8003d2c:	40020028 	.word	0x40020028
 8003d30:	40020040 	.word	0x40020040
 8003d34:	40020058 	.word	0x40020058
 8003d38:	40020070 	.word	0x40020070
 8003d3c:	40020088 	.word	0x40020088
 8003d40:	400200a0 	.word	0x400200a0
 8003d44:	400200b8 	.word	0x400200b8
 8003d48:	40020410 	.word	0x40020410
 8003d4c:	40020428 	.word	0x40020428
 8003d50:	40020440 	.word	0x40020440
 8003d54:	40020458 	.word	0x40020458
 8003d58:	40020470 	.word	0x40020470
 8003d5c:	40020488 	.word	0x40020488
 8003d60:	400204a0 	.word	0x400204a0
 8003d64:	400204b8 	.word	0x400204b8
 8003d68:	58025408 	.word	0x58025408
 8003d6c:	5802541c 	.word	0x5802541c
 8003d70:	58025430 	.word	0x58025430
 8003d74:	58025444 	.word	0x58025444
 8003d78:	58025458 	.word	0x58025458
 8003d7c:	5802546c 	.word	0x5802546c
 8003d80:	58025480 	.word	0x58025480
 8003d84:	58025494 	.word	0x58025494

08003d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e226      	b.n	80041f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_DMA_Start_IT+0x2a>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e21f      	b.n	80041f2 <HAL_DMA_Start_IT+0x46a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	f040 820a 	bne.w	80041dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a68      	ldr	r2, [pc, #416]	; (8003f7c <HAL_DMA_Start_IT+0x1f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04a      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <HAL_DMA_Start_IT+0x1f8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d045      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a65      	ldr	r2, [pc, #404]	; (8003f84 <HAL_DMA_Start_IT+0x1fc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d040      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a63      	ldr	r2, [pc, #396]	; (8003f88 <HAL_DMA_Start_IT+0x200>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d03b      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a62      	ldr	r2, [pc, #392]	; (8003f8c <HAL_DMA_Start_IT+0x204>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d036      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a60      	ldr	r2, [pc, #384]	; (8003f90 <HAL_DMA_Start_IT+0x208>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d031      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a5f      	ldr	r2, [pc, #380]	; (8003f94 <HAL_DMA_Start_IT+0x20c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d02c      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a5d      	ldr	r2, [pc, #372]	; (8003f98 <HAL_DMA_Start_IT+0x210>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d027      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5c      	ldr	r2, [pc, #368]	; (8003f9c <HAL_DMA_Start_IT+0x214>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5a      	ldr	r2, [pc, #360]	; (8003fa0 <HAL_DMA_Start_IT+0x218>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01d      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a59      	ldr	r2, [pc, #356]	; (8003fa4 <HAL_DMA_Start_IT+0x21c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a57      	ldr	r2, [pc, #348]	; (8003fa8 <HAL_DMA_Start_IT+0x220>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a56      	ldr	r2, [pc, #344]	; (8003fac <HAL_DMA_Start_IT+0x224>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a54      	ldr	r2, [pc, #336]	; (8003fb0 <HAL_DMA_Start_IT+0x228>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a53      	ldr	r2, [pc, #332]	; (8003fb4 <HAL_DMA_Start_IT+0x22c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a51      	ldr	r2, [pc, #324]	; (8003fb8 <HAL_DMA_Start_IT+0x230>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_DMA_Start_IT+0x100>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <HAL_DMA_Start_IT+0x110>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f001 fc24 	bl	80056ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a34      	ldr	r2, [pc, #208]	; (8003f7c <HAL_DMA_Start_IT+0x1f4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <HAL_DMA_Start_IT+0x1f8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <HAL_DMA_Start_IT+0x1fc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_DMA_Start_IT+0x200>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2e      	ldr	r2, [pc, #184]	; (8003f8c <HAL_DMA_Start_IT+0x204>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	; (8003f90 <HAL_DMA_Start_IT+0x208>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <HAL_DMA_Start_IT+0x20c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <HAL_DMA_Start_IT+0x210>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <HAL_DMA_Start_IT+0x214>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <HAL_DMA_Start_IT+0x218>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <HAL_DMA_Start_IT+0x21c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <HAL_DMA_Start_IT+0x220>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_DMA_Start_IT+0x224>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_DMA_Start_IT+0x228>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_DMA_Start_IT+0x22c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_DMA_Start_IT+0x230>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Start_IT+0x1c0>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_Start_IT+0x1c2>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d036      	beq.n	8003fbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 021e 	bic.w	r2, r3, #30
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0216 	orr.w	r2, r2, #22
 8003f60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d03e      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0208 	orr.w	r2, r2, #8
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e035      	b.n	8003fe8 <HAL_DMA_Start_IT+0x260>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 020e 	bic.w	r2, r3, #14
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 020a 	orr.w	r2, r2, #10
 8003fce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0204 	orr.w	r2, r2, #4
 8003fe6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a83      	ldr	r2, [pc, #524]	; (80041fc <HAL_DMA_Start_IT+0x474>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d072      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a82      	ldr	r2, [pc, #520]	; (8004200 <HAL_DMA_Start_IT+0x478>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d06d      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a80      	ldr	r2, [pc, #512]	; (8004204 <HAL_DMA_Start_IT+0x47c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d068      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7f      	ldr	r2, [pc, #508]	; (8004208 <HAL_DMA_Start_IT+0x480>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d063      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7d      	ldr	r2, [pc, #500]	; (800420c <HAL_DMA_Start_IT+0x484>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d05e      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7c      	ldr	r2, [pc, #496]	; (8004210 <HAL_DMA_Start_IT+0x488>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d059      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a7a      	ldr	r2, [pc, #488]	; (8004214 <HAL_DMA_Start_IT+0x48c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d054      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a79      	ldr	r2, [pc, #484]	; (8004218 <HAL_DMA_Start_IT+0x490>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d04f      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_DMA_Start_IT+0x494>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a76      	ldr	r2, [pc, #472]	; (8004220 <HAL_DMA_Start_IT+0x498>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a74      	ldr	r2, [pc, #464]	; (8004224 <HAL_DMA_Start_IT+0x49c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a73      	ldr	r2, [pc, #460]	; (8004228 <HAL_DMA_Start_IT+0x4a0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_DMA_Start_IT+0x4a4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a70      	ldr	r2, [pc, #448]	; (8004230 <HAL_DMA_Start_IT+0x4a8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6e      	ldr	r2, [pc, #440]	; (8004234 <HAL_DMA_Start_IT+0x4ac>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6d      	ldr	r2, [pc, #436]	; (8004238 <HAL_DMA_Start_IT+0x4b0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6b      	ldr	r2, [pc, #428]	; (800423c <HAL_DMA_Start_IT+0x4b4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6a      	ldr	r2, [pc, #424]	; (8004240 <HAL_DMA_Start_IT+0x4b8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a68      	ldr	r2, [pc, #416]	; (8004244 <HAL_DMA_Start_IT+0x4bc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_Start_IT+0x4c0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a65      	ldr	r2, [pc, #404]	; (800424c <HAL_DMA_Start_IT+0x4c4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_DMA_Start_IT+0x4c8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a62      	ldr	r2, [pc, #392]	; (8004254 <HAL_DMA_Start_IT+0x4cc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_DMA_Start_IT+0x4d0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_DMA_Start_IT+0x354>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_DMA_Start_IT+0x356>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01a      	beq.n	8004118 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a37      	ldr	r2, [pc, #220]	; (80041fc <HAL_DMA_Start_IT+0x474>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d04a      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a36      	ldr	r2, [pc, #216]	; (8004200 <HAL_DMA_Start_IT+0x478>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d045      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a34      	ldr	r2, [pc, #208]	; (8004204 <HAL_DMA_Start_IT+0x47c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d040      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a33      	ldr	r2, [pc, #204]	; (8004208 <HAL_DMA_Start_IT+0x480>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d03b      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a31      	ldr	r2, [pc, #196]	; (800420c <HAL_DMA_Start_IT+0x484>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d036      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a30      	ldr	r2, [pc, #192]	; (8004210 <HAL_DMA_Start_IT+0x488>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d031      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a2e      	ldr	r2, [pc, #184]	; (8004214 <HAL_DMA_Start_IT+0x48c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02c      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <HAL_DMA_Start_IT+0x490>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d027      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <HAL_DMA_Start_IT+0x494>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d022      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <HAL_DMA_Start_IT+0x498>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d01d      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a28      	ldr	r2, [pc, #160]	; (8004224 <HAL_DMA_Start_IT+0x49c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a27      	ldr	r2, [pc, #156]	; (8004228 <HAL_DMA_Start_IT+0x4a0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a25      	ldr	r2, [pc, #148]	; (800422c <HAL_DMA_Start_IT+0x4a4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a24      	ldr	r2, [pc, #144]	; (8004230 <HAL_DMA_Start_IT+0x4a8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <HAL_DMA_Start_IT+0x4ac>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	; (8004238 <HAL_DMA_Start_IT+0x4b0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <HAL_DMA_Start_IT+0x442>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e012      	b.n	80041f0 <HAL_DMA_Start_IT+0x468>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e009      	b.n	80041f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40020010 	.word	0x40020010
 8004200:	40020028 	.word	0x40020028
 8004204:	40020040 	.word	0x40020040
 8004208:	40020058 	.word	0x40020058
 800420c:	40020070 	.word	0x40020070
 8004210:	40020088 	.word	0x40020088
 8004214:	400200a0 	.word	0x400200a0
 8004218:	400200b8 	.word	0x400200b8
 800421c:	40020410 	.word	0x40020410
 8004220:	40020428 	.word	0x40020428
 8004224:	40020440 	.word	0x40020440
 8004228:	40020458 	.word	0x40020458
 800422c:	40020470 	.word	0x40020470
 8004230:	40020488 	.word	0x40020488
 8004234:	400204a0 	.word	0x400204a0
 8004238:	400204b8 	.word	0x400204b8
 800423c:	58025408 	.word	0x58025408
 8004240:	5802541c 	.word	0x5802541c
 8004244:	58025430 	.word	0x58025430
 8004248:	58025444 	.word	0x58025444
 800424c:	58025458 	.word	0x58025458
 8004250:	5802546c 	.word	0x5802546c
 8004254:	58025480 	.word	0x58025480
 8004258:	58025494 	.word	0x58025494

0800425c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004264:	f7fd f940 	bl	80014e8 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e2dc      	b.n	800482e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d008      	beq.n	8004292 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e2cd      	b.n	800482e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a76      	ldr	r2, [pc, #472]	; (8004470 <HAL_DMA_Abort+0x214>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d04a      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a74      	ldr	r2, [pc, #464]	; (8004474 <HAL_DMA_Abort+0x218>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d045      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a73      	ldr	r2, [pc, #460]	; (8004478 <HAL_DMA_Abort+0x21c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d040      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a71      	ldr	r2, [pc, #452]	; (800447c <HAL_DMA_Abort+0x220>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d03b      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a70      	ldr	r2, [pc, #448]	; (8004480 <HAL_DMA_Abort+0x224>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d036      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6e      	ldr	r2, [pc, #440]	; (8004484 <HAL_DMA_Abort+0x228>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d031      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6d      	ldr	r2, [pc, #436]	; (8004488 <HAL_DMA_Abort+0x22c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d02c      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6b      	ldr	r2, [pc, #428]	; (800448c <HAL_DMA_Abort+0x230>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d027      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6a      	ldr	r2, [pc, #424]	; (8004490 <HAL_DMA_Abort+0x234>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d022      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a68      	ldr	r2, [pc, #416]	; (8004494 <HAL_DMA_Abort+0x238>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01d      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a67      	ldr	r2, [pc, #412]	; (8004498 <HAL_DMA_Abort+0x23c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d018      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a65      	ldr	r2, [pc, #404]	; (800449c <HAL_DMA_Abort+0x240>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a64      	ldr	r2, [pc, #400]	; (80044a0 <HAL_DMA_Abort+0x244>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a62      	ldr	r2, [pc, #392]	; (80044a4 <HAL_DMA_Abort+0x248>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a61      	ldr	r2, [pc, #388]	; (80044a8 <HAL_DMA_Abort+0x24c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_DMA_Abort+0xd6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a5f      	ldr	r2, [pc, #380]	; (80044ac <HAL_DMA_Abort+0x250>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d101      	bne.n	8004336 <HAL_DMA_Abort+0xda>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_DMA_Abort+0xdc>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 021e 	bic.w	r2, r2, #30
 800434a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800435a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e00a      	b.n	800437a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 020e 	bic.w	r2, r2, #14
 8004372:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <HAL_DMA_Abort+0x214>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d072      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a3a      	ldr	r2, [pc, #232]	; (8004474 <HAL_DMA_Abort+0x218>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d06d      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a39      	ldr	r2, [pc, #228]	; (8004478 <HAL_DMA_Abort+0x21c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d068      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a37      	ldr	r2, [pc, #220]	; (800447c <HAL_DMA_Abort+0x220>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d063      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a36      	ldr	r2, [pc, #216]	; (8004480 <HAL_DMA_Abort+0x224>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d05e      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a34      	ldr	r2, [pc, #208]	; (8004484 <HAL_DMA_Abort+0x228>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d059      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a33      	ldr	r2, [pc, #204]	; (8004488 <HAL_DMA_Abort+0x22c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d054      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a31      	ldr	r2, [pc, #196]	; (800448c <HAL_DMA_Abort+0x230>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d04f      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a30      	ldr	r2, [pc, #192]	; (8004490 <HAL_DMA_Abort+0x234>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d04a      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <HAL_DMA_Abort+0x238>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d045      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2d      	ldr	r2, [pc, #180]	; (8004498 <HAL_DMA_Abort+0x23c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d040      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a2b      	ldr	r2, [pc, #172]	; (800449c <HAL_DMA_Abort+0x240>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d03b      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2a      	ldr	r2, [pc, #168]	; (80044a0 <HAL_DMA_Abort+0x244>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d036      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a28      	ldr	r2, [pc, #160]	; (80044a4 <HAL_DMA_Abort+0x248>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d031      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_DMA_Abort+0x24c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d02c      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a25      	ldr	r2, [pc, #148]	; (80044ac <HAL_DMA_Abort+0x250>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d027      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a24      	ldr	r2, [pc, #144]	; (80044b0 <HAL_DMA_Abort+0x254>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d022      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a22      	ldr	r2, [pc, #136]	; (80044b4 <HAL_DMA_Abort+0x258>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01d      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <HAL_DMA_Abort+0x25c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d018      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <HAL_DMA_Abort+0x260>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <HAL_DMA_Abort+0x264>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00e      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_DMA_Abort+0x268>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <HAL_DMA_Abort+0x26c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_DMA_Abort+0x20e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a19      	ldr	r2, [pc, #100]	; (80044cc <HAL_DMA_Abort+0x270>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d132      	bne.n	80044d0 <HAL_DMA_Abort+0x274>
 800446a:	2301      	movs	r3, #1
 800446c:	e031      	b.n	80044d2 <HAL_DMA_Abort+0x276>
 800446e:	bf00      	nop
 8004470:	40020010 	.word	0x40020010
 8004474:	40020028 	.word	0x40020028
 8004478:	40020040 	.word	0x40020040
 800447c:	40020058 	.word	0x40020058
 8004480:	40020070 	.word	0x40020070
 8004484:	40020088 	.word	0x40020088
 8004488:	400200a0 	.word	0x400200a0
 800448c:	400200b8 	.word	0x400200b8
 8004490:	40020410 	.word	0x40020410
 8004494:	40020428 	.word	0x40020428
 8004498:	40020440 	.word	0x40020440
 800449c:	40020458 	.word	0x40020458
 80044a0:	40020470 	.word	0x40020470
 80044a4:	40020488 	.word	0x40020488
 80044a8:	400204a0 	.word	0x400204a0
 80044ac:	400204b8 	.word	0x400204b8
 80044b0:	58025408 	.word	0x58025408
 80044b4:	5802541c 	.word	0x5802541c
 80044b8:	58025430 	.word	0x58025430
 80044bc:	58025444 	.word	0x58025444
 80044c0:	58025458 	.word	0x58025458
 80044c4:	5802546c 	.word	0x5802546c
 80044c8:	58025480 	.word	0x58025480
 80044cc:	58025494 	.word	0x58025494
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a6d      	ldr	r2, [pc, #436]	; (80046a0 <HAL_DMA_Abort+0x444>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d04a      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a6b      	ldr	r2, [pc, #428]	; (80046a4 <HAL_DMA_Abort+0x448>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d045      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6a      	ldr	r2, [pc, #424]	; (80046a8 <HAL_DMA_Abort+0x44c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d040      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a68      	ldr	r2, [pc, #416]	; (80046ac <HAL_DMA_Abort+0x450>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d03b      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a67      	ldr	r2, [pc, #412]	; (80046b0 <HAL_DMA_Abort+0x454>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d036      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <HAL_DMA_Abort+0x458>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d031      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a64      	ldr	r2, [pc, #400]	; (80046b8 <HAL_DMA_Abort+0x45c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d02c      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a62      	ldr	r2, [pc, #392]	; (80046bc <HAL_DMA_Abort+0x460>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d027      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a61      	ldr	r2, [pc, #388]	; (80046c0 <HAL_DMA_Abort+0x464>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d022      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5f      	ldr	r2, [pc, #380]	; (80046c4 <HAL_DMA_Abort+0x468>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01d      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5e      	ldr	r2, [pc, #376]	; (80046c8 <HAL_DMA_Abort+0x46c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5c      	ldr	r2, [pc, #368]	; (80046cc <HAL_DMA_Abort+0x470>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5b      	ldr	r2, [pc, #364]	; (80046d0 <HAL_DMA_Abort+0x474>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a59      	ldr	r2, [pc, #356]	; (80046d4 <HAL_DMA_Abort+0x478>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a58      	ldr	r2, [pc, #352]	; (80046d8 <HAL_DMA_Abort+0x47c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_DMA_Abort+0x32a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a56      	ldr	r2, [pc, #344]	; (80046dc <HAL_DMA_Abort+0x480>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d108      	bne.n	8004598 <HAL_DMA_Abort+0x33c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e007      	b.n	80045a8 <HAL_DMA_Abort+0x34c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045a8:	e013      	b.n	80045d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045aa:	f7fc ff9d 	bl	80014e8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d90c      	bls.n	80045d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2203      	movs	r2, #3
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e12d      	b.n	800482e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2f      	ldr	r2, [pc, #188]	; (80046a0 <HAL_DMA_Abort+0x444>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d04a      	beq.n	800467e <HAL_DMA_Abort+0x422>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <HAL_DMA_Abort+0x448>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d045      	beq.n	800467e <HAL_DMA_Abort+0x422>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2c      	ldr	r2, [pc, #176]	; (80046a8 <HAL_DMA_Abort+0x44c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d040      	beq.n	800467e <HAL_DMA_Abort+0x422>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <HAL_DMA_Abort+0x450>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d03b      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <HAL_DMA_Abort+0x454>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d036      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <HAL_DMA_Abort+0x458>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d031      	beq.n	800467e <HAL_DMA_Abort+0x422>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a26      	ldr	r2, [pc, #152]	; (80046b8 <HAL_DMA_Abort+0x45c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d02c      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <HAL_DMA_Abort+0x460>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d027      	beq.n	800467e <HAL_DMA_Abort+0x422>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <HAL_DMA_Abort+0x464>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d022      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_DMA_Abort+0x468>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01d      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <HAL_DMA_Abort+0x46c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d018      	beq.n	800467e <HAL_DMA_Abort+0x422>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <HAL_DMA_Abort+0x470>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1d      	ldr	r2, [pc, #116]	; (80046d0 <HAL_DMA_Abort+0x474>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <HAL_DMA_Abort+0x478>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_DMA_Abort+0x422>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <HAL_DMA_Abort+0x47c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_DMA_Abort+0x422>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_DMA_Abort+0x480>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_DMA_Abort+0x426>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_DMA_Abort+0x428>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02b      	beq.n	80046e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	223f      	movs	r2, #63	; 0x3f
 8004698:	409a      	lsls	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	e02a      	b.n	80046f6 <HAL_DMA_Abort+0x49a>
 80046a0:	40020010 	.word	0x40020010
 80046a4:	40020028 	.word	0x40020028
 80046a8:	40020040 	.word	0x40020040
 80046ac:	40020058 	.word	0x40020058
 80046b0:	40020070 	.word	0x40020070
 80046b4:	40020088 	.word	0x40020088
 80046b8:	400200a0 	.word	0x400200a0
 80046bc:	400200b8 	.word	0x400200b8
 80046c0:	40020410 	.word	0x40020410
 80046c4:	40020428 	.word	0x40020428
 80046c8:	40020440 	.word	0x40020440
 80046cc:	40020458 	.word	0x40020458
 80046d0:	40020470 	.word	0x40020470
 80046d4:	40020488 	.word	0x40020488
 80046d8:	400204a0 	.word	0x400204a0
 80046dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2201      	movs	r2, #1
 80046f0:	409a      	lsls	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4f      	ldr	r2, [pc, #316]	; (8004838 <HAL_DMA_Abort+0x5dc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d072      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a4d      	ldr	r2, [pc, #308]	; (800483c <HAL_DMA_Abort+0x5e0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d06d      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4c      	ldr	r2, [pc, #304]	; (8004840 <HAL_DMA_Abort+0x5e4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d068      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a4a      	ldr	r2, [pc, #296]	; (8004844 <HAL_DMA_Abort+0x5e8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d063      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a49      	ldr	r2, [pc, #292]	; (8004848 <HAL_DMA_Abort+0x5ec>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d05e      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a47      	ldr	r2, [pc, #284]	; (800484c <HAL_DMA_Abort+0x5f0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d059      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a46      	ldr	r2, [pc, #280]	; (8004850 <HAL_DMA_Abort+0x5f4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d054      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a44      	ldr	r2, [pc, #272]	; (8004854 <HAL_DMA_Abort+0x5f8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d04f      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a43      	ldr	r2, [pc, #268]	; (8004858 <HAL_DMA_Abort+0x5fc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04a      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a41      	ldr	r2, [pc, #260]	; (800485c <HAL_DMA_Abort+0x600>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d045      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a40      	ldr	r2, [pc, #256]	; (8004860 <HAL_DMA_Abort+0x604>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d040      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a3e      	ldr	r2, [pc, #248]	; (8004864 <HAL_DMA_Abort+0x608>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a3d      	ldr	r2, [pc, #244]	; (8004868 <HAL_DMA_Abort+0x60c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d036      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3b      	ldr	r2, [pc, #236]	; (800486c <HAL_DMA_Abort+0x610>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d031      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <HAL_DMA_Abort+0x614>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d02c      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a38      	ldr	r2, [pc, #224]	; (8004874 <HAL_DMA_Abort+0x618>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a37      	ldr	r2, [pc, #220]	; (8004878 <HAL_DMA_Abort+0x61c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a35      	ldr	r2, [pc, #212]	; (800487c <HAL_DMA_Abort+0x620>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a34      	ldr	r2, [pc, #208]	; (8004880 <HAL_DMA_Abort+0x624>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a32      	ldr	r2, [pc, #200]	; (8004884 <HAL_DMA_Abort+0x628>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a31      	ldr	r2, [pc, #196]	; (8004888 <HAL_DMA_Abort+0x62c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2f      	ldr	r2, [pc, #188]	; (800488c <HAL_DMA_Abort+0x630>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2e      	ldr	r2, [pc, #184]	; (8004890 <HAL_DMA_Abort+0x634>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_Abort+0x58a>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <HAL_DMA_Abort+0x638>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_DMA_Abort+0x58e>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_DMA_Abort+0x590>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00c      	beq.n	800481c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004810:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800481a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40020010 	.word	0x40020010
 800483c:	40020028 	.word	0x40020028
 8004840:	40020040 	.word	0x40020040
 8004844:	40020058 	.word	0x40020058
 8004848:	40020070 	.word	0x40020070
 800484c:	40020088 	.word	0x40020088
 8004850:	400200a0 	.word	0x400200a0
 8004854:	400200b8 	.word	0x400200b8
 8004858:	40020410 	.word	0x40020410
 800485c:	40020428 	.word	0x40020428
 8004860:	40020440 	.word	0x40020440
 8004864:	40020458 	.word	0x40020458
 8004868:	40020470 	.word	0x40020470
 800486c:	40020488 	.word	0x40020488
 8004870:	400204a0 	.word	0x400204a0
 8004874:	400204b8 	.word	0x400204b8
 8004878:	58025408 	.word	0x58025408
 800487c:	5802541c 	.word	0x5802541c
 8004880:	58025430 	.word	0x58025430
 8004884:	58025444 	.word	0x58025444
 8004888:	58025458 	.word	0x58025458
 800488c:	5802546c 	.word	0x5802546c
 8004890:	58025480 	.word	0x58025480
 8004894:	58025494 	.word	0x58025494

08004898 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048a4:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_DMA_IRQHandler+0x1ac>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a67      	ldr	r2, [pc, #412]	; (8004a48 <HAL_DMA_IRQHandler+0x1b0>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0a9b      	lsrs	r3, r3, #10
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a5f      	ldr	r2, [pc, #380]	; (8004a4c <HAL_DMA_IRQHandler+0x1b4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d04a      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a5d      	ldr	r2, [pc, #372]	; (8004a50 <HAL_DMA_IRQHandler+0x1b8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d045      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5c      	ldr	r2, [pc, #368]	; (8004a54 <HAL_DMA_IRQHandler+0x1bc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d040      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5a      	ldr	r2, [pc, #360]	; (8004a58 <HAL_DMA_IRQHandler+0x1c0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d03b      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a59      	ldr	r2, [pc, #356]	; (8004a5c <HAL_DMA_IRQHandler+0x1c4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d036      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a57      	ldr	r2, [pc, #348]	; (8004a60 <HAL_DMA_IRQHandler+0x1c8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d031      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a56      	ldr	r2, [pc, #344]	; (8004a64 <HAL_DMA_IRQHandler+0x1cc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d02c      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a54      	ldr	r2, [pc, #336]	; (8004a68 <HAL_DMA_IRQHandler+0x1d0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d027      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a53      	ldr	r2, [pc, #332]	; (8004a6c <HAL_DMA_IRQHandler+0x1d4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a51      	ldr	r2, [pc, #324]	; (8004a70 <HAL_DMA_IRQHandler+0x1d8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01d      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a50      	ldr	r2, [pc, #320]	; (8004a74 <HAL_DMA_IRQHandler+0x1dc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a4e      	ldr	r2, [pc, #312]	; (8004a78 <HAL_DMA_IRQHandler+0x1e0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4d      	ldr	r2, [pc, #308]	; (8004a7c <HAL_DMA_IRQHandler+0x1e4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <HAL_DMA_IRQHandler+0x1e8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a4a      	ldr	r2, [pc, #296]	; (8004a84 <HAL_DMA_IRQHandler+0x1ec>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_DMA_IRQHandler+0xd2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a48      	ldr	r2, [pc, #288]	; (8004a88 <HAL_DMA_IRQHandler+0x1f0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_DMA_IRQHandler+0xd6>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_DMA_IRQHandler+0xd8>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 842b 	beq.w	80051cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2208      	movs	r2, #8
 8004980:	409a      	lsls	r2, r3
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80a2 	beq.w	8004ad0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2e      	ldr	r2, [pc, #184]	; (8004a4c <HAL_DMA_IRQHandler+0x1b4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04a      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2d      	ldr	r2, [pc, #180]	; (8004a50 <HAL_DMA_IRQHandler+0x1b8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d045      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <HAL_DMA_IRQHandler+0x1bc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d040      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2a      	ldr	r2, [pc, #168]	; (8004a58 <HAL_DMA_IRQHandler+0x1c0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d03b      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <HAL_DMA_IRQHandler+0x1c4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d036      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <HAL_DMA_IRQHandler+0x1c8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d031      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <HAL_DMA_IRQHandler+0x1cc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02c      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <HAL_DMA_IRQHandler+0x1d0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d027      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <HAL_DMA_IRQHandler+0x1d4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d022      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <HAL_DMA_IRQHandler+0x1d8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d01d      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <HAL_DMA_IRQHandler+0x1dc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d018      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_DMA_IRQHandler+0x1e0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <HAL_DMA_IRQHandler+0x1e4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00e      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_DMA_IRQHandler+0x1e8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d009      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_DMA_IRQHandler+0x1ec>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x194>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <HAL_DMA_IRQHandler+0x1f0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d12f      	bne.n	8004a8c <HAL_DMA_IRQHandler+0x1f4>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e02e      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x208>
 8004a42:	bf00      	nop
 8004a44:	24000000 	.word	0x24000000
 8004a48:	1b4e81b5 	.word	0x1b4e81b5
 8004a4c:	40020010 	.word	0x40020010
 8004a50:	40020028 	.word	0x40020028
 8004a54:	40020040 	.word	0x40020040
 8004a58:	40020058 	.word	0x40020058
 8004a5c:	40020070 	.word	0x40020070
 8004a60:	40020088 	.word	0x40020088
 8004a64:	400200a0 	.word	0x400200a0
 8004a68:	400200b8 	.word	0x400200b8
 8004a6c:	40020410 	.word	0x40020410
 8004a70:	40020428 	.word	0x40020428
 8004a74:	40020440 	.word	0x40020440
 8004a78:	40020458 	.word	0x40020458
 8004a7c:	40020470 	.word	0x40020470
 8004a80:	40020488 	.word	0x40020488
 8004a84:	400204a0 	.word	0x400204a0
 8004a88:	400204b8 	.word	0x400204b8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf14      	ite	ne
 8004a9a:	2301      	movne	r3, #1
 8004a9c:	2300      	moveq	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d015      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	2208      	movs	r2, #8
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	f043 0201 	orr.w	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d06e      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a69      	ldr	r2, [pc, #420]	; (8004c90 <HAL_DMA_IRQHandler+0x3f8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d04a      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a67      	ldr	r2, [pc, #412]	; (8004c94 <HAL_DMA_IRQHandler+0x3fc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d045      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a66      	ldr	r2, [pc, #408]	; (8004c98 <HAL_DMA_IRQHandler+0x400>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d040      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a64      	ldr	r2, [pc, #400]	; (8004c9c <HAL_DMA_IRQHandler+0x404>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d03b      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a63      	ldr	r2, [pc, #396]	; (8004ca0 <HAL_DMA_IRQHandler+0x408>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d036      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a61      	ldr	r2, [pc, #388]	; (8004ca4 <HAL_DMA_IRQHandler+0x40c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d031      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a60      	ldr	r2, [pc, #384]	; (8004ca8 <HAL_DMA_IRQHandler+0x410>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d02c      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a5e      	ldr	r2, [pc, #376]	; (8004cac <HAL_DMA_IRQHandler+0x414>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d027      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a5d      	ldr	r2, [pc, #372]	; (8004cb0 <HAL_DMA_IRQHandler+0x418>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d022      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a5b      	ldr	r2, [pc, #364]	; (8004cb4 <HAL_DMA_IRQHandler+0x41c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a5a      	ldr	r2, [pc, #360]	; (8004cb8 <HAL_DMA_IRQHandler+0x420>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d018      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a58      	ldr	r2, [pc, #352]	; (8004cbc <HAL_DMA_IRQHandler+0x424>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a57      	ldr	r2, [pc, #348]	; (8004cc0 <HAL_DMA_IRQHandler+0x428>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a55      	ldr	r2, [pc, #340]	; (8004cc4 <HAL_DMA_IRQHandler+0x42c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a54      	ldr	r2, [pc, #336]	; (8004cc8 <HAL_DMA_IRQHandler+0x430>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x2ee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a52      	ldr	r2, [pc, #328]	; (8004ccc <HAL_DMA_IRQHandler+0x434>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d10a      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x304>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e003      	b.n	8004ba4 <HAL_DMA_IRQHandler+0x30c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	f043 0202 	orr.w	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2204      	movs	r2, #4
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 808f 	beq.w	8004cf8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <HAL_DMA_IRQHandler+0x3f8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d04a      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <HAL_DMA_IRQHandler+0x3fc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d045      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <HAL_DMA_IRQHandler+0x400>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d040      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <HAL_DMA_IRQHandler+0x404>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d03b      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <HAL_DMA_IRQHandler+0x408>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d036      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <HAL_DMA_IRQHandler+0x40c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d031      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <HAL_DMA_IRQHandler+0x410>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d02c      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a21      	ldr	r2, [pc, #132]	; (8004cac <HAL_DMA_IRQHandler+0x414>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d027      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a20      	ldr	r2, [pc, #128]	; (8004cb0 <HAL_DMA_IRQHandler+0x418>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <HAL_DMA_IRQHandler+0x41c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <HAL_DMA_IRQHandler+0x420>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <HAL_DMA_IRQHandler+0x424>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <HAL_DMA_IRQHandler+0x428>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a18      	ldr	r2, [pc, #96]	; (8004cc4 <HAL_DMA_IRQHandler+0x42c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <HAL_DMA_IRQHandler+0x430>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x3e2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <HAL_DMA_IRQHandler+0x434>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d12a      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0x438>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	e023      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x440>
 8004c90:	40020010 	.word	0x40020010
 8004c94:	40020028 	.word	0x40020028
 8004c98:	40020040 	.word	0x40020040
 8004c9c:	40020058 	.word	0x40020058
 8004ca0:	40020070 	.word	0x40020070
 8004ca4:	40020088 	.word	0x40020088
 8004ca8:	400200a0 	.word	0x400200a0
 8004cac:	400200b8 	.word	0x400200b8
 8004cb0:	40020410 	.word	0x40020410
 8004cb4:	40020428 	.word	0x40020428
 8004cb8:	40020440 	.word	0x40020440
 8004cbc:	40020458 	.word	0x40020458
 8004cc0:	40020470 	.word	0x40020470
 8004cc4:	40020488 	.word	0x40020488
 8004cc8:	400204a0 	.word	0x400204a0
 8004ccc:	400204b8 	.word	0x400204b8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f043 0204 	orr.w	r2, r3, #4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2210      	movs	r2, #16
 8004d02:	409a      	lsls	r2, r3
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a6 	beq.w	8004e5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a85      	ldr	r2, [pc, #532]	; (8004f28 <HAL_DMA_IRQHandler+0x690>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d04a      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a83      	ldr	r2, [pc, #524]	; (8004f2c <HAL_DMA_IRQHandler+0x694>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d045      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a82      	ldr	r2, [pc, #520]	; (8004f30 <HAL_DMA_IRQHandler+0x698>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d040      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_DMA_IRQHandler+0x69c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d03b      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7f      	ldr	r2, [pc, #508]	; (8004f38 <HAL_DMA_IRQHandler+0x6a0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d036      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a7d      	ldr	r2, [pc, #500]	; (8004f3c <HAL_DMA_IRQHandler+0x6a4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d031      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7c      	ldr	r2, [pc, #496]	; (8004f40 <HAL_DMA_IRQHandler+0x6a8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d02c      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7a      	ldr	r2, [pc, #488]	; (8004f44 <HAL_DMA_IRQHandler+0x6ac>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d027      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a79      	ldr	r2, [pc, #484]	; (8004f48 <HAL_DMA_IRQHandler+0x6b0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d022      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a77      	ldr	r2, [pc, #476]	; (8004f4c <HAL_DMA_IRQHandler+0x6b4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01d      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a76      	ldr	r2, [pc, #472]	; (8004f50 <HAL_DMA_IRQHandler+0x6b8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d018      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a74      	ldr	r2, [pc, #464]	; (8004f54 <HAL_DMA_IRQHandler+0x6bc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	; (8004f58 <HAL_DMA_IRQHandler+0x6c0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a71      	ldr	r2, [pc, #452]	; (8004f5c <HAL_DMA_IRQHandler+0x6c4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a70      	ldr	r2, [pc, #448]	; (8004f60 <HAL_DMA_IRQHandler+0x6c8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_DMA_IRQHandler+0x516>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6e      	ldr	r2, [pc, #440]	; (8004f64 <HAL_DMA_IRQHandler+0x6cc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10a      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x52c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	e009      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x540>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d03e      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2210      	movs	r2, #16
 8004de6:	409a      	lsls	r2, r3
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d108      	bne.n	8004e1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d024      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
 8004e18:	e01f      	b.n	8004e5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01b      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
 8004e2a:	e016      	b.n	8004e5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d107      	bne.n	8004e4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0208 	bic.w	r2, r2, #8
 8004e48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2220      	movs	r2, #32
 8004e64:	409a      	lsls	r2, r3
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8110 	beq.w	8005090 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <HAL_DMA_IRQHandler+0x690>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d04a      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <HAL_DMA_IRQHandler+0x694>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d045      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <HAL_DMA_IRQHandler+0x698>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d040      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <HAL_DMA_IRQHandler+0x69c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d03b      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	; (8004f38 <HAL_DMA_IRQHandler+0x6a0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d036      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <HAL_DMA_IRQHandler+0x6a4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d031      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a23      	ldr	r2, [pc, #140]	; (8004f40 <HAL_DMA_IRQHandler+0x6a8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02c      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <HAL_DMA_IRQHandler+0x6ac>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d027      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	; (8004f48 <HAL_DMA_IRQHandler+0x6b0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d022      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <HAL_DMA_IRQHandler+0x6b4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d01d      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_DMA_IRQHandler+0x6b8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d018      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <HAL_DMA_IRQHandler+0x6bc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d013      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_DMA_IRQHandler+0x6c0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00e      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <HAL_DMA_IRQHandler+0x6c4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <HAL_DMA_IRQHandler+0x6c8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x678>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <HAL_DMA_IRQHandler+0x6cc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d12b      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x6d0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bf14      	ite	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	2300      	moveq	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e02a      	b.n	8004f7c <HAL_DMA_IRQHandler+0x6e4>
 8004f26:	bf00      	nop
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf14      	ite	ne
 8004f76:	2301      	movne	r3, #1
 8004f78:	2300      	moveq	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8087 	beq.w	8005090 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d139      	bne.n	8005012 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0216 	bic.w	r2, r2, #22
 8004fac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <HAL_DMA_IRQHandler+0x736>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0208 	bic.w	r2, r2, #8
 8004fdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	223f      	movs	r2, #63	; 0x3f
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 834a 	beq.w	800569c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
          }
          return;
 8005010:	e344      	b.n	800569c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d018      	beq.n	8005052 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	2b00      	cmp	r3, #0
 8005034:	d02c      	beq.n	8005090 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
 800503e:	e027      	b.n	8005090 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d023      	beq.n	8005090 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e01e      	b.n	8005090 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10f      	bne.n	8005080 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0210 	bic.w	r2, r2, #16
 800506e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8306 	beq.w	80056a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8088 	beq.w	80051b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2204      	movs	r2, #4
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a7a      	ldr	r2, [pc, #488]	; (80052a0 <HAL_DMA_IRQHandler+0xa08>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d04a      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a79      	ldr	r2, [pc, #484]	; (80052a4 <HAL_DMA_IRQHandler+0xa0c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d045      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a77      	ldr	r2, [pc, #476]	; (80052a8 <HAL_DMA_IRQHandler+0xa10>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d040      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a76      	ldr	r2, [pc, #472]	; (80052ac <HAL_DMA_IRQHandler+0xa14>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d03b      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a74      	ldr	r2, [pc, #464]	; (80052b0 <HAL_DMA_IRQHandler+0xa18>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d036      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a73      	ldr	r2, [pc, #460]	; (80052b4 <HAL_DMA_IRQHandler+0xa1c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d031      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a71      	ldr	r2, [pc, #452]	; (80052b8 <HAL_DMA_IRQHandler+0xa20>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02c      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a70      	ldr	r2, [pc, #448]	; (80052bc <HAL_DMA_IRQHandler+0xa24>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d027      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6e      	ldr	r2, [pc, #440]	; (80052c0 <HAL_DMA_IRQHandler+0xa28>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d022      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6d      	ldr	r2, [pc, #436]	; (80052c4 <HAL_DMA_IRQHandler+0xa2c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d01d      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a6b      	ldr	r2, [pc, #428]	; (80052c8 <HAL_DMA_IRQHandler+0xa30>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d018      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6a      	ldr	r2, [pc, #424]	; (80052cc <HAL_DMA_IRQHandler+0xa34>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a68      	ldr	r2, [pc, #416]	; (80052d0 <HAL_DMA_IRQHandler+0xa38>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00e      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a67      	ldr	r2, [pc, #412]	; (80052d4 <HAL_DMA_IRQHandler+0xa3c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d009      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a65      	ldr	r2, [pc, #404]	; (80052d8 <HAL_DMA_IRQHandler+0xa40>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_DMA_IRQHandler+0x8b8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a64      	ldr	r2, [pc, #400]	; (80052dc <HAL_DMA_IRQHandler+0xa44>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d108      	bne.n	8005162 <HAL_DMA_IRQHandler+0x8ca>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e007      	b.n	8005172 <HAL_DMA_IRQHandler+0x8da>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	429a      	cmp	r2, r3
 800517c:	d307      	bcc.n	800518e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f2      	bne.n	8005172 <HAL_DMA_IRQHandler+0x8da>
 800518c:	e000      	b.n	8005190 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800518e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2203      	movs	r2, #3
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80051a6:	e003      	b.n	80051b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8272 	beq.w	80056a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	e26c      	b.n	80056a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a43      	ldr	r2, [pc, #268]	; (80052e0 <HAL_DMA_IRQHandler+0xa48>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_DMA_IRQHandler+0x984>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a42      	ldr	r2, [pc, #264]	; (80052e4 <HAL_DMA_IRQHandler+0xa4c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <HAL_DMA_IRQHandler+0x984>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a40      	ldr	r2, [pc, #256]	; (80052e8 <HAL_DMA_IRQHandler+0xa50>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_DMA_IRQHandler+0x984>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <HAL_DMA_IRQHandler+0xa54>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_DMA_IRQHandler+0x984>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a3d      	ldr	r2, [pc, #244]	; (80052f0 <HAL_DMA_IRQHandler+0xa58>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_DMA_IRQHandler+0x984>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a3c      	ldr	r2, [pc, #240]	; (80052f4 <HAL_DMA_IRQHandler+0xa5c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_DMA_IRQHandler+0x984>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_DMA_IRQHandler+0xa60>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_DMA_IRQHandler+0x984>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a39      	ldr	r2, [pc, #228]	; (80052fc <HAL_DMA_IRQHandler+0xa64>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_DMA_IRQHandler+0x988>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_DMA_IRQHandler+0x98a>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 823f 	beq.w	80056a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2204      	movs	r2, #4
 800523a:	409a      	lsls	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80cd 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xb48>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80c7 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	2204      	movs	r2, #4
 800525c:	409a      	lsls	r2, r3
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d049      	beq.n	8005300 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8210 	beq.w	80056a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005288:	e20a      	b.n	80056a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8206 	beq.w	80056a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800529c:	e200      	b.n	80056a0 <HAL_DMA_IRQHandler+0xe08>
 800529e:	bf00      	nop
 80052a0:	40020010 	.word	0x40020010
 80052a4:	40020028 	.word	0x40020028
 80052a8:	40020040 	.word	0x40020040
 80052ac:	40020058 	.word	0x40020058
 80052b0:	40020070 	.word	0x40020070
 80052b4:	40020088 	.word	0x40020088
 80052b8:	400200a0 	.word	0x400200a0
 80052bc:	400200b8 	.word	0x400200b8
 80052c0:	40020410 	.word	0x40020410
 80052c4:	40020428 	.word	0x40020428
 80052c8:	40020440 	.word	0x40020440
 80052cc:	40020458 	.word	0x40020458
 80052d0:	40020470 	.word	0x40020470
 80052d4:	40020488 	.word	0x40020488
 80052d8:	400204a0 	.word	0x400204a0
 80052dc:	400204b8 	.word	0x400204b8
 80052e0:	58025408 	.word	0x58025408
 80052e4:	5802541c 	.word	0x5802541c
 80052e8:	58025430 	.word	0x58025430
 80052ec:	58025444 	.word	0x58025444
 80052f0:	58025458 	.word	0x58025458
 80052f4:	5802546c 	.word	0x5802546c
 80052f8:	58025480 	.word	0x58025480
 80052fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d160      	bne.n	80053cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a8c      	ldr	r2, [pc, #560]	; (8005540 <HAL_DMA_IRQHandler+0xca8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d04a      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a8a      	ldr	r2, [pc, #552]	; (8005544 <HAL_DMA_IRQHandler+0xcac>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d045      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a89      	ldr	r2, [pc, #548]	; (8005548 <HAL_DMA_IRQHandler+0xcb0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d040      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a87      	ldr	r2, [pc, #540]	; (800554c <HAL_DMA_IRQHandler+0xcb4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d03b      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a86      	ldr	r2, [pc, #536]	; (8005550 <HAL_DMA_IRQHandler+0xcb8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d036      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a84      	ldr	r2, [pc, #528]	; (8005554 <HAL_DMA_IRQHandler+0xcbc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d031      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a83      	ldr	r2, [pc, #524]	; (8005558 <HAL_DMA_IRQHandler+0xcc0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d02c      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a81      	ldr	r2, [pc, #516]	; (800555c <HAL_DMA_IRQHandler+0xcc4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d027      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a80      	ldr	r2, [pc, #512]	; (8005560 <HAL_DMA_IRQHandler+0xcc8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d022      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a7e      	ldr	r2, [pc, #504]	; (8005564 <HAL_DMA_IRQHandler+0xccc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01d      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a7d      	ldr	r2, [pc, #500]	; (8005568 <HAL_DMA_IRQHandler+0xcd0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a7b      	ldr	r2, [pc, #492]	; (800556c <HAL_DMA_IRQHandler+0xcd4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7a      	ldr	r2, [pc, #488]	; (8005570 <HAL_DMA_IRQHandler+0xcd8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a78      	ldr	r2, [pc, #480]	; (8005574 <HAL_DMA_IRQHandler+0xcdc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a77      	ldr	r2, [pc, #476]	; (8005578 <HAL_DMA_IRQHandler+0xce0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_DMA_IRQHandler+0xb12>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a75      	ldr	r2, [pc, #468]	; (800557c <HAL_DMA_IRQHandler+0xce4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <HAL_DMA_IRQHandler+0xb24>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0208 	bic.w	r2, r2, #8
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e007      	b.n	80053cc <HAL_DMA_IRQHandler+0xb34>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0204 	bic.w	r2, r2, #4
 80053ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8165 	beq.w	80056a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053de:	e15f      	b.n	80056a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2202      	movs	r2, #2
 80053ea:	409a      	lsls	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80c5 	beq.w	8005580 <HAL_DMA_IRQHandler+0xce8>
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80bf 	beq.w	8005580 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2202      	movs	r2, #2
 800540c:	409a      	lsls	r2, r3
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d018      	beq.n	800544e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 813a 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005438:	e134      	b.n	80056a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 8130 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800544c:	e12a      	b.n	80056a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d168      	bne.n	800552a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a38      	ldr	r2, [pc, #224]	; (8005540 <HAL_DMA_IRQHandler+0xca8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04a      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a37      	ldr	r2, [pc, #220]	; (8005544 <HAL_DMA_IRQHandler+0xcac>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d045      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a35      	ldr	r2, [pc, #212]	; (8005548 <HAL_DMA_IRQHandler+0xcb0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d040      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a34      	ldr	r2, [pc, #208]	; (800554c <HAL_DMA_IRQHandler+0xcb4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d03b      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a32      	ldr	r2, [pc, #200]	; (8005550 <HAL_DMA_IRQHandler+0xcb8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d036      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a31      	ldr	r2, [pc, #196]	; (8005554 <HAL_DMA_IRQHandler+0xcbc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d031      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <HAL_DMA_IRQHandler+0xcc0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02c      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2e      	ldr	r2, [pc, #184]	; (800555c <HAL_DMA_IRQHandler+0xcc4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d027      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2c      	ldr	r2, [pc, #176]	; (8005560 <HAL_DMA_IRQHandler+0xcc8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2b      	ldr	r2, [pc, #172]	; (8005564 <HAL_DMA_IRQHandler+0xccc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d01d      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a29      	ldr	r2, [pc, #164]	; (8005568 <HAL_DMA_IRQHandler+0xcd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a28      	ldr	r2, [pc, #160]	; (800556c <HAL_DMA_IRQHandler+0xcd4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <HAL_DMA_IRQHandler+0xcd8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a25      	ldr	r2, [pc, #148]	; (8005574 <HAL_DMA_IRQHandler+0xcdc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a23      	ldr	r2, [pc, #140]	; (8005578 <HAL_DMA_IRQHandler+0xce0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xc60>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a22      	ldr	r2, [pc, #136]	; (800557c <HAL_DMA_IRQHandler+0xce4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d108      	bne.n	800550a <HAL_DMA_IRQHandler+0xc72>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0214 	bic.w	r2, r2, #20
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	e007      	b.n	800551a <HAL_DMA_IRQHandler+0xc82>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 020a 	bic.w	r2, r2, #10
 8005518:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80b8 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800553c:	e0b2      	b.n	80056a4 <HAL_DMA_IRQHandler+0xe0c>
 800553e:	bf00      	nop
 8005540:	40020010 	.word	0x40020010
 8005544:	40020028 	.word	0x40020028
 8005548:	40020040 	.word	0x40020040
 800554c:	40020058 	.word	0x40020058
 8005550:	40020070 	.word	0x40020070
 8005554:	40020088 	.word	0x40020088
 8005558:	400200a0 	.word	0x400200a0
 800555c:	400200b8 	.word	0x400200b8
 8005560:	40020410 	.word	0x40020410
 8005564:	40020428 	.word	0x40020428
 8005568:	40020440 	.word	0x40020440
 800556c:	40020458 	.word	0x40020458
 8005570:	40020470 	.word	0x40020470
 8005574:	40020488 	.word	0x40020488
 8005578:	400204a0 	.word	0x400204a0
 800557c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2208      	movs	r2, #8
 800558a:	409a      	lsls	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8088 	beq.w	80056a6 <HAL_DMA_IRQHandler+0xe0e>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8082 	beq.w	80056a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a41      	ldr	r2, [pc, #260]	; (80056ac <HAL_DMA_IRQHandler+0xe14>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d04a      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a3f      	ldr	r2, [pc, #252]	; (80056b0 <HAL_DMA_IRQHandler+0xe18>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d045      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3e      	ldr	r2, [pc, #248]	; (80056b4 <HAL_DMA_IRQHandler+0xe1c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d040      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3c      	ldr	r2, [pc, #240]	; (80056b8 <HAL_DMA_IRQHandler+0xe20>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d03b      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3b      	ldr	r2, [pc, #236]	; (80056bc <HAL_DMA_IRQHandler+0xe24>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d036      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a39      	ldr	r2, [pc, #228]	; (80056c0 <HAL_DMA_IRQHandler+0xe28>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d031      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a38      	ldr	r2, [pc, #224]	; (80056c4 <HAL_DMA_IRQHandler+0xe2c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d02c      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a36      	ldr	r2, [pc, #216]	; (80056c8 <HAL_DMA_IRQHandler+0xe30>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d027      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a35      	ldr	r2, [pc, #212]	; (80056cc <HAL_DMA_IRQHandler+0xe34>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d022      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a33      	ldr	r2, [pc, #204]	; (80056d0 <HAL_DMA_IRQHandler+0xe38>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01d      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a32      	ldr	r2, [pc, #200]	; (80056d4 <HAL_DMA_IRQHandler+0xe3c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d018      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a30      	ldr	r2, [pc, #192]	; (80056d8 <HAL_DMA_IRQHandler+0xe40>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <HAL_DMA_IRQHandler+0xe44>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00e      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <HAL_DMA_IRQHandler+0xe48>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <HAL_DMA_IRQHandler+0xe4c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_DMA_IRQHandler+0xdaa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <HAL_DMA_IRQHandler+0xe50>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <HAL_DMA_IRQHandler+0xdbc>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 021c 	bic.w	r2, r2, #28
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e007      	b.n	8005664 <HAL_DMA_IRQHandler+0xdcc>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 020e 	bic.w	r2, r2, #14
 8005662:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2201      	movs	r2, #1
 800566e:	409a      	lsls	r2, r3
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	e004      	b.n	80056a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800569c:	bf00      	nop
 800569e:	e002      	b.n	80056a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a0:	bf00      	nop
 80056a2:	e000      	b.n	80056a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056a6:	3728      	adds	r7, #40	; 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40020010 	.word	0x40020010
 80056b0:	40020028 	.word	0x40020028
 80056b4:	40020040 	.word	0x40020040
 80056b8:	40020058 	.word	0x40020058
 80056bc:	40020070 	.word	0x40020070
 80056c0:	40020088 	.word	0x40020088
 80056c4:	400200a0 	.word	0x400200a0
 80056c8:	400200b8 	.word	0x400200b8
 80056cc:	40020410 	.word	0x40020410
 80056d0:	40020428 	.word	0x40020428
 80056d4:	40020440 	.word	0x40020440
 80056d8:	40020458 	.word	0x40020458
 80056dc:	40020470 	.word	0x40020470
 80056e0:	40020488 	.word	0x40020488
 80056e4:	400204a0 	.word	0x400204a0
 80056e8:	400204b8 	.word	0x400204b8

080056ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a84      	ldr	r2, [pc, #528]	; (800591c <DMA_SetConfig+0x230>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d072      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a82      	ldr	r2, [pc, #520]	; (8005920 <DMA_SetConfig+0x234>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d06d      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a81      	ldr	r2, [pc, #516]	; (8005924 <DMA_SetConfig+0x238>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d068      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a7f      	ldr	r2, [pc, #508]	; (8005928 <DMA_SetConfig+0x23c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d063      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a7e      	ldr	r2, [pc, #504]	; (800592c <DMA_SetConfig+0x240>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d05e      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a7c      	ldr	r2, [pc, #496]	; (8005930 <DMA_SetConfig+0x244>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d059      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a7b      	ldr	r2, [pc, #492]	; (8005934 <DMA_SetConfig+0x248>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d054      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a79      	ldr	r2, [pc, #484]	; (8005938 <DMA_SetConfig+0x24c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d04f      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a78      	ldr	r2, [pc, #480]	; (800593c <DMA_SetConfig+0x250>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d04a      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a76      	ldr	r2, [pc, #472]	; (8005940 <DMA_SetConfig+0x254>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d045      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a75      	ldr	r2, [pc, #468]	; (8005944 <DMA_SetConfig+0x258>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d040      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a73      	ldr	r2, [pc, #460]	; (8005948 <DMA_SetConfig+0x25c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d03b      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a72      	ldr	r2, [pc, #456]	; (800594c <DMA_SetConfig+0x260>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d036      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a70      	ldr	r2, [pc, #448]	; (8005950 <DMA_SetConfig+0x264>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d031      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6f      	ldr	r2, [pc, #444]	; (8005954 <DMA_SetConfig+0x268>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d02c      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6d      	ldr	r2, [pc, #436]	; (8005958 <DMA_SetConfig+0x26c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d027      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6c      	ldr	r2, [pc, #432]	; (800595c <DMA_SetConfig+0x270>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d022      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a6a      	ldr	r2, [pc, #424]	; (8005960 <DMA_SetConfig+0x274>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d01d      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a69      	ldr	r2, [pc, #420]	; (8005964 <DMA_SetConfig+0x278>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d018      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a67      	ldr	r2, [pc, #412]	; (8005968 <DMA_SetConfig+0x27c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a66      	ldr	r2, [pc, #408]	; (800596c <DMA_SetConfig+0x280>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00e      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a64      	ldr	r2, [pc, #400]	; (8005970 <DMA_SetConfig+0x284>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d009      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a63      	ldr	r2, [pc, #396]	; (8005974 <DMA_SetConfig+0x288>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <DMA_SetConfig+0x10a>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a61      	ldr	r2, [pc, #388]	; (8005978 <DMA_SetConfig+0x28c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <DMA_SetConfig+0x10e>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <DMA_SetConfig+0x110>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00d      	beq.n	800581c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005808:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800581a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a3e      	ldr	r2, [pc, #248]	; (800591c <DMA_SetConfig+0x230>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d04a      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a3d      	ldr	r2, [pc, #244]	; (8005920 <DMA_SetConfig+0x234>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d045      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a3b      	ldr	r2, [pc, #236]	; (8005924 <DMA_SetConfig+0x238>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d040      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a3a      	ldr	r2, [pc, #232]	; (8005928 <DMA_SetConfig+0x23c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d03b      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a38      	ldr	r2, [pc, #224]	; (800592c <DMA_SetConfig+0x240>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d036      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a37      	ldr	r2, [pc, #220]	; (8005930 <DMA_SetConfig+0x244>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d031      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a35      	ldr	r2, [pc, #212]	; (8005934 <DMA_SetConfig+0x248>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02c      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a34      	ldr	r2, [pc, #208]	; (8005938 <DMA_SetConfig+0x24c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d027      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a32      	ldr	r2, [pc, #200]	; (800593c <DMA_SetConfig+0x250>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d022      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a31      	ldr	r2, [pc, #196]	; (8005940 <DMA_SetConfig+0x254>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d01d      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <DMA_SetConfig+0x258>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <DMA_SetConfig+0x25c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <DMA_SetConfig+0x260>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <DMA_SetConfig+0x264>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a29      	ldr	r2, [pc, #164]	; (8005954 <DMA_SetConfig+0x268>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <DMA_SetConfig+0x1d0>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a28      	ldr	r2, [pc, #160]	; (8005958 <DMA_SetConfig+0x26c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <DMA_SetConfig+0x1d4>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <DMA_SetConfig+0x1d6>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d05a      	beq.n	800597c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	223f      	movs	r2, #63	; 0x3f
 80058d0:	409a      	lsls	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d108      	bne.n	8005908 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005906:	e087      	b.n	8005a18 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	60da      	str	r2, [r3, #12]
}
 8005918:	e07e      	b.n	8005a18 <DMA_SetConfig+0x32c>
 800591a:	bf00      	nop
 800591c:	40020010 	.word	0x40020010
 8005920:	40020028 	.word	0x40020028
 8005924:	40020040 	.word	0x40020040
 8005928:	40020058 	.word	0x40020058
 800592c:	40020070 	.word	0x40020070
 8005930:	40020088 	.word	0x40020088
 8005934:	400200a0 	.word	0x400200a0
 8005938:	400200b8 	.word	0x400200b8
 800593c:	40020410 	.word	0x40020410
 8005940:	40020428 	.word	0x40020428
 8005944:	40020440 	.word	0x40020440
 8005948:	40020458 	.word	0x40020458
 800594c:	40020470 	.word	0x40020470
 8005950:	40020488 	.word	0x40020488
 8005954:	400204a0 	.word	0x400204a0
 8005958:	400204b8 	.word	0x400204b8
 800595c:	58025408 	.word	0x58025408
 8005960:	5802541c 	.word	0x5802541c
 8005964:	58025430 	.word	0x58025430
 8005968:	58025444 	.word	0x58025444
 800596c:	58025458 	.word	0x58025458
 8005970:	5802546c 	.word	0x5802546c
 8005974:	58025480 	.word	0x58025480
 8005978:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a28      	ldr	r2, [pc, #160]	; (8005a24 <DMA_SetConfig+0x338>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d022      	beq.n	80059cc <DMA_SetConfig+0x2e0>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <DMA_SetConfig+0x33c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d01d      	beq.n	80059cc <DMA_SetConfig+0x2e0>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a25      	ldr	r2, [pc, #148]	; (8005a2c <DMA_SetConfig+0x340>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <DMA_SetConfig+0x2e0>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a24      	ldr	r2, [pc, #144]	; (8005a30 <DMA_SetConfig+0x344>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <DMA_SetConfig+0x2e0>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a22      	ldr	r2, [pc, #136]	; (8005a34 <DMA_SetConfig+0x348>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <DMA_SetConfig+0x2e0>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <DMA_SetConfig+0x34c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <DMA_SetConfig+0x2e0>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <DMA_SetConfig+0x350>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <DMA_SetConfig+0x2e0>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <DMA_SetConfig+0x354>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <DMA_SetConfig+0x2e4>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <DMA_SetConfig+0x2e6>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d020      	beq.n	8005a18 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2201      	movs	r2, #1
 80059e0:	409a      	lsls	r2, r3
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d108      	bne.n	8005a08 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	60da      	str	r2, [r3, #12]
}
 8005a06:	e007      	b.n	8005a18 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	58025408 	.word	0x58025408
 8005a28:	5802541c 	.word	0x5802541c
 8005a2c:	58025430 	.word	0x58025430
 8005a30:	58025444 	.word	0x58025444
 8005a34:	58025458 	.word	0x58025458
 8005a38:	5802546c 	.word	0x5802546c
 8005a3c:	58025480 	.word	0x58025480
 8005a40:	58025494 	.word	0x58025494

08005a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a42      	ldr	r2, [pc, #264]	; (8005b5c <DMA_CalcBaseAndBitshift+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d04a      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a41      	ldr	r2, [pc, #260]	; (8005b60 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d045      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a3f      	ldr	r2, [pc, #252]	; (8005b64 <DMA_CalcBaseAndBitshift+0x120>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d040      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a3e      	ldr	r2, [pc, #248]	; (8005b68 <DMA_CalcBaseAndBitshift+0x124>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d03b      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a3c      	ldr	r2, [pc, #240]	; (8005b6c <DMA_CalcBaseAndBitshift+0x128>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d036      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a3b      	ldr	r2, [pc, #236]	; (8005b70 <DMA_CalcBaseAndBitshift+0x12c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d031      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a39      	ldr	r2, [pc, #228]	; (8005b74 <DMA_CalcBaseAndBitshift+0x130>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d02c      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a38      	ldr	r2, [pc, #224]	; (8005b78 <DMA_CalcBaseAndBitshift+0x134>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d027      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a36      	ldr	r2, [pc, #216]	; (8005b7c <DMA_CalcBaseAndBitshift+0x138>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d022      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a35      	ldr	r2, [pc, #212]	; (8005b80 <DMA_CalcBaseAndBitshift+0x13c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01d      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a33      	ldr	r2, [pc, #204]	; (8005b84 <DMA_CalcBaseAndBitshift+0x140>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a32      	ldr	r2, [pc, #200]	; (8005b88 <DMA_CalcBaseAndBitshift+0x144>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a30      	ldr	r2, [pc, #192]	; (8005b8c <DMA_CalcBaseAndBitshift+0x148>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2f      	ldr	r2, [pc, #188]	; (8005b90 <DMA_CalcBaseAndBitshift+0x14c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <DMA_CalcBaseAndBitshift+0x150>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xa8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a2c      	ldr	r2, [pc, #176]	; (8005b98 <DMA_CalcBaseAndBitshift+0x154>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <DMA_CalcBaseAndBitshift+0xac>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <DMA_CalcBaseAndBitshift+0xae>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d024      	beq.n	8005b40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	3b10      	subs	r3, #16
 8005afe:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <DMA_CalcBaseAndBitshift+0x158>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005b10:	5cd3      	ldrb	r3, [r2, r3]
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d908      	bls.n	8005b30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <DMA_CalcBaseAndBitshift+0x160>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	1d1a      	adds	r2, r3, #4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	659a      	str	r2, [r3, #88]	; 0x58
 8005b2e:	e00d      	b.n	8005b4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <DMA_CalcBaseAndBitshift+0x160>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b3e:	e005      	b.n	8005b4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40020010 	.word	0x40020010
 8005b60:	40020028 	.word	0x40020028
 8005b64:	40020040 	.word	0x40020040
 8005b68:	40020058 	.word	0x40020058
 8005b6c:	40020070 	.word	0x40020070
 8005b70:	40020088 	.word	0x40020088
 8005b74:	400200a0 	.word	0x400200a0
 8005b78:	400200b8 	.word	0x400200b8
 8005b7c:	40020410 	.word	0x40020410
 8005b80:	40020428 	.word	0x40020428
 8005b84:	40020440 	.word	0x40020440
 8005b88:	40020458 	.word	0x40020458
 8005b8c:	40020470 	.word	0x40020470
 8005b90:	40020488 	.word	0x40020488
 8005b94:	400204a0 	.word	0x400204a0
 8005b98:	400204b8 	.word	0x400204b8
 8005b9c:	aaaaaaab 	.word	0xaaaaaaab
 8005ba0:	0800b678 	.word	0x0800b678
 8005ba4:	fffffc00 	.word	0xfffffc00

08005ba8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d120      	bne.n	8005bfe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d858      	bhi.n	8005c76 <DMA_CheckFifoParam+0xce>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <DMA_CheckFifoParam+0x24>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005bef 	.word	0x08005bef
 8005bd4:	08005bdd 	.word	0x08005bdd
 8005bd8:	08005c77 	.word	0x08005c77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d048      	beq.n	8005c7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bec:	e045      	b.n	8005c7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bf6:	d142      	bne.n	8005c7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bfc:	e03f      	b.n	8005c7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	d123      	bne.n	8005c50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d838      	bhi.n	8005c82 <DMA_CheckFifoParam+0xda>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <DMA_CheckFifoParam+0x70>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c2f 	.word	0x08005c2f
 8005c20:	08005c29 	.word	0x08005c29
 8005c24:	08005c41 	.word	0x08005c41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
        break;
 8005c2c:	e030      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d025      	beq.n	8005c86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c3e:	e022      	b.n	8005c86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c48:	d11f      	bne.n	8005c8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c4e:	e01c      	b.n	8005c8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d902      	bls.n	8005c5e <DMA_CheckFifoParam+0xb6>
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d003      	beq.n	8005c64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c5c:	e018      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
        break;
 8005c62:	e015      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
    break;
 8005c74:	e00b      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
        break;
 8005c76:	bf00      	nop
 8005c78:	e00a      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
        break;
 8005c7a:	bf00      	nop
 8005c7c:	e008      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
        break;
 8005c7e:	bf00      	nop
 8005c80:	e006      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
        break;
 8005c82:	bf00      	nop
 8005c84:	e004      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
        break;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
        break;
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
    break;
 8005c8e:	bf00      	nop
    }
  }

  return status;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop

08005ca0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a38      	ldr	r2, [pc, #224]	; (8005d94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d022      	beq.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a36      	ldr	r2, [pc, #216]	; (8005d98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a35      	ldr	r2, [pc, #212]	; (8005d9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d018      	beq.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a33      	ldr	r2, [pc, #204]	; (8005da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a32      	ldr	r2, [pc, #200]	; (8005da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a30      	ldr	r2, [pc, #192]	; (8005da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d101      	bne.n	8005d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005d02:	2300      	movs	r3, #0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01a      	beq.n	8005d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	3b08      	subs	r3, #8
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a24      	ldr	r2, [pc, #144]	; (8005dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005d2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2201      	movs	r2, #1
 8005d36:	409a      	lsls	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005d3c:	e024      	b.n	8005d88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	3b10      	subs	r3, #16
 8005d46:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005d48:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4c:	091b      	lsrs	r3, r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d806      	bhi.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d902      	bls.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3308      	adds	r3, #8
 8005d64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	461a      	mov	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a16      	ldr	r2, [pc, #88]	; (8005dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2201      	movs	r2, #1
 8005d82:	409a      	lsls	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	58025408 	.word	0x58025408
 8005d98:	5802541c 	.word	0x5802541c
 8005d9c:	58025430 	.word	0x58025430
 8005da0:	58025444 	.word	0x58025444
 8005da4:	58025458 	.word	0x58025458
 8005da8:	5802546c 	.word	0x5802546c
 8005dac:	58025480 	.word	0x58025480
 8005db0:	58025494 	.word	0x58025494
 8005db4:	cccccccd 	.word	0xcccccccd
 8005db8:	16009600 	.word	0x16009600
 8005dbc:	58025880 	.word	0x58025880
 8005dc0:	aaaaaaab 	.word	0xaaaaaaab
 8005dc4:	400204b8 	.word	0x400204b8
 8005dc8:	4002040f 	.word	0x4002040f
 8005dcc:	10008200 	.word	0x10008200
 8005dd0:	40020880 	.word	0x40020880

08005dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d04a      	beq.n	8005e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d847      	bhi.n	8005e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d022      	beq.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d01d      	beq.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d018      	beq.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00e      	beq.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d101      	bne.n	8005e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005e44:	2300      	movs	r3, #0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4b17      	ldr	r3, [pc, #92]	; (8005eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e5c:	671a      	str	r2, [r3, #112]	; 0x70
 8005e5e:	e009      	b.n	8005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	461a      	mov	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a11      	ldr	r2, [pc, #68]	; (8005eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	2201      	movs	r2, #1
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	58025408 	.word	0x58025408
 8005e90:	5802541c 	.word	0x5802541c
 8005e94:	58025430 	.word	0x58025430
 8005e98:	58025444 	.word	0x58025444
 8005e9c:	58025458 	.word	0x58025458
 8005ea0:	5802546c 	.word	0x5802546c
 8005ea4:	58025480 	.word	0x58025480
 8005ea8:	58025494 	.word	0x58025494
 8005eac:	1600963f 	.word	0x1600963f
 8005eb0:	58025940 	.word	0x58025940
 8005eb4:	1000823f 	.word	0x1000823f
 8005eb8:	40020940 	.word	0x40020940

08005ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b089      	sub	sp, #36	; 0x24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005eca:	4b89      	ldr	r3, [pc, #548]	; (80060f0 <HAL_GPIO_Init+0x234>)
 8005ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ece:	e194      	b.n	80061fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	4013      	ands	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8186 	beq.w	80061f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d005      	beq.n	8005f00 <HAL_GPIO_Init+0x44>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d130      	bne.n	8005f62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4013      	ands	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f36:	2201      	movs	r2, #1
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 0201 	and.w	r2, r3, #1
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d017      	beq.n	8005f9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	2203      	movs	r2, #3
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4013      	ands	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d123      	bne.n	8005ff2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	08da      	lsrs	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	08da      	lsrs	r2, r3, #3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3208      	adds	r2, #8
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0203 	and.w	r2, r3, #3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4313      	orrs	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80e0 	beq.w	80061f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006034:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_GPIO_Init+0x238>)
 8006036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_GPIO_Init+0x238>)
 800603c:	f043 0302 	orr.w	r3, r3, #2
 8006040:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_GPIO_Init+0x238>)
 8006046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006052:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <HAL_GPIO_Init+0x23c>)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	3302      	adds	r3, #2
 800605a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	220f      	movs	r2, #15
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a20      	ldr	r2, [pc, #128]	; (80060fc <HAL_GPIO_Init+0x240>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d052      	beq.n	8006124 <HAL_GPIO_Init+0x268>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <HAL_GPIO_Init+0x244>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <HAL_GPIO_Init+0x22e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <HAL_GPIO_Init+0x248>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d02b      	beq.n	80060e6 <HAL_GPIO_Init+0x22a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_GPIO_Init+0x24c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d025      	beq.n	80060e2 <HAL_GPIO_Init+0x226>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1c      	ldr	r2, [pc, #112]	; (800610c <HAL_GPIO_Init+0x250>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01f      	beq.n	80060de <HAL_GPIO_Init+0x222>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <HAL_GPIO_Init+0x254>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d019      	beq.n	80060da <HAL_GPIO_Init+0x21e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <HAL_GPIO_Init+0x258>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <HAL_GPIO_Init+0x21a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <HAL_GPIO_Init+0x25c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00d      	beq.n	80060d2 <HAL_GPIO_Init+0x216>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_GPIO_Init+0x260>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d007      	beq.n	80060ce <HAL_GPIO_Init+0x212>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	; (8006120 <HAL_GPIO_Init+0x264>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_GPIO_Init+0x20e>
 80060c6:	2309      	movs	r3, #9
 80060c8:	e02d      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ca:	230a      	movs	r3, #10
 80060cc:	e02b      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ce:	2308      	movs	r3, #8
 80060d0:	e029      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060d2:	2307      	movs	r3, #7
 80060d4:	e027      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060d6:	2306      	movs	r3, #6
 80060d8:	e025      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060da:	2305      	movs	r3, #5
 80060dc:	e023      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060de:	2304      	movs	r3, #4
 80060e0:	e021      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060e2:	2303      	movs	r3, #3
 80060e4:	e01f      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e01d      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e01b      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ee:	bf00      	nop
 80060f0:	58000080 	.word	0x58000080
 80060f4:	58024400 	.word	0x58024400
 80060f8:	58000400 	.word	0x58000400
 80060fc:	58020000 	.word	0x58020000
 8006100:	58020400 	.word	0x58020400
 8006104:	58020800 	.word	0x58020800
 8006108:	58020c00 	.word	0x58020c00
 800610c:	58021000 	.word	0x58021000
 8006110:	58021400 	.word	0x58021400
 8006114:	58021800 	.word	0x58021800
 8006118:	58021c00 	.word	0x58021c00
 800611c:	58022000 	.word	0x58022000
 8006120:	58022400 	.word	0x58022400
 8006124:	2300      	movs	r3, #0
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	f002 0203 	and.w	r2, r2, #3
 800612c:	0092      	lsls	r2, r2, #2
 800612e:	4093      	lsls	r3, r2
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4313      	orrs	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006136:	4938      	ldr	r1, [pc, #224]	; (8006218 <HAL_GPIO_Init+0x35c>)
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	3302      	adds	r3, #2
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	43db      	mvns	r3, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4013      	ands	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800616a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	43db      	mvns	r3, r3
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	4013      	ands	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	43db      	mvns	r3, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	43db      	mvns	r3, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4013      	ands	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	3301      	adds	r3, #1
 80061f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	f47f ae63 	bne.w	8005ed0 <HAL_GPIO_Init+0x14>
  }
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	3724      	adds	r7, #36	; 0x24
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	58000400 	.word	0x58000400

0800621c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006224:	4b19      	ldr	r3, [pc, #100]	; (800628c <HAL_PWREx_ConfigSupply+0x70>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b04      	cmp	r3, #4
 800622e:	d00a      	beq.n	8006246 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006230:	4b16      	ldr	r3, [pc, #88]	; (800628c <HAL_PWREx_ConfigSupply+0x70>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d001      	beq.n	8006242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e01f      	b.n	8006282 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e01d      	b.n	8006282 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006246:	4b11      	ldr	r3, [pc, #68]	; (800628c <HAL_PWREx_ConfigSupply+0x70>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f023 0207 	bic.w	r2, r3, #7
 800624e:	490f      	ldr	r1, [pc, #60]	; (800628c <HAL_PWREx_ConfigSupply+0x70>)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4313      	orrs	r3, r2
 8006254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006256:	f7fb f947 	bl	80014e8 <HAL_GetTick>
 800625a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800625c:	e009      	b.n	8006272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800625e:	f7fb f943 	bl	80014e8 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626c:	d901      	bls.n	8006272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e007      	b.n	8006282 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_PWREx_ConfigSupply+0x70>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627e:	d1ee      	bne.n	800625e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	58024800 	.word	0x58024800

08006290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08c      	sub	sp, #48	; 0x30
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f000 bc1c 	b.w	8006adc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8087 	beq.w	80063c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b2:	4b9e      	ldr	r3, [pc, #632]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062bc:	4b9b      	ldr	r3, [pc, #620]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d007      	beq.n	80062d8 <HAL_RCC_OscConfig+0x48>
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b18      	cmp	r3, #24
 80062cc:	d110      	bne.n	80062f0 <HAL_RCC_OscConfig+0x60>
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d10b      	bne.n	80062f0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d8:	4b94      	ldr	r3, [pc, #592]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d06c      	beq.n	80063be <HAL_RCC_OscConfig+0x12e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d168      	bne.n	80063be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e3f5      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d106      	bne.n	8006308 <HAL_RCC_OscConfig+0x78>
 80062fa:	4b8c      	ldr	r3, [pc, #560]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a8b      	ldr	r2, [pc, #556]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e02e      	b.n	8006366 <HAL_RCC_OscConfig+0xd6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10c      	bne.n	800632a <HAL_RCC_OscConfig+0x9a>
 8006310:	4b86      	ldr	r3, [pc, #536]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a85      	ldr	r2, [pc, #532]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4b83      	ldr	r3, [pc, #524]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a82      	ldr	r2, [pc, #520]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e01d      	b.n	8006366 <HAL_RCC_OscConfig+0xd6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006332:	d10c      	bne.n	800634e <HAL_RCC_OscConfig+0xbe>
 8006334:	4b7d      	ldr	r3, [pc, #500]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a7c      	ldr	r2, [pc, #496]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800633a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4b7a      	ldr	r3, [pc, #488]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a79      	ldr	r2, [pc, #484]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e00b      	b.n	8006366 <HAL_RCC_OscConfig+0xd6>
 800634e:	4b77      	ldr	r3, [pc, #476]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a76      	ldr	r2, [pc, #472]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4b74      	ldr	r3, [pc, #464]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a73      	ldr	r2, [pc, #460]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006364:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d013      	beq.n	8006396 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7fb f8bb 	bl	80014e8 <HAL_GetTick>
 8006372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006376:	f7fb f8b7 	bl	80014e8 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b64      	cmp	r3, #100	; 0x64
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e3a9      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006388:	4b68      	ldr	r3, [pc, #416]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f0      	beq.n	8006376 <HAL_RCC_OscConfig+0xe6>
 8006394:	e014      	b.n	80063c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006396:	f7fb f8a7 	bl	80014e8 <HAL_GetTick>
 800639a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800639e:	f7fb f8a3 	bl	80014e8 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b64      	cmp	r3, #100	; 0x64
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e395      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063b0:	4b5e      	ldr	r3, [pc, #376]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f0      	bne.n	800639e <HAL_RCC_OscConfig+0x10e>
 80063bc:	e000      	b.n	80063c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80ca 	beq.w	8006562 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ce:	4b57      	ldr	r3, [pc, #348]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063d8:	4b54      	ldr	r3, [pc, #336]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_RCC_OscConfig+0x164>
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b18      	cmp	r3, #24
 80063e8:	d156      	bne.n	8006498 <HAL_RCC_OscConfig+0x208>
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d151      	bne.n	8006498 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f4:	4b4d      	ldr	r3, [pc, #308]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_OscConfig+0x17c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e367      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800640c:	4b47      	ldr	r3, [pc, #284]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f023 0219 	bic.w	r2, r3, #25
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4944      	ldr	r1, [pc, #272]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800641e:	f7fb f863 	bl	80014e8 <HAL_GetTick>
 8006422:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006426:	f7fb f85f 	bl	80014e8 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e351      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006438:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006444:	f7fb f880 	bl	8001548 <HAL_GetREVID>
 8006448:	4603      	mov	r3, r0
 800644a:	f241 0203 	movw	r2, #4099	; 0x1003
 800644e:	4293      	cmp	r3, r2
 8006450:	d817      	bhi.n	8006482 <HAL_RCC_OscConfig+0x1f2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d108      	bne.n	800646c <HAL_RCC_OscConfig+0x1dc>
 800645a:	4b34      	ldr	r3, [pc, #208]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006462:	4a32      	ldr	r2, [pc, #200]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006468:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800646a:	e07a      	b.n	8006562 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800646c:	4b2f      	ldr	r3, [pc, #188]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	031b      	lsls	r3, r3, #12
 800647a:	492c      	ldr	r1, [pc, #176]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 800647c:	4313      	orrs	r3, r2
 800647e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006480:	e06f      	b.n	8006562 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	4b2a      	ldr	r3, [pc, #168]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	061b      	lsls	r3, r3, #24
 8006490:	4926      	ldr	r1, [pc, #152]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006492:	4313      	orrs	r3, r2
 8006494:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006496:	e064      	b.n	8006562 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d047      	beq.n	8006530 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064a0:	4b22      	ldr	r3, [pc, #136]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 0219 	bic.w	r2, r3, #25
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	491f      	ldr	r1, [pc, #124]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fb f819 	bl	80014e8 <HAL_GetTick>
 80064b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ba:	f7fb f815 	bl	80014e8 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e307      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d8:	f7fb f836 	bl	8001548 <HAL_GetREVID>
 80064dc:	4603      	mov	r3, r0
 80064de:	f241 0203 	movw	r2, #4099	; 0x1003
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d817      	bhi.n	8006516 <HAL_RCC_OscConfig+0x286>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d108      	bne.n	8006500 <HAL_RCC_OscConfig+0x270>
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064f6:	4a0d      	ldr	r2, [pc, #52]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fc:	6053      	str	r3, [r2, #4]
 80064fe:	e030      	b.n	8006562 <HAL_RCC_OscConfig+0x2d2>
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	031b      	lsls	r3, r3, #12
 800650e:	4907      	ldr	r1, [pc, #28]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
 8006514:	e025      	b.n	8006562 <HAL_RCC_OscConfig+0x2d2>
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	061b      	lsls	r3, r3, #24
 8006524:	4901      	ldr	r1, [pc, #4]	; (800652c <HAL_RCC_OscConfig+0x29c>)
 8006526:	4313      	orrs	r3, r2
 8006528:	604b      	str	r3, [r1, #4]
 800652a:	e01a      	b.n	8006562 <HAL_RCC_OscConfig+0x2d2>
 800652c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006530:	4b9e      	ldr	r3, [pc, #632]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a9d      	ldr	r2, [pc, #628]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fa ffd4 	bl	80014e8 <HAL_GetTick>
 8006540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006544:	f7fa ffd0 	bl	80014e8 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e2c2      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006556:	4b95      	ldr	r3, [pc, #596]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80a9 	beq.w	80066c2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006570:	4b8e      	ldr	r3, [pc, #568]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006578:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800657a:	4b8c      	ldr	r3, [pc, #560]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b08      	cmp	r3, #8
 8006584:	d007      	beq.n	8006596 <HAL_RCC_OscConfig+0x306>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b18      	cmp	r3, #24
 800658a:	d13a      	bne.n	8006602 <HAL_RCC_OscConfig+0x372>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d135      	bne.n	8006602 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006596:	4b85      	ldr	r3, [pc, #532]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <HAL_RCC_OscConfig+0x31e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d001      	beq.n	80065ae <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e296      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ae:	f7fa ffcb 	bl	8001548 <HAL_GetREVID>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d817      	bhi.n	80065ec <HAL_RCC_OscConfig+0x35c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d108      	bne.n	80065d6 <HAL_RCC_OscConfig+0x346>
 80065c4:	4b79      	ldr	r3, [pc, #484]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065cc:	4a77      	ldr	r2, [pc, #476]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80065ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065d4:	e075      	b.n	80066c2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065d6:	4b75      	ldr	r3, [pc, #468]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	069b      	lsls	r3, r3, #26
 80065e4:	4971      	ldr	r1, [pc, #452]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065ea:	e06a      	b.n	80066c2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ec:	4b6f      	ldr	r3, [pc, #444]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	061b      	lsls	r3, r3, #24
 80065fa:	496c      	ldr	r1, [pc, #432]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006600:	e05f      	b.n	80066c2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d042      	beq.n	8006690 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800660a:	4b68      	ldr	r3, [pc, #416]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a67      	ldr	r2, [pc, #412]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006616:	f7fa ff67 	bl	80014e8 <HAL_GetTick>
 800661a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800661e:	f7fa ff63 	bl	80014e8 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e255      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006630:	4b5e      	ldr	r3, [pc, #376]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800663c:	f7fa ff84 	bl	8001548 <HAL_GetREVID>
 8006640:	4603      	mov	r3, r0
 8006642:	f241 0203 	movw	r2, #4099	; 0x1003
 8006646:	4293      	cmp	r3, r2
 8006648:	d817      	bhi.n	800667a <HAL_RCC_OscConfig+0x3ea>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	2b20      	cmp	r3, #32
 8006650:	d108      	bne.n	8006664 <HAL_RCC_OscConfig+0x3d4>
 8006652:	4b56      	ldr	r3, [pc, #344]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800665a:	4a54      	ldr	r2, [pc, #336]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 800665c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006660:	6053      	str	r3, [r2, #4]
 8006662:	e02e      	b.n	80066c2 <HAL_RCC_OscConfig+0x432>
 8006664:	4b51      	ldr	r3, [pc, #324]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	069b      	lsls	r3, r3, #26
 8006672:	494e      	ldr	r1, [pc, #312]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006674:	4313      	orrs	r3, r2
 8006676:	604b      	str	r3, [r1, #4]
 8006678:	e023      	b.n	80066c2 <HAL_RCC_OscConfig+0x432>
 800667a:	4b4c      	ldr	r3, [pc, #304]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	061b      	lsls	r3, r3, #24
 8006688:	4948      	ldr	r1, [pc, #288]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 800668a:	4313      	orrs	r3, r2
 800668c:	60cb      	str	r3, [r1, #12]
 800668e:	e018      	b.n	80066c2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006690:	4b46      	ldr	r3, [pc, #280]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a45      	ldr	r2, [pc, #276]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669c:	f7fa ff24 	bl	80014e8 <HAL_GetTick>
 80066a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066a4:	f7fa ff20 	bl	80014e8 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e212      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066b6:	4b3d      	ldr	r3, [pc, #244]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f0      	bne.n	80066a4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d036      	beq.n	800673c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d019      	beq.n	800670a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066d6:	4b35      	ldr	r3, [pc, #212]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80066d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066da:	4a34      	ldr	r2, [pc, #208]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e2:	f7fa ff01 	bl	80014e8 <HAL_GetTick>
 80066e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ea:	f7fa fefd 	bl	80014e8 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e1ef      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066fc:	4b2b      	ldr	r3, [pc, #172]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 80066fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x45a>
 8006708:	e018      	b.n	800673c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800670a:	4b28      	ldr	r3, [pc, #160]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 800670c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670e:	4a27      	ldr	r2, [pc, #156]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006716:	f7fa fee7 	bl	80014e8 <HAL_GetTick>
 800671a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800671e:	f7fa fee3 	bl	80014e8 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e1d5      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006730:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f0      	bne.n	800671e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d039      	beq.n	80067bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d019      	beq.n	8006784 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006750:	4b16      	ldr	r3, [pc, #88]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a15      	ldr	r2, [pc, #84]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800675a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800675c:	f7fa fec4 	bl	80014e8 <HAL_GetTick>
 8006760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006764:	f7fa fec0 	bl	80014e8 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e1b2      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f0      	beq.n	8006764 <HAL_RCC_OscConfig+0x4d4>
 8006782:	e01b      	b.n	80067bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a08      	ldr	r2, [pc, #32]	; (80067ac <HAL_RCC_OscConfig+0x51c>)
 800678a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800678e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006790:	f7fa feaa 	bl	80014e8 <HAL_GetTick>
 8006794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006796:	e00b      	b.n	80067b0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006798:	f7fa fea6 	bl	80014e8 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d904      	bls.n	80067b0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e198      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
 80067aa:	bf00      	nop
 80067ac:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067b0:	4ba3      	ldr	r3, [pc, #652]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1ed      	bne.n	8006798 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8081 	beq.w	80068cc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067ca:	4b9e      	ldr	r3, [pc, #632]	; (8006a44 <HAL_RCC_OscConfig+0x7b4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a9d      	ldr	r2, [pc, #628]	; (8006a44 <HAL_RCC_OscConfig+0x7b4>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d6:	f7fa fe87 	bl	80014e8 <HAL_GetTick>
 80067da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067de:	f7fa fe83 	bl	80014e8 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b64      	cmp	r3, #100	; 0x64
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e175      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f0:	4b94      	ldr	r3, [pc, #592]	; (8006a44 <HAL_RCC_OscConfig+0x7b4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d106      	bne.n	8006812 <HAL_RCC_OscConfig+0x582>
 8006804:	4b8e      	ldr	r3, [pc, #568]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	4a8d      	ldr	r2, [pc, #564]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6713      	str	r3, [r2, #112]	; 0x70
 8006810:	e02d      	b.n	800686e <HAL_RCC_OscConfig+0x5de>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10c      	bne.n	8006834 <HAL_RCC_OscConfig+0x5a4>
 800681a:	4b89      	ldr	r3, [pc, #548]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	4a88      	ldr	r2, [pc, #544]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006820:	f023 0301 	bic.w	r3, r3, #1
 8006824:	6713      	str	r3, [r2, #112]	; 0x70
 8006826:	4b86      	ldr	r3, [pc, #536]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	4a85      	ldr	r2, [pc, #532]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800682c:	f023 0304 	bic.w	r3, r3, #4
 8006830:	6713      	str	r3, [r2, #112]	; 0x70
 8006832:	e01c      	b.n	800686e <HAL_RCC_OscConfig+0x5de>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b05      	cmp	r3, #5
 800683a:	d10c      	bne.n	8006856 <HAL_RCC_OscConfig+0x5c6>
 800683c:	4b80      	ldr	r3, [pc, #512]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	4a7f      	ldr	r2, [pc, #508]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006842:	f043 0304 	orr.w	r3, r3, #4
 8006846:	6713      	str	r3, [r2, #112]	; 0x70
 8006848:	4b7d      	ldr	r3, [pc, #500]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	4a7c      	ldr	r2, [pc, #496]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	6713      	str	r3, [r2, #112]	; 0x70
 8006854:	e00b      	b.n	800686e <HAL_RCC_OscConfig+0x5de>
 8006856:	4b7a      	ldr	r3, [pc, #488]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	4a79      	ldr	r2, [pc, #484]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	6713      	str	r3, [r2, #112]	; 0x70
 8006862:	4b77      	ldr	r3, [pc, #476]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	4a76      	ldr	r2, [pc, #472]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006868:	f023 0304 	bic.w	r3, r3, #4
 800686c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d015      	beq.n	80068a2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006876:	f7fa fe37 	bl	80014e8 <HAL_GetTick>
 800687a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800687c:	e00a      	b.n	8006894 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800687e:	f7fa fe33 	bl	80014e8 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f241 3288 	movw	r2, #5000	; 0x1388
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e123      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006894:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0ee      	beq.n	800687e <HAL_RCC_OscConfig+0x5ee>
 80068a0:	e014      	b.n	80068cc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a2:	f7fa fe21 	bl	80014e8 <HAL_GetTick>
 80068a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068a8:	e00a      	b.n	80068c0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068aa:	f7fa fe1d 	bl	80014e8 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e10d      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068c0:	4b5f      	ldr	r3, [pc, #380]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1ee      	bne.n	80068aa <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8102 	beq.w	8006ada <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068d6:	4b5a      	ldr	r3, [pc, #360]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068de:	2b18      	cmp	r3, #24
 80068e0:	f000 80bd 	beq.w	8006a5e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	f040 8095 	bne.w	8006a18 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ee:	4b54      	ldr	r3, [pc, #336]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a53      	ldr	r2, [pc, #332]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80068f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fa:	f7fa fdf5 	bl	80014e8 <HAL_GetTick>
 80068fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006902:	f7fa fdf1 	bl	80014e8 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0e3      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006914:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1f0      	bne.n	8006902 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006920:	4b47      	ldr	r3, [pc, #284]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006924:	4b48      	ldr	r3, [pc, #288]	; (8006a48 <HAL_RCC_OscConfig+0x7b8>)
 8006926:	4013      	ands	r3, r2
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006930:	0112      	lsls	r2, r2, #4
 8006932:	430a      	orrs	r2, r1
 8006934:	4942      	ldr	r1, [pc, #264]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006936:	4313      	orrs	r3, r2
 8006938:	628b      	str	r3, [r1, #40]	; 0x28
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	3b01      	subs	r3, #1
 8006940:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006948:	3b01      	subs	r3, #1
 800694a:	025b      	lsls	r3, r3, #9
 800694c:	b29b      	uxth	r3, r3
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	3b01      	subs	r3, #1
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	3b01      	subs	r3, #1
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800696a:	4935      	ldr	r1, [pc, #212]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006970:	4b33      	ldr	r3, [pc, #204]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	4a32      	ldr	r2, [pc, #200]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800697c:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800697e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006980:	4b32      	ldr	r3, [pc, #200]	; (8006a4c <HAL_RCC_OscConfig+0x7bc>)
 8006982:	4013      	ands	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006988:	00d2      	lsls	r2, r2, #3
 800698a:	492d      	ldr	r1, [pc, #180]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800698c:	4313      	orrs	r3, r2
 800698e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006990:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	f023 020c 	bic.w	r2, r3, #12
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	4928      	ldr	r1, [pc, #160]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069a2:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	f023 0202 	bic.w	r2, r3, #2
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	4924      	ldr	r1, [pc, #144]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069b4:	4b22      	ldr	r3, [pc, #136]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c0:	4b1f      	ldr	r3, [pc, #124]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069cc:	4b1c      	ldr	r3, [pc, #112]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e4:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 80069ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f0:	f7fa fd7a 	bl	80014e8 <HAL_GetTick>
 80069f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fa fd76 	bl	80014e8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e068      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0x768>
 8006a16:	e060      	b.n	8006ada <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fa fd60 	bl	80014e8 <HAL_GetTick>
 8006a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a2a:	e011      	b.n	8006a50 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a2c:	f7fa fd5c 	bl	80014e8 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d90a      	bls.n	8006a50 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e04e      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400
 8006a44:	58024800 	.word	0x58024800
 8006a48:	fffffc0c 	.word	0xfffffc0c
 8006a4c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a50:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <HAL_RCC_OscConfig+0x854>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e7      	bne.n	8006a2c <HAL_RCC_OscConfig+0x79c>
 8006a5c:	e03d      	b.n	8006ada <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a5e:	4b21      	ldr	r3, [pc, #132]	; (8006ae4 <HAL_RCC_OscConfig+0x854>)
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a64:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <HAL_RCC_OscConfig+0x854>)
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d031      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f003 0203 	and.w	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d12a      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d122      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d11a      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	0a5b      	lsrs	r3, r3, #9
 8006aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aac:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d111      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d108      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	0e1b      	lsrs	r3, r3, #24
 8006ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d001      	beq.n	8006ada <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3730      	adds	r7, #48	; 0x30
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	58024400 	.word	0x58024400

08006ae8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e19c      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006afc:	4b8a      	ldr	r3, [pc, #552]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d910      	bls.n	8006b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b87      	ldr	r3, [pc, #540]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 020f 	bic.w	r2, r3, #15
 8006b12:	4985      	ldr	r1, [pc, #532]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b83      	ldr	r3, [pc, #524]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e184      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d010      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	4b7b      	ldr	r3, [pc, #492]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d908      	bls.n	8006b5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b48:	4b78      	ldr	r3, [pc, #480]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	4975      	ldr	r1, [pc, #468]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d010      	beq.n	8006b88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	4b70      	ldr	r3, [pc, #448]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d908      	bls.n	8006b88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b76:	4b6d      	ldr	r3, [pc, #436]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	496a      	ldr	r1, [pc, #424]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d010      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	4b64      	ldr	r3, [pc, #400]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d908      	bls.n	8006bb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ba4:	4b61      	ldr	r3, [pc, #388]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	495e      	ldr	r1, [pc, #376]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	4b59      	ldr	r3, [pc, #356]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d908      	bls.n	8006be4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bd2:	4b56      	ldr	r3, [pc, #344]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	4953      	ldr	r1, [pc, #332]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d010      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	4b4d      	ldr	r3, [pc, #308]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d908      	bls.n	8006c12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c00:	4b4a      	ldr	r3, [pc, #296]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f023 020f 	bic.w	r2, r3, #15
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4947      	ldr	r1, [pc, #284]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d055      	beq.n	8006cca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c1e:	4b43      	ldr	r3, [pc, #268]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	4940      	ldr	r1, [pc, #256]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d107      	bne.n	8006c48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c38:	4b3c      	ldr	r3, [pc, #240]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d121      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e0f6      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c50:	4b36      	ldr	r3, [pc, #216]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d115      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0ea      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d107      	bne.n	8006c78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c68:	4b30      	ldr	r3, [pc, #192]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0de      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c78:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0d6      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c88:	4b28      	ldr	r3, [pc, #160]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f023 0207 	bic.w	r2, r3, #7
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	4925      	ldr	r1, [pc, #148]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9a:	f7fa fc25 	bl	80014e8 <HAL_GetTick>
 8006c9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca0:	e00a      	b.n	8006cb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca2:	f7fa fc21 	bl	80014e8 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e0be      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb8:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d1eb      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d010      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d208      	bcs.n	8006cf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f023 020f 	bic.w	r2, r3, #15
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	490e      	ldr	r1, [pc, #56]	; (8006d2c <HAL_RCC_ClockConfig+0x244>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d214      	bcs.n	8006d30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d06:	4b08      	ldr	r3, [pc, #32]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f023 020f 	bic.w	r2, r3, #15
 8006d0e:	4906      	ldr	r1, [pc, #24]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d16:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <HAL_RCC_ClockConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e086      	b.n	8006e36 <HAL_RCC_ClockConfig+0x34e>
 8006d28:	52002000 	.word	0x52002000
 8006d2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d010      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d208      	bcs.n	8006d5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d4c:	4b3c      	ldr	r3, [pc, #240]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	4939      	ldr	r1, [pc, #228]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d010      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	4b34      	ldr	r3, [pc, #208]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d208      	bcs.n	8006d8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d7a:	4b31      	ldr	r3, [pc, #196]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	492e      	ldr	r1, [pc, #184]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d010      	beq.n	8006dba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d208      	bcs.n	8006dba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006da8:	4b25      	ldr	r3, [pc, #148]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	4922      	ldr	r1, [pc, #136]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d010      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d208      	bcs.n	8006de8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006dd6:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	4917      	ldr	r1, [pc, #92]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006de8:	f000 f834 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8006dec:	4602      	mov	r2, r0
 8006dee:	4b14      	ldr	r3, [pc, #80]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	4912      	ldr	r1, [pc, #72]	; (8006e44 <HAL_RCC_ClockConfig+0x35c>)
 8006dfa:	5ccb      	ldrb	r3, [r1, r3]
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	fa22 f303 	lsr.w	r3, r2, r3
 8006e04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e06:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <HAL_RCC_ClockConfig+0x358>)
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	4a0d      	ldr	r2, [pc, #52]	; (8006e44 <HAL_RCC_ClockConfig+0x35c>)
 8006e10:	5cd3      	ldrb	r3, [r2, r3]
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1c:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <HAL_RCC_ClockConfig+0x360>)
 8006e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e20:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <HAL_RCC_ClockConfig+0x364>)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <HAL_RCC_ClockConfig+0x368>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fa fb12 	bl	8001454 <HAL_InitTick>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	58024400 	.word	0x58024400
 8006e44:	0800b668 	.word	0x0800b668
 8006e48:	24000004 	.word	0x24000004
 8006e4c:	24000000 	.word	0x24000000
 8006e50:	24000008 	.word	0x24000008

08006e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	; 0x24
 8006e58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e5a:	4bb3      	ldr	r3, [pc, #716]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e62:	2b18      	cmp	r3, #24
 8006e64:	f200 8155 	bhi.w	8007112 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e68:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08007113 	.word	0x08007113
 8006e78:	08007113 	.word	0x08007113
 8006e7c:	08007113 	.word	0x08007113
 8006e80:	08007113 	.word	0x08007113
 8006e84:	08007113 	.word	0x08007113
 8006e88:	08007113 	.word	0x08007113
 8006e8c:	08007113 	.word	0x08007113
 8006e90:	08006efb 	.word	0x08006efb
 8006e94:	08007113 	.word	0x08007113
 8006e98:	08007113 	.word	0x08007113
 8006e9c:	08007113 	.word	0x08007113
 8006ea0:	08007113 	.word	0x08007113
 8006ea4:	08007113 	.word	0x08007113
 8006ea8:	08007113 	.word	0x08007113
 8006eac:	08007113 	.word	0x08007113
 8006eb0:	08006f01 	.word	0x08006f01
 8006eb4:	08007113 	.word	0x08007113
 8006eb8:	08007113 	.word	0x08007113
 8006ebc:	08007113 	.word	0x08007113
 8006ec0:	08007113 	.word	0x08007113
 8006ec4:	08007113 	.word	0x08007113
 8006ec8:	08007113 	.word	0x08007113
 8006ecc:	08007113 	.word	0x08007113
 8006ed0:	08006f07 	.word	0x08006f07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ed4:	4b94      	ldr	r3, [pc, #592]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0320 	and.w	r3, r3, #32
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ee0:	4b91      	ldr	r3, [pc, #580]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	08db      	lsrs	r3, r3, #3
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	4a90      	ldr	r2, [pc, #576]	; (800712c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006ef2:	e111      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ef4:	4b8d      	ldr	r3, [pc, #564]	; (800712c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ef6:	61bb      	str	r3, [r7, #24]
    break;
 8006ef8:	e10e      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006efa:	4b8d      	ldr	r3, [pc, #564]	; (8007130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006efc:	61bb      	str	r3, [r7, #24]
    break;
 8006efe:	e10b      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f00:	4b8c      	ldr	r3, [pc, #560]	; (8007134 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f02:	61bb      	str	r3, [r7, #24]
    break;
 8006f04:	e108      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f06:	4b88      	ldr	r3, [pc, #544]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f10:	4b85      	ldr	r3, [pc, #532]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f1c:	4b82      	ldr	r3, [pc, #520]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f26:	4b80      	ldr	r3, [pc, #512]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2a:	08db      	lsrs	r3, r3, #3
 8006f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80e1 	beq.w	800710c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	f000 8083 	beq.w	8007058 <HAL_RCC_GetSysClockFreq+0x204>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	f200 80a1 	bhi.w	800709c <HAL_RCC_GetSysClockFreq+0x248>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_RCC_GetSysClockFreq+0x114>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d056      	beq.n	8007014 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f66:	e099      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f68:	4b6f      	ldr	r3, [pc, #444]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d02d      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f74:	4b6c      	ldr	r3, [pc, #432]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	4a6b      	ldr	r2, [pc, #428]	; (800712c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	ee07 3a90 	vmov	s15, r3
 8006f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	4b62      	ldr	r3, [pc, #392]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006fce:	e087      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	eddf 6a58 	vldr	s13, [pc, #352]	; 800713c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe2:	4b51      	ldr	r3, [pc, #324]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ff6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007012:	e065      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007140 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007026:	4b40      	ldr	r3, [pc, #256]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007036:	ed97 6a02 	vldr	s12, [r7, #8]
 800703a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2e4>
 800703e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800704a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007056:	e043      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007062:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007144 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706a:	4b2f      	ldr	r3, [pc, #188]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707a:	ed97 6a02 	vldr	s12, [r7, #8]
 800707e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800708e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800709a:	e021      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007140 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ae:	4b1e      	ldr	r3, [pc, #120]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070be:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80070e0:	4b11      	ldr	r3, [pc, #68]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	0a5b      	lsrs	r3, r3, #9
 80070e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ea:	3301      	adds	r3, #1
 80070ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	ee07 3a90 	vmov	s15, r3
 80070f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007104:	ee17 3a90 	vmov	r3, s15
 8007108:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800710a:	e005      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]
    break;
 8007110:	e002      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007114:	61bb      	str	r3, [r7, #24]
    break;
 8007116:	bf00      	nop
  }

  return sysclockfreq;
 8007118:	69bb      	ldr	r3, [r7, #24]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3724      	adds	r7, #36	; 0x24
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	58024400 	.word	0x58024400
 800712c:	03d09000 	.word	0x03d09000
 8007130:	003d0900 	.word	0x003d0900
 8007134:	017d7840 	.word	0x017d7840
 8007138:	46000000 	.word	0x46000000
 800713c:	4c742400 	.word	0x4c742400
 8007140:	4a742400 	.word	0x4a742400
 8007144:	4bbebc20 	.word	0x4bbebc20

08007148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800714e:	f7ff fe81 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8007152:	4602      	mov	r2, r0
 8007154:	4b10      	ldr	r3, [pc, #64]	; (8007198 <HAL_RCC_GetHCLKFreq+0x50>)
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	0a1b      	lsrs	r3, r3, #8
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	490f      	ldr	r1, [pc, #60]	; (800719c <HAL_RCC_GetHCLKFreq+0x54>)
 8007160:	5ccb      	ldrb	r3, [r1, r3]
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	fa22 f303 	lsr.w	r3, r2, r3
 800716a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <HAL_RCC_GetHCLKFreq+0x50>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	4a09      	ldr	r2, [pc, #36]	; (800719c <HAL_RCC_GetHCLKFreq+0x54>)
 8007176:	5cd3      	ldrb	r3, [r2, r3]
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	4a07      	ldr	r2, [pc, #28]	; (80071a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007184:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007186:	4a07      	ldr	r2, [pc, #28]	; (80071a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800718c:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800718e:	681b      	ldr	r3, [r3, #0]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	58024400 	.word	0x58024400
 800719c:	0800b668 	.word	0x0800b668
 80071a0:	24000004 	.word	0x24000004
 80071a4:	24000000 	.word	0x24000000

080071a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071ac:	f7ff ffcc 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	091b      	lsrs	r3, r3, #4
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	4904      	ldr	r1, [pc, #16]	; (80071d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071be:	5ccb      	ldrb	r3, [r1, r3]
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	58024400 	.word	0x58024400
 80071d0:	0800b668 	.word	0x0800b668

080071d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071d8:	f7ff ffb6 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 80071dc:	4602      	mov	r2, r0
 80071de:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	4904      	ldr	r1, [pc, #16]	; (80071fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80071ea:	5ccb      	ldrb	r3, [r1, r3]
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	58024400 	.word	0x58024400
 80071fc:	0800b668 	.word	0x0800b668

08007200 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007208:	2300      	movs	r3, #0
 800720a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800720c:	2300      	movs	r3, #0
 800720e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d03f      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007224:	d02a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800722a:	d824      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800722c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007230:	d018      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007236:	d81e      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800723c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007240:	d007      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007242:	e018      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007244:	4bab      	ldr	r3, [pc, #684]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	4aaa      	ldr	r2, [pc, #680]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007250:	e015      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	2102      	movs	r1, #2
 8007258:	4618      	mov	r0, r3
 800725a:	f001 fff3 	bl	8009244 <RCCEx_PLL2_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007262:	e00c      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3324      	adds	r3, #36	; 0x24
 8007268:	2102      	movs	r1, #2
 800726a:	4618      	mov	r0, r3
 800726c:	f002 f89c 	bl	80093a8 <RCCEx_PLL3_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007274:	e003      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	75fb      	strb	r3, [r7, #23]
      break;
 800727a:	e000      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800727c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d109      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007284:	4b9b      	ldr	r3, [pc, #620]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007290:	4998      	ldr	r1, [pc, #608]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007292:	4313      	orrs	r3, r2
 8007294:	650b      	str	r3, [r1, #80]	; 0x50
 8007296:	e001      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d03d      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d826      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80072b0:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072cd 	.word	0x080072cd
 80072bc:	080072db 	.word	0x080072db
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	08007305 	.word	0x08007305
 80072c8:	08007305 	.word	0x08007305
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072cc:	4b89      	ldr	r3, [pc, #548]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	4a88      	ldr	r2, [pc, #544]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072d8:	e015      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	2100      	movs	r1, #0
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 ffaf 	bl	8009244 <RCCEx_PLL2_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072ea:	e00c      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f002 f858 	bl	80093a8 <RCCEx_PLL3_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072fc:	e003      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	75fb      	strb	r3, [r7, #23]
      break;
 8007302:	e000      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d109      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800730c:	4b79      	ldr	r3, [pc, #484]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800730e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007310:	f023 0207 	bic.w	r2, r3, #7
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	4976      	ldr	r1, [pc, #472]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	650b      	str	r3, [r1, #80]	; 0x50
 800731e:	e001      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800732c:	2b00      	cmp	r3, #0
 800732e:	d042      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007338:	d02b      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800733a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800733e:	d825      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007340:	2bc0      	cmp	r3, #192	; 0xc0
 8007342:	d028      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007344:	2bc0      	cmp	r3, #192	; 0xc0
 8007346:	d821      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007348:	2b80      	cmp	r3, #128	; 0x80
 800734a:	d016      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d81d      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d007      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007358:	e018      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735a:	4b66      	ldr	r3, [pc, #408]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	4a65      	ldr	r2, [pc, #404]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007366:	e017      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3304      	adds	r3, #4
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f001 ff68 	bl	8009244 <RCCEx_PLL2_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007378:	e00e      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3324      	adds	r3, #36	; 0x24
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f002 f811 	bl	80093a8 <RCCEx_PLL3_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800738a:	e005      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
      break;
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800739e:	4b55      	ldr	r3, [pc, #340]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073aa:	4952      	ldr	r1, [pc, #328]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	650b      	str	r3, [r1, #80]	; 0x50
 80073b0:	e001      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d049      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073cc:	d030      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80073ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073d2:	d82a      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80073d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073d8:	d02c      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80073da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073de:	d824      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80073e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073e4:	d018      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80073e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ea:	d81e      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80073f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073f4:	d007      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80073f6:	e018      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f8:	4b3e      	ldr	r3, [pc, #248]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a3d      	ldr	r2, [pc, #244]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007404:	e017      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f001 ff19 	bl	8009244 <RCCEx_PLL2_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007416:	e00e      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3324      	adds	r3, #36	; 0x24
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f001 ffc2 	bl	80093a8 <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007428:	e005      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
      break;
 800742e:	e002      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007430:	bf00      	nop
 8007432:	e000      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800743c:	4b2d      	ldr	r3, [pc, #180]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800744a:	492a      	ldr	r1, [pc, #168]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800744c:	4313      	orrs	r3, r2
 800744e:	658b      	str	r3, [r1, #88]	; 0x58
 8007450:	e001      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745e:	2b00      	cmp	r3, #0
 8007460:	d04c      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800746c:	d030      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800746e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007472:	d82a      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007474:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007478:	d02c      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800747a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800747e:	d824      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007484:	d018      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800748a:	d81e      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007494:	d007      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007496:	e018      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007498:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800749e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a4:	e017      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3304      	adds	r3, #4
 80074aa:	2100      	movs	r1, #0
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fec9 	bl	8009244 <RCCEx_PLL2_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074b6:	e00e      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3324      	adds	r3, #36	; 0x24
 80074bc:	2100      	movs	r1, #0
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 ff72 	bl	80093a8 <RCCEx_PLL3_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074c8:	e005      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
      break;
 80074ce:	e002      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80074d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10d      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074ea:	4902      	ldr	r1, [pc, #8]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	658b      	str	r3, [r1, #88]	; 0x58
 80074f0:	e004      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80074f2:	bf00      	nop
 80074f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d032      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750c:	2b30      	cmp	r3, #48	; 0x30
 800750e:	d01c      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007510:	2b30      	cmp	r3, #48	; 0x30
 8007512:	d817      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007514:	2b20      	cmp	r3, #32
 8007516:	d00c      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007518:	2b20      	cmp	r3, #32
 800751a:	d813      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d016      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007520:	2b10      	cmp	r3, #16
 8007522:	d10f      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007524:	4baf      	ldr	r3, [pc, #700]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	4aae      	ldr	r2, [pc, #696]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800752a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007530:	e00e      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3304      	adds	r3, #4
 8007536:	2102      	movs	r1, #2
 8007538:	4618      	mov	r0, r3
 800753a:	f001 fe83 	bl	8009244 <RCCEx_PLL2_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007542:	e005      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
      break;
 8007548:	e002      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800754a:	bf00      	nop
 800754c:	e000      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800754e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007556:	4ba3      	ldr	r3, [pc, #652]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	49a0      	ldr	r1, [pc, #640]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007564:	4313      	orrs	r3, r2
 8007566:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007568:	e001      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d047      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800757e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007582:	d030      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007588:	d82a      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800758a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800758e:	d02c      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007594:	d824      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800759a:	d018      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800759c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a0:	d81e      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	d007      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80075ac:	e018      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ae:	4b8d      	ldr	r3, [pc, #564]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	4a8c      	ldr	r2, [pc, #560]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075ba:	e017      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 fe3e 	bl	8009244 <RCCEx_PLL2_Config>
 80075c8:	4603      	mov	r3, r0
 80075ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075cc:	e00e      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3324      	adds	r3, #36	; 0x24
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 fee7 	bl	80093a8 <RCCEx_PLL3_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
      break;
 80075e4:	e002      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80075ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80075f2:	4b7c      	ldr	r3, [pc, #496]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fe:	4979      	ldr	r1, [pc, #484]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007600:	4313      	orrs	r3, r2
 8007602:	650b      	str	r3, [r1, #80]	; 0x50
 8007604:	e001      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d049      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800761e:	d02e      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007624:	d828      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007626:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800762a:	d02a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800762c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007630:	d822      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007632:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007636:	d026      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800763c:	d81c      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800763e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007642:	d010      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007648:	d816      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01d      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800764e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007652:	d111      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	2101      	movs	r1, #1
 800765a:	4618      	mov	r0, r3
 800765c:	f001 fdf2 	bl	8009244 <RCCEx_PLL2_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007664:	e012      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3324      	adds	r3, #36	; 0x24
 800766a:	2101      	movs	r1, #1
 800766c:	4618      	mov	r0, r3
 800766e:	f001 fe9b 	bl	80093a8 <RCCEx_PLL3_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007676:	e009      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
      break;
 800767c:	e006      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800767e:	bf00      	nop
 8007680:	e004      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007682:	bf00      	nop
 8007684:	e002      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800768a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d109      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007692:	4b54      	ldr	r3, [pc, #336]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007696:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769e:	4951      	ldr	r1, [pc, #324]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	650b      	str	r3, [r1, #80]	; 0x50
 80076a4:	e001      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d04b      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076c0:	d02e      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80076c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076c6:	d828      	bhi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d02a      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d2:	d822      	bhi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80076d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076d8:	d026      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80076da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076de:	d81c      	bhi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80076e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e4:	d010      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80076e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ea:	d816      	bhi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01d      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80076f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076f4:	d111      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3304      	adds	r3, #4
 80076fa:	2101      	movs	r1, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fda1 	bl	8009244 <RCCEx_PLL2_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007706:	e012      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3324      	adds	r3, #36	; 0x24
 800770c:	2101      	movs	r1, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f001 fe4a 	bl	80093a8 <RCCEx_PLL3_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007718:	e009      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	75fb      	strb	r3, [r7, #23]
      break;
 800771e:	e006      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007720:	bf00      	nop
 8007722:	e004      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800772c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007734:	4b2b      	ldr	r3, [pc, #172]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007738:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007742:	4928      	ldr	r1, [pc, #160]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007744:	4313      	orrs	r3, r2
 8007746:	658b      	str	r3, [r1, #88]	; 0x58
 8007748:	e001      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d02f      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007762:	d00e      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007768:	d814      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d015      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800776e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007772:	d10f      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800777a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007780:	e00c      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	2101      	movs	r1, #1
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fd5b 	bl	8009244 <RCCEx_PLL2_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
      break;
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800779a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077a2:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ae:	490d      	ldr	r1, [pc, #52]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	650b      	str	r3, [r1, #80]	; 0x50
 80077b4:	e001      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d033      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d81c      	bhi.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80077ce:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	0800780f 	.word	0x0800780f
 80077d8:	080077e9 	.word	0x080077e9
 80077dc:	080077f7 	.word	0x080077f7
 80077e0:	0800780f 	.word	0x0800780f
 80077e4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e8:	4bb8      	ldr	r3, [pc, #736]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	4ab7      	ldr	r2, [pc, #732]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80077f4:	e00c      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3304      	adds	r3, #4
 80077fa:	2102      	movs	r1, #2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fd21 	bl	8009244 <RCCEx_PLL2_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007806:	e003      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
      break;
 800780c:	e000      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800780e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007816:	4bad      	ldr	r3, [pc, #692]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781a:	f023 0203 	bic.w	r2, r3, #3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	49aa      	ldr	r1, [pc, #680]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007824:	4313      	orrs	r3, r2
 8007826:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007828:	e001      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 8086 	beq.w	8007948 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800783c:	4ba4      	ldr	r3, [pc, #656]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4aa3      	ldr	r2, [pc, #652]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007848:	f7f9 fe4e 	bl	80014e8 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800784e:	e009      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007850:	f7f9 fe4a 	bl	80014e8 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d902      	bls.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	75fb      	strb	r3, [r7, #23]
        break;
 8007862:	e005      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007864:	4b9a      	ldr	r3, [pc, #616]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0ef      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d166      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007876:	4b95      	ldr	r3, [pc, #596]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007878:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007880:	4053      	eors	r3, r2
 8007882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007886:	2b00      	cmp	r3, #0
 8007888:	d013      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800788a:	4b90      	ldr	r3, [pc, #576]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007892:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007894:	4b8d      	ldr	r3, [pc, #564]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007898:	4a8c      	ldr	r2, [pc, #560]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800789a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800789e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078a0:	4b8a      	ldr	r3, [pc, #552]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	4a89      	ldr	r2, [pc, #548]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078aa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078ac:	4a87      	ldr	r2, [pc, #540]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078bc:	d115      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078be:	f7f9 fe13 	bl	80014e8 <HAL_GetTick>
 80078c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078c4:	e00b      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c6:	f7f9 fe0f 	bl	80014e8 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d902      	bls.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	75fb      	strb	r3, [r7, #23]
            break;
 80078dc:	e005      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078de:	4b7b      	ldr	r3, [pc, #492]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0ed      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d126      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078fe:	d10d      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007900:	4b72      	ldr	r3, [pc, #456]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800790e:	0919      	lsrs	r1, r3, #4
 8007910:	4b70      	ldr	r3, [pc, #448]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007912:	400b      	ands	r3, r1
 8007914:	496d      	ldr	r1, [pc, #436]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007916:	4313      	orrs	r3, r2
 8007918:	610b      	str	r3, [r1, #16]
 800791a:	e005      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800791c:	4b6b      	ldr	r3, [pc, #428]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	4a6a      	ldr	r2, [pc, #424]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007922:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007926:	6113      	str	r3, [r2, #16]
 8007928:	4b68      	ldr	r3, [pc, #416]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800792a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007936:	4965      	ldr	r1, [pc, #404]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007938:	4313      	orrs	r3, r2
 800793a:	670b      	str	r3, [r1, #112]	; 0x70
 800793c:	e004      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	75bb      	strb	r3, [r7, #22]
 8007942:	e001      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d07e      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007958:	2b28      	cmp	r3, #40	; 0x28
 800795a:	d867      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800795c:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	08007a33 	.word	0x08007a33
 8007968:	08007a2d 	.word	0x08007a2d
 800796c:	08007a2d 	.word	0x08007a2d
 8007970:	08007a2d 	.word	0x08007a2d
 8007974:	08007a2d 	.word	0x08007a2d
 8007978:	08007a2d 	.word	0x08007a2d
 800797c:	08007a2d 	.word	0x08007a2d
 8007980:	08007a2d 	.word	0x08007a2d
 8007984:	08007a09 	.word	0x08007a09
 8007988:	08007a2d 	.word	0x08007a2d
 800798c:	08007a2d 	.word	0x08007a2d
 8007990:	08007a2d 	.word	0x08007a2d
 8007994:	08007a2d 	.word	0x08007a2d
 8007998:	08007a2d 	.word	0x08007a2d
 800799c:	08007a2d 	.word	0x08007a2d
 80079a0:	08007a2d 	.word	0x08007a2d
 80079a4:	08007a1b 	.word	0x08007a1b
 80079a8:	08007a2d 	.word	0x08007a2d
 80079ac:	08007a2d 	.word	0x08007a2d
 80079b0:	08007a2d 	.word	0x08007a2d
 80079b4:	08007a2d 	.word	0x08007a2d
 80079b8:	08007a2d 	.word	0x08007a2d
 80079bc:	08007a2d 	.word	0x08007a2d
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007a33 	.word	0x08007a33
 80079c8:	08007a2d 	.word	0x08007a2d
 80079cc:	08007a2d 	.word	0x08007a2d
 80079d0:	08007a2d 	.word	0x08007a2d
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	08007a2d 	.word	0x08007a2d
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a33 	.word	0x08007a33
 80079e8:	08007a2d 	.word	0x08007a2d
 80079ec:	08007a2d 	.word	0x08007a2d
 80079f0:	08007a2d 	.word	0x08007a2d
 80079f4:	08007a2d 	.word	0x08007a2d
 80079f8:	08007a2d 	.word	0x08007a2d
 80079fc:	08007a2d 	.word	0x08007a2d
 8007a00:	08007a2d 	.word	0x08007a2d
 8007a04:	08007a33 	.word	0x08007a33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 fc18 	bl	8009244 <RCCEx_PLL2_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a18:	e00c      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3324      	adds	r3, #36	; 0x24
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 fcc1 	bl	80093a8 <RCCEx_PLL3_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a2a:	e003      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a30:	e000      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a3a:	4b24      	ldr	r3, [pc, #144]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a46:	4921      	ldr	r1, [pc, #132]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	654b      	str	r3, [r1, #84]	; 0x54
 8007a4c:	e001      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d03e      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	d820      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007aaf 	.word	0x08007aaf
 8007a70:	08007a85 	.word	0x08007a85
 8007a74:	08007a97 	.word	0x08007a97
 8007a78:	08007aaf 	.word	0x08007aaf
 8007a7c:	08007aaf 	.word	0x08007aaf
 8007a80:	08007aaf 	.word	0x08007aaf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	2101      	movs	r1, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fbda 	bl	8009244 <RCCEx_PLL2_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a94:	e00c      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3324      	adds	r3, #36	; 0x24
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 fc83 	bl	80093a8 <RCCEx_PLL3_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007aa6:	e003      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007aac:	e000      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d110      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f023 0207 	bic.w	r2, r3, #7
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac2:	4902      	ldr	r1, [pc, #8]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	654b      	str	r3, [r1, #84]	; 0x54
 8007ac8:	e008      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007aca:	bf00      	nop
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	58024800 	.word	0x58024800
 8007ad4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d039      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	d820      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b3b 	.word	0x08007b3b
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b23 	.word	0x08007b23
 8007b04:	08007b3b 	.word	0x08007b3b
 8007b08:	08007b3b 	.word	0x08007b3b
 8007b0c:	08007b3b 	.word	0x08007b3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	2101      	movs	r1, #1
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 fb94 	bl	8009244 <RCCEx_PLL2_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b20:	e00c      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3324      	adds	r3, #36	; 0x24
 8007b26:	2101      	movs	r1, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 fc3d 	bl	80093a8 <RCCEx_PLL3_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b32:	e003      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	e000      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b42:	4bb7      	ldr	r3, [pc, #732]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	f023 0207 	bic.w	r2, r3, #7
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b50:	49b3      	ldr	r1, [pc, #716]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	658b      	str	r3, [r1, #88]	; 0x58
 8007b56:	e001      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d04b      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b72:	d02e      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b78:	d828      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7e:	d02a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b84:	d822      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b8a:	d026      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007b8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b90:	d81c      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b96:	d010      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b9c:	d816      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d01d      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba6:	d111      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fb48 	bl	8009244 <RCCEx_PLL2_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007bb8:	e012      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3324      	adds	r3, #36	; 0x24
 8007bbe:	2102      	movs	r1, #2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fbf1 	bl	80093a8 <RCCEx_PLL3_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007bca:	e009      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd0:	e006      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007bd2:	bf00      	nop
 8007bd4:	e004      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007bd6:	bf00      	nop
 8007bd8:	e002      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007bda:	bf00      	nop
 8007bdc:	e000      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007be6:	4b8e      	ldr	r3, [pc, #568]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf4:	498a      	ldr	r1, [pc, #552]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	654b      	str	r3, [r1, #84]	; 0x54
 8007bfa:	e001      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d04b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c16:	d02e      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007c18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c1c:	d828      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c22:	d02a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c28:	d822      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007c2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c2e:	d026      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c34:	d81c      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c3a:	d010      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c40:	d816      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01d      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4a:	d111      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	2100      	movs	r1, #0
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 faf6 	bl	8009244 <RCCEx_PLL2_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c5c:	e012      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3324      	adds	r3, #36	; 0x24
 8007c62:	2102      	movs	r1, #2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 fb9f 	bl	80093a8 <RCCEx_PLL3_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c6e:	e009      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
      break;
 8007c74:	e006      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c76:	bf00      	nop
 8007c78:	e004      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e002      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c8a:	4b65      	ldr	r3, [pc, #404]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c98:	4961      	ldr	r1, [pc, #388]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c9e:	e001      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d04b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007cba:	d02e      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007cbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007cc0:	d828      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc6:	d02a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ccc:	d822      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007cce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cd2:	d026      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007cd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cd8:	d81c      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cde:	d010      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce4:	d816      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01d      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cee:	d111      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 faa4 	bl	8009244 <RCCEx_PLL2_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d00:	e012      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3324      	adds	r3, #36	; 0x24
 8007d06:	2102      	movs	r1, #2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 fb4d 	bl	80093a8 <RCCEx_PLL3_Config>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d12:	e009      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	75fb      	strb	r3, [r7, #23]
      break;
 8007d18:	e006      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007d1a:	bf00      	nop
 8007d1c:	e004      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007d1e:	bf00      	nop
 8007d20:	e002      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007d22:	bf00      	nop
 8007d24:	e000      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d2e:	4b3c      	ldr	r3, [pc, #240]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d3c:	4938      	ldr	r1, [pc, #224]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	658b      	str	r3, [r1, #88]	; 0x58
 8007d42:	e001      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5e:	d10a      	bne.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	2102      	movs	r1, #2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 fb1e 	bl	80093a8 <RCCEx_PLL3_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d76:	4b2a      	ldr	r3, [pc, #168]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d84:	4926      	ldr	r1, [pc, #152]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01a      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da0:	d10a      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3324      	adds	r3, #36	; 0x24
 8007da6:	2102      	movs	r1, #2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fafd 	bl	80093a8 <RCCEx_PLL3_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007db8:	4b19      	ldr	r3, [pc, #100]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dc6:	4916      	ldr	r1, [pc, #88]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d036      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de2:	d01f      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de8:	d817      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df2:	d009      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007df4:	e011      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 fa21 	bl	8009244 <RCCEx_PLL2_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e06:	e00e      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3324      	adds	r3, #36	; 0x24
 8007e0c:	2102      	movs	r1, #2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 faca 	bl	80093a8 <RCCEx_PLL3_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e18:	e005      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1e:	e002      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007e20:	58024400 	.word	0x58024400
      break;
 8007e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e2c:	4b93      	ldr	r3, [pc, #588]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e3a:	4990      	ldr	r1, [pc, #576]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	658b      	str	r3, [r1, #88]	; 0x58
 8007e40:	e001      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d033      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e5c:	d01c      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e62:	d816      	bhi.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e68:	d003      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007e6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e6e:	d007      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007e70:	e00f      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e72:	4b82      	ldr	r3, [pc, #520]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	4a81      	ldr	r2, [pc, #516]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e7e:	e00c      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3324      	adds	r3, #36	; 0x24
 8007e84:	2101      	movs	r1, #1
 8007e86:	4618      	mov	r0, r3
 8007e88:	f001 fa8e 	bl	80093a8 <RCCEx_PLL3_Config>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e90:	e003      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	75fb      	strb	r3, [r7, #23]
      break;
 8007e96:	e000      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ea0:	4b76      	ldr	r3, [pc, #472]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eae:	4973      	ldr	r1, [pc, #460]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	654b      	str	r3, [r1, #84]	; 0x54
 8007eb4:	e001      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d029      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed2:	d007      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007ed4:	e00f      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed6:	4b69      	ldr	r3, [pc, #420]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	4a68      	ldr	r2, [pc, #416]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ee2:	e00b      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	2102      	movs	r1, #2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 f9aa 	bl	8009244 <RCCEx_PLL2_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ef4:	e002      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8007efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f02:	4b5e      	ldr	r3, [pc, #376]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0e:	495b      	ldr	r1, [pc, #364]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f14:	e001      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3324      	adds	r3, #36	; 0x24
 8007f2a:	2102      	movs	r1, #2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fa3b 	bl	80093a8 <RCCEx_PLL3_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d030      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f50:	d017      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f56:	d811      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f5c:	d013      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f62:	d80b      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d010      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6c:	d106      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f6e:	4b43      	ldr	r3, [pc, #268]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	4a42      	ldr	r2, [pc, #264]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007f7a:	e007      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f80:	e004      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f82:	bf00      	nop
 8007f84:	e002      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f86:	bf00      	nop
 8007f88:	e000      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f92:	4b3a      	ldr	r3, [pc, #232]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9e:	4937      	ldr	r1, [pc, #220]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	654b      	str	r3, [r1, #84]	; 0x54
 8007fa4:	e001      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fb6:	4b31      	ldr	r3, [pc, #196]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	492e      	ldr	r1, [pc, #184]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d009      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007fd4:	4b29      	ldr	r3, [pc, #164]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fe2:	4926      	ldr	r1, [pc, #152]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ff4:	4b21      	ldr	r3, [pc, #132]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008000:	491e      	ldr	r1, [pc, #120]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008002:	4313      	orrs	r3, r2
 8008004:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008012:	4b1a      	ldr	r3, [pc, #104]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	4a19      	ldr	r2, [pc, #100]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800801c:	6113      	str	r3, [r2, #16]
 800801e:	4b17      	ldr	r3, [pc, #92]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008028:	4914      	ldr	r1, [pc, #80]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800802a:	4313      	orrs	r3, r2
 800802c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	da08      	bge.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008036:	4b11      	ldr	r3, [pc, #68]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008042:	490e      	ldr	r1, [pc, #56]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d009      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008054:	4b09      	ldr	r3, [pc, #36]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008062:	4906      	ldr	r1, [pc, #24]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008064:	4313      	orrs	r3, r2
 8008066:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008068:	7dbb      	ldrb	r3, [r7, #22]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	58024400 	.word	0x58024400

08008080 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b090      	sub	sp, #64	; 0x40
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808e:	f040 8095 	bne.w	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008092:	4bae      	ldr	r3, [pc, #696]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	633b      	str	r3, [r7, #48]	; 0x30
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	2b04      	cmp	r3, #4
 80080a0:	f200 8088 	bhi.w	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080c1 	.word	0x080080c1
 80080b0:	080080e9 	.word	0x080080e9
 80080b4:	08008111 	.word	0x08008111
 80080b8:	080081ad 	.word	0x080081ad
 80080bc:	08008139 	.word	0x08008139

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080c0:	4ba2      	ldr	r3, [pc, #648]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080cc:	d108      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 ff64 	bl	8008fa0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080dc:	f000 bc95 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e4:	f000 bc91 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080e8:	4b98      	ldr	r3, [pc, #608]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080f4:	d108      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f6:	f107 0318 	add.w	r3, r7, #24
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fca8 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008104:	f000 bc81 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810c:	f000 bc7d 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008110:	4b8e      	ldr	r3, [pc, #568]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811c:	d108      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800811e:	f107 030c 	add.w	r3, r7, #12
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fde8 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800812c:	f000 bc6d 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008134:	f000 bc69 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008138:	4b84      	ldr	r3, [pc, #528]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800813a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008140:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008142:	4b82      	ldr	r3, [pc, #520]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b04      	cmp	r3, #4
 800814c:	d10c      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	2b00      	cmp	r3, #0
 8008152:	d109      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008154:	4b7d      	ldr	r3, [pc, #500]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	08db      	lsrs	r3, r3, #3
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	4a7c      	ldr	r2, [pc, #496]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008160:	fa22 f303 	lsr.w	r3, r2, r3
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008166:	e01f      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008168:	4b78      	ldr	r3, [pc, #480]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008174:	d106      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800817c:	d102      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800817e:	4b75      	ldr	r3, [pc, #468]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008182:	e011      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008184:	4b71      	ldr	r3, [pc, #452]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008190:	d106      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008198:	d102      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800819a:	4b6f      	ldr	r3, [pc, #444]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800819e:	e003      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80081a4:	f000 bc31 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081a8:	f000 bc2f 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081ac:	4b6b      	ldr	r3, [pc, #428]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b0:	f000 bc2b 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b8:	f000 bc27 	b.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c2:	f040 8095 	bne.w	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80081c6:	4b61      	ldr	r3, [pc, #388]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80081c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80081ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d6:	d04d      	beq.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081de:	f200 8084 	bhi.w	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	2bc0      	cmp	r3, #192	; 0xc0
 80081e6:	d07d      	beq.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2bc0      	cmp	r3, #192	; 0xc0
 80081ec:	d87d      	bhi.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	2b80      	cmp	r3, #128	; 0x80
 80081f2:	d02d      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	2b80      	cmp	r3, #128	; 0x80
 80081f8:	d877      	bhi.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	2b40      	cmp	r3, #64	; 0x40
 8008204:	d012      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008206:	e070      	b.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008208:	4b50      	ldr	r3, [pc, #320]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008214:	d107      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fec0 	bl	8008fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008224:	e3f1      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800822a:	e3ee      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800822c:	4b47      	ldr	r3, [pc, #284]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008238:	d107      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800823a:	f107 0318 	add.w	r3, r7, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fc06 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008248:	e3df      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800824e:	e3dc      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008250:	4b3e      	ldr	r3, [pc, #248]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800825c:	d107      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800825e:	f107 030c 	add.w	r3, r7, #12
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fd48 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800826c:	e3cd      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008272:	e3ca      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008274:	4b35      	ldr	r3, [pc, #212]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800827c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800827e:	4b33      	ldr	r3, [pc, #204]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b04      	cmp	r3, #4
 8008288:	d10c      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800828a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008290:	4b2e      	ldr	r3, [pc, #184]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	08db      	lsrs	r3, r3, #3
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	4a2d      	ldr	r2, [pc, #180]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a2:	e01e      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082a4:	4b29      	ldr	r3, [pc, #164]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b0:	d106      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80082b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b8:	d102      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80082ba:	4b26      	ldr	r3, [pc, #152]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082be:	e010      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082c0:	4b22      	ldr	r3, [pc, #136]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082cc:	d106      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d4:	d102      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80082d6:	4b20      	ldr	r3, [pc, #128]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082da:	e002      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80082e0:	e393      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082e2:	e392      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082e4:	4b1d      	ldr	r3, [pc, #116]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082e8:	e38f      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ee:	e38c      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f6:	f040 80a7 	bne.w	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80082fa:	4b14      	ldr	r3, [pc, #80]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008302:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800830a:	d05f      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008312:	f200 8096 	bhi.w	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800831c:	f000 808e 	beq.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008326:	f200 808c 	bhi.w	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008330:	d03a      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008338:	f200 8083 	bhi.w	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00e      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008348:	d01c      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800834a:	e07a      	b.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800834c:	58024400 	.word	0x58024400
 8008350:	03d09000 	.word	0x03d09000
 8008354:	003d0900 	.word	0x003d0900
 8008358:	017d7840 	.word	0x017d7840
 800835c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008360:	4baa      	ldr	r3, [pc, #680]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800836c:	d107      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800836e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fe14 	bl	8008fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800837c:	e345      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e342      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008384:	4ba1      	ldr	r3, [pc, #644]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800838c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008390:	d107      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008392:	f107 0318 	add.w	r3, r7, #24
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fb5a 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083a0:	e333      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a6:	e330      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083a8:	4b98      	ldr	r3, [pc, #608]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b4:	d107      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fc9c 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083c4:	e321      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ca:	e31e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083cc:	4b8f      	ldr	r3, [pc, #572]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80083ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083d6:	4b8d      	ldr	r3, [pc, #564]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d10c      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083e8:	4b88      	ldr	r3, [pc, #544]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	08db      	lsrs	r3, r3, #3
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	4a87      	ldr	r2, [pc, #540]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80083f4:	fa22 f303 	lsr.w	r3, r2, r3
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083fa:	e01e      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083fc:	4b83      	ldr	r3, [pc, #524]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008408:	d106      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800840a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008410:	d102      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008412:	4b80      	ldr	r3, [pc, #512]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008416:	e010      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008418:	4b7c      	ldr	r3, [pc, #496]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008424:	d106      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800842c:	d102      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800842e:	4b7a      	ldr	r3, [pc, #488]	; (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008432:	e002      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008438:	e2e7      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800843a:	e2e6      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800843c:	4b77      	ldr	r3, [pc, #476]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008440:	e2e3      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008446:	e2e0      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800844e:	f040 809c 	bne.w	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008452:	4b6e      	ldr	r3, [pc, #440]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008456:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800845a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008462:	d054      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800846a:	f200 808b 	bhi.w	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008474:	f000 8083 	beq.w	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800847e:	f200 8081 	bhi.w	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008488:	d02f      	beq.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008490:	d878      	bhi.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800849e:	d012      	beq.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80084a0:	e070      	b.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084a2:	4b5a      	ldr	r3, [pc, #360]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ae:	d107      	bne.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fd73 	bl	8008fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084be:	e2a4      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c4:	e2a1      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084c6:	4b51      	ldr	r3, [pc, #324]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084d2:	d107      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d4:	f107 0318 	add.w	r3, r7, #24
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fab9 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80084e2:	e292      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084e8:	e28f      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ea:	4b48      	ldr	r3, [pc, #288]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f6:	d107      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f8:	f107 030c 	add.w	r3, r7, #12
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fbfb 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008506:	e280      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800850c:	e27d      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800850e:	4b3f      	ldr	r3, [pc, #252]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008516:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008518:	4b3c      	ldr	r3, [pc, #240]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b04      	cmp	r3, #4
 8008522:	d10c      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800852a:	4b38      	ldr	r3, [pc, #224]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	08db      	lsrs	r3, r3, #3
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	4a36      	ldr	r2, [pc, #216]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008536:	fa22 f303 	lsr.w	r3, r2, r3
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853c:	e01e      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800853e:	4b33      	ldr	r3, [pc, #204]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d106      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008552:	d102      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008554:	4b2f      	ldr	r3, [pc, #188]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008558:	e010      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800855a:	4b2c      	ldr	r3, [pc, #176]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008566:	d106      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800856e:	d102      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008570:	4b29      	ldr	r3, [pc, #164]	; (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008574:	e002      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800857a:	e246      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800857c:	e245      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800857e:	4b27      	ldr	r3, [pc, #156]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008582:	e242      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008588:	e23f      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008590:	f040 80a8 	bne.w	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008594:	4b1d      	ldr	r3, [pc, #116]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008598:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800859c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085a4:	d060      	beq.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085ac:	f200 8097 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085b6:	f000 808f 	beq.w	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085c0:	f200 808d 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ca:	d03b      	beq.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d2:	f200 8084 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e2:	d01d      	beq.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80085e4:	e07b      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f2:	d107      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fcd1 	bl	8008fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008602:	e202      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008608:	e1ff      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800860a:	bf00      	nop
 800860c:	58024400 	.word	0x58024400
 8008610:	03d09000 	.word	0x03d09000
 8008614:	003d0900 	.word	0x003d0900
 8008618:	017d7840 	.word	0x017d7840
 800861c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008620:	4ba3      	ldr	r3, [pc, #652]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800862c:	d107      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800862e:	f107 0318 	add.w	r3, r7, #24
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fa0c 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800863c:	e1e5      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008642:	e1e2      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008644:	4b9a      	ldr	r3, [pc, #616]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800864c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008650:	d107      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008652:	f107 030c 	add.w	r3, r7, #12
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fb4e 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008660:	e1d3      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008666:	e1d0      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008668:	4b91      	ldr	r3, [pc, #580]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800866a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008670:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008672:	4b8f      	ldr	r3, [pc, #572]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b04      	cmp	r3, #4
 800867c:	d10c      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800867e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008684:	4b8a      	ldr	r3, [pc, #552]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	08db      	lsrs	r3, r3, #3
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	4a89      	ldr	r2, [pc, #548]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008696:	e01e      	b.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008698:	4b85      	ldr	r3, [pc, #532]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086a4:	d106      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ac:	d102      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80086ae:	4b82      	ldr	r3, [pc, #520]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b2:	e010      	b.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086b4:	4b7e      	ldr	r3, [pc, #504]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c0:	d106      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c8:	d102      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80086ca:	4b7c      	ldr	r3, [pc, #496]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ce:	e002      	b.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80086d4:	e199      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086d6:	e198      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086d8:	4b79      	ldr	r3, [pc, #484]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086dc:	e195      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e2:	e192      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086ea:	d173      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80086ec:	4b70      	ldr	r3, [pc, #448]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fc:	d02f      	beq.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008704:	d863      	bhi.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008712:	d012      	beq.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008714:	e05b      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008716:	4b66      	ldr	r3, [pc, #408]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800871e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008722:	d107      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008724:	f107 0318 	add.w	r3, r7, #24
 8008728:	4618      	mov	r0, r3
 800872a:	f000 f991 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008732:	e16a      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008734:	2300      	movs	r3, #0
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008738:	e167      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800873a:	4b5d      	ldr	r3, [pc, #372]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008746:	d107      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008748:	f107 030c 	add.w	r3, r7, #12
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fad3 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008756:	e158      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800875c:	e155      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800875e:	4b54      	ldr	r3, [pc, #336]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008766:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008768:	4b51      	ldr	r3, [pc, #324]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b04      	cmp	r3, #4
 8008772:	d10c      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	2b00      	cmp	r3, #0
 8008778:	d109      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800877a:	4b4d      	ldr	r3, [pc, #308]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	08db      	lsrs	r3, r3, #3
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	4a4b      	ldr	r2, [pc, #300]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008786:	fa22 f303 	lsr.w	r3, r2, r3
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878c:	e01e      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800878e:	4b48      	ldr	r3, [pc, #288]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800879a:	d106      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a2:	d102      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087a4:	4b44      	ldr	r3, [pc, #272]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a8:	e010      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087aa:	4b41      	ldr	r3, [pc, #260]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b6:	d106      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087be:	d102      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087c0:	4b3e      	ldr	r3, [pc, #248]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087c4:	e002      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80087ca:	e11e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087cc:	e11d      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087d2:	e11a      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087da:	d133      	bne.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80087dc:	4b34      	ldr	r3, [pc, #208]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80087de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f2:	d012      	beq.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80087f4:	e023      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087f6:	4b2e      	ldr	r3, [pc, #184]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008802:	d107      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fbc9 	bl	8008fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008812:	e0fa      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008818:	e0f7      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800881a:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008826:	d107      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008828:	f107 0318 	add.w	r3, r7, #24
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f90f 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008836:	e0e8      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800883c:	e0e5      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008842:	e0e2      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800884a:	f040 808f 	bne.w	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800884e:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008852:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008856:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800885e:	d075      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008866:	d87e      	bhi.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886e:	d060      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008876:	d876      	bhi.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800887e:	d045      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008886:	d86e      	bhi.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800888e:	d02b      	beq.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008896:	d866      	bhi.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	d004      	beq.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a4:	d00e      	beq.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80088a6:	e05e      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088a8:	f000 f8bc 	bl	8008a24 <HAL_RCCEx_GetD3PCLK1Freq>
 80088ac:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80088ae:	e0ac      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088b0:	58024400 	.word	0x58024400
 80088b4:	03d09000 	.word	0x03d09000
 80088b8:	003d0900 	.word	0x003d0900
 80088bc:	017d7840 	.word	0x017d7840
 80088c0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c4:	4b53      	ldr	r3, [pc, #332]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088d0:	d107      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d2:	f107 0318 	add.w	r3, r7, #24
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f8ba 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80088e0:	e093      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088e6:	e090      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e8:	4b4a      	ldr	r3, [pc, #296]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088f4:	d107      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 f9fc 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008904:	e081      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800890a:	e07e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800890c:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b04      	cmp	r3, #4
 8008916:	d109      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008918:	4b3e      	ldr	r3, [pc, #248]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	08db      	lsrs	r3, r3, #3
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	4a3d      	ldr	r2, [pc, #244]	; (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
 8008928:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800892a:	e06e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008930:	e06b      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008932:	4b38      	ldr	r3, [pc, #224]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800893e:	d102      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008940:	4b36      	ldr	r3, [pc, #216]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008944:	e061      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800894a:	e05e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800894c:	4b31      	ldr	r3, [pc, #196]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008958:	d102      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800895a:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800895e:	e054      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008964:	e051      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800896a:	e04e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008972:	d148      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008974:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008978:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800897c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008984:	d02a      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898c:	d838      	bhi.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899a:	d00d      	beq.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800899c:	e030      	b.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800899e:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089aa:	d102      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80089ac:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089b0:	e02b      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089b6:	e028      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089b8:	4b16      	ldr	r3, [pc, #88]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089c4:	d107      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fae8 	bl	8008fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089d4:	e019      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089da:	e016      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089dc:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e8:	d107      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ea:	f107 0318 	add.w	r3, r7, #24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 f82e 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089f8:	e007      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089fe:	e004      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a04:	e001      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3740      	adds	r7, #64	; 0x40
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	58024400 	.word	0x58024400
 8008a18:	03d09000 	.word	0x03d09000
 8008a1c:	003d0900 	.word	0x003d0900
 8008a20:	017d7840 	.word	0x017d7840

08008a24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a28:	f7fe fb8e 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	091b      	lsrs	r3, r3, #4
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	4904      	ldr	r1, [pc, #16]	; (8008a4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a3a:	5ccb      	ldrb	r3, [r1, r3]
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	0800b668 	.word	0x0800b668

08008a50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a58:	4ba1      	ldr	r3, [pc, #644]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008a62:	4b9f      	ldr	r3, [pc, #636]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	0b1b      	lsrs	r3, r3, #12
 8008a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a6e:	4b9c      	ldr	r3, [pc, #624]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	091b      	lsrs	r3, r3, #4
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008a7a:	4b99      	ldr	r3, [pc, #612]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7e:	08db      	lsrs	r3, r3, #3
 8008a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8111 	beq.w	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	f000 8083 	beq.w	8008bac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	f200 80a1 	bhi.w	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d056      	beq.n	8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008aba:	e099      	b.n	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008abc:	4b88      	ldr	r3, [pc, #544]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d02d      	beq.n	8008b24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ac8:	4b85      	ldr	r3, [pc, #532]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	08db      	lsrs	r3, r3, #3
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	4a84      	ldr	r2, [pc, #528]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	ee07 3a90 	vmov	s15, r3
 8008ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af2:	4b7b      	ldr	r3, [pc, #492]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b22:	e087      	b.n	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	4b6a      	ldr	r3, [pc, #424]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b66:	e065      	b.n	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7a:	4b59      	ldr	r3, [pc, #356]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008baa:	e043      	b.n	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b48      	ldr	r3, [pc, #288]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bee:	e021      	b.n	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c02:	4b37      	ldr	r3, [pc, #220]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008c34:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c38:	0a5b      	lsrs	r3, r3, #9
 8008c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c5a:	ee17 2a90 	vmov	r2, s15
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008c62:	4b1f      	ldr	r3, [pc, #124]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c66:	0c1b      	lsrs	r3, r3, #16
 8008c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6c:	ee07 3a90 	vmov	s15, r3
 8008c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c88:	ee17 2a90 	vmov	r2, s15
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008c90:	4b13      	ldr	r3, [pc, #76]	; (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	0e1b      	lsrs	r3, r3, #24
 8008c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb6:	ee17 2a90 	vmov	r2, s15
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	609a      	str	r2, [r3, #8]
}
 8008cd2:	bf00      	nop
 8008cd4:	3724      	adds	r7, #36	; 0x24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	03d09000 	.word	0x03d09000
 8008ce8:	46000000 	.word	0x46000000
 8008cec:	4c742400 	.word	0x4c742400
 8008cf0:	4a742400 	.word	0x4a742400
 8008cf4:	4bbebc20 	.word	0x4bbebc20

08008cf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b089      	sub	sp, #36	; 0x24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d00:	4ba1      	ldr	r3, [pc, #644]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008d0a:	4b9f      	ldr	r3, [pc, #636]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	0d1b      	lsrs	r3, r3, #20
 8008d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d16:	4b9c      	ldr	r3, [pc, #624]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	0a1b      	lsrs	r3, r3, #8
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d22:	4b99      	ldr	r3, [pc, #612]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d26:	08db      	lsrs	r3, r3, #3
 8008d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	fb02 f303 	mul.w	r3, r2, r3
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 8111 	beq.w	8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	f000 8083 	beq.w	8008e54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	f200 80a1 	bhi.w	8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d056      	beq.n	8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d62:	e099      	b.n	8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d64:	4b88      	ldr	r3, [pc, #544]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0320 	and.w	r3, r3, #32
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d02d      	beq.n	8008dcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d70:	4b85      	ldr	r3, [pc, #532]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	08db      	lsrs	r3, r3, #3
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	4a84      	ldr	r2, [pc, #528]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d80:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	ee07 3a90 	vmov	s15, r3
 8008d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9a:	4b7b      	ldr	r3, [pc, #492]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008dca:	e087      	b.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dde:	4b6a      	ldr	r3, [pc, #424]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e0e:	e065      	b.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e22:	4b59      	ldr	r3, [pc, #356]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e52:	e043      	b.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e66:	4b48      	ldr	r3, [pc, #288]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e96:	e021      	b.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eaa:	4b37      	ldr	r3, [pc, #220]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ebe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008edc:	4b2a      	ldr	r3, [pc, #168]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	0a5b      	lsrs	r3, r3, #9
 8008ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee6:	ee07 3a90 	vmov	s15, r3
 8008eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f02:	ee17 2a90 	vmov	r2, s15
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f0a:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	0c1b      	lsrs	r3, r3, #16
 8008f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f14:	ee07 3a90 	vmov	s15, r3
 8008f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f30:	ee17 2a90 	vmov	r2, s15
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008f38:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3c:	0e1b      	lsrs	r3, r3, #24
 8008f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f5e:	ee17 2a90 	vmov	r2, s15
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f66:	e008      	b.n	8008f7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	609a      	str	r2, [r3, #8]
}
 8008f7a:	bf00      	nop
 8008f7c:	3724      	adds	r7, #36	; 0x24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	58024400 	.word	0x58024400
 8008f8c:	03d09000 	.word	0x03d09000
 8008f90:	46000000 	.word	0x46000000
 8008f94:	4c742400 	.word	0x4c742400
 8008f98:	4a742400 	.word	0x4a742400
 8008f9c:	4bbebc20 	.word	0x4bbebc20

08008fa0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b089      	sub	sp, #36	; 0x24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa8:	4ba0      	ldr	r3, [pc, #640]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	f003 0303 	and.w	r3, r3, #3
 8008fb0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008fb2:	4b9e      	ldr	r3, [pc, #632]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	091b      	lsrs	r3, r3, #4
 8008fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fbc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008fbe:	4b9b      	ldr	r3, [pc, #620]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008fc8:	4b98      	ldr	r3, [pc, #608]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fcc:	08db      	lsrs	r3, r3, #3
 8008fce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8111 	beq.w	800920e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	f000 8083 	beq.w	80090fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	f200 80a1 	bhi.w	800913e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d056      	beq.n	80090b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009008:	e099      	b.n	800913e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900a:	4b88      	ldr	r3, [pc, #544]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d02d      	beq.n	8009072 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009016:	4b85      	ldr	r3, [pc, #532]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	08db      	lsrs	r3, r3, #3
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	4a83      	ldr	r2, [pc, #524]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009022:	fa22 f303 	lsr.w	r3, r2, r3
 8009026:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	ee07 3a90 	vmov	s15, r3
 8009038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009040:	4b7a      	ldr	r3, [pc, #488]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009048:	ee07 3a90 	vmov	s15, r3
 800904c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009050:	ed97 6a03 	vldr	s12, [r7, #12]
 8009054:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009234 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800905c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009070:	e087      	b.n	8009182 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	ee07 3a90 	vmov	s15, r3
 8009078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009084:	4b69      	ldr	r3, [pc, #420]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908c:	ee07 3a90 	vmov	s15, r3
 8009090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009094:	ed97 6a03 	vldr	s12, [r7, #12]
 8009098:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009234 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800909c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090b4:	e065      	b.n	8009182 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	ee07 3a90 	vmov	s15, r3
 80090bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800923c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80090c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c8:	4b58      	ldr	r3, [pc, #352]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80090dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009234 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090f8:	e043      	b.n	8009182 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009104:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009240 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910c:	4b47      	ldr	r3, [pc, #284]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009114:	ee07 3a90 	vmov	s15, r3
 8009118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009120:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009234 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800913c:	e021      	b.n	8009182 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009148:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800914c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009150:	4b36      	ldr	r3, [pc, #216]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009158:	ee07 3a90 	vmov	s15, r3
 800915c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009160:	ed97 6a03 	vldr	s12, [r7, #12]
 8009164:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009234 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009180:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009182:	4b2a      	ldr	r3, [pc, #168]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	0a5b      	lsrs	r3, r3, #9
 8009188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918c:	ee07 3a90 	vmov	s15, r3
 8009190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800919c:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a8:	ee17 2a90 	vmov	r2, s15
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b4:	0c1b      	lsrs	r3, r3, #16
 80091b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d6:	ee17 2a90 	vmov	r2, s15
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80091de:	4b13      	ldr	r3, [pc, #76]	; (800922c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	0e1b      	lsrs	r3, r3, #24
 80091e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e8:	ee07 3a90 	vmov	s15, r3
 80091ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009204:	ee17 2a90 	vmov	r2, s15
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800920c:	e008      	b.n	8009220 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	609a      	str	r2, [r3, #8]
}
 8009220:	bf00      	nop
 8009222:	3724      	adds	r7, #36	; 0x24
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	58024400 	.word	0x58024400
 8009230:	03d09000 	.word	0x03d09000
 8009234:	46000000 	.word	0x46000000
 8009238:	4c742400 	.word	0x4c742400
 800923c:	4a742400 	.word	0x4a742400
 8009240:	4bbebc20 	.word	0x4bbebc20

08009244 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009252:	4b53      	ldr	r3, [pc, #332]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	2b03      	cmp	r3, #3
 800925c:	d101      	bne.n	8009262 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e099      	b.n	8009396 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009262:	4b4f      	ldr	r3, [pc, #316]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a4e      	ldr	r2, [pc, #312]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009268:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800926c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800926e:	f7f8 f93b 	bl	80014e8 <HAL_GetTick>
 8009272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009274:	e008      	b.n	8009288 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009276:	f7f8 f937 	bl	80014e8 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d901      	bls.n	8009288 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e086      	b.n	8009396 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009288:	4b45      	ldr	r3, [pc, #276]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1f0      	bne.n	8009276 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009294:	4b42      	ldr	r3, [pc, #264]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	031b      	lsls	r3, r3, #12
 80092a2:	493f      	ldr	r1, [pc, #252]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	628b      	str	r3, [r1, #40]	; 0x28
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	025b      	lsls	r3, r3, #9
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	431a      	orrs	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	041b      	lsls	r3, r3, #16
 80092c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	061b      	lsls	r3, r3, #24
 80092d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092d8:	4931      	ldr	r1, [pc, #196]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092de:	4b30      	ldr	r3, [pc, #192]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	492d      	ldr	r1, [pc, #180]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092f0:	4b2b      	ldr	r3, [pc, #172]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	f023 0220 	bic.w	r2, r3, #32
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	4928      	ldr	r1, [pc, #160]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009302:	4b27      	ldr	r3, [pc, #156]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009306:	4a26      	ldr	r2, [pc, #152]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009308:	f023 0310 	bic.w	r3, r3, #16
 800930c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800930e:	4b24      	ldr	r3, [pc, #144]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009312:	4b24      	ldr	r3, [pc, #144]	; (80093a4 <RCCEx_PLL2_Config+0x160>)
 8009314:	4013      	ands	r3, r2
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	69d2      	ldr	r2, [r2, #28]
 800931a:	00d2      	lsls	r2, r2, #3
 800931c:	4920      	ldr	r1, [pc, #128]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 800931e:	4313      	orrs	r3, r2
 8009320:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009322:	4b1f      	ldr	r3, [pc, #124]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	4a1e      	ldr	r2, [pc, #120]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009328:	f043 0310 	orr.w	r3, r3, #16
 800932c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009334:	4b1a      	ldr	r3, [pc, #104]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	4a19      	ldr	r2, [pc, #100]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 800933a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800933e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009340:	e00f      	b.n	8009362 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d106      	bne.n	8009356 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009348:	4b15      	ldr	r3, [pc, #84]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	4a14      	ldr	r2, [pc, #80]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 800934e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009352:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009354:	e005      	b.n	8009362 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009356:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935a:	4a11      	ldr	r2, [pc, #68]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 800935c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009360:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009362:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a0e      	ldr	r2, [pc, #56]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 8009368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800936c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800936e:	f7f8 f8bb 	bl	80014e8 <HAL_GetTick>
 8009372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009374:	e008      	b.n	8009388 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009376:	f7f8 f8b7 	bl	80014e8 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d901      	bls.n	8009388 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e006      	b.n	8009396 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009388:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <RCCEx_PLL2_Config+0x15c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0f0      	beq.n	8009376 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	58024400 	.word	0x58024400
 80093a4:	ffff0007 	.word	0xffff0007

080093a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093b6:	4b53      	ldr	r3, [pc, #332]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d101      	bne.n	80093c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e099      	b.n	80094fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093c6:	4b4f      	ldr	r3, [pc, #316]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a4e      	ldr	r2, [pc, #312]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80093cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093d2:	f7f8 f889 	bl	80014e8 <HAL_GetTick>
 80093d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093d8:	e008      	b.n	80093ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80093da:	f7f8 f885 	bl	80014e8 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e086      	b.n	80094fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093ec:	4b45      	ldr	r3, [pc, #276]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f0      	bne.n	80093da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093f8:	4b42      	ldr	r3, [pc, #264]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	051b      	lsls	r3, r3, #20
 8009406:	493f      	ldr	r1, [pc, #252]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009408:	4313      	orrs	r3, r2
 800940a:	628b      	str	r3, [r1, #40]	; 0x28
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	3b01      	subs	r3, #1
 8009412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	3b01      	subs	r3, #1
 800941c:	025b      	lsls	r3, r3, #9
 800941e:	b29b      	uxth	r3, r3
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	3b01      	subs	r3, #1
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800942e:	431a      	orrs	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	3b01      	subs	r3, #1
 8009436:	061b      	lsls	r3, r3, #24
 8009438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800943c:	4931      	ldr	r1, [pc, #196]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009442:	4b30      	ldr	r3, [pc, #192]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	492d      	ldr	r1, [pc, #180]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009450:	4313      	orrs	r3, r2
 8009452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009454:	4b2b      	ldr	r3, [pc, #172]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	4928      	ldr	r1, [pc, #160]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009462:	4313      	orrs	r3, r2
 8009464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009466:	4b27      	ldr	r3, [pc, #156]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	4a26      	ldr	r2, [pc, #152]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 800946c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009472:	4b24      	ldr	r3, [pc, #144]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009476:	4b24      	ldr	r3, [pc, #144]	; (8009508 <RCCEx_PLL3_Config+0x160>)
 8009478:	4013      	ands	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	69d2      	ldr	r2, [r2, #28]
 800947e:	00d2      	lsls	r2, r2, #3
 8009480:	4920      	ldr	r1, [pc, #128]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009482:	4313      	orrs	r3, r2
 8009484:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009486:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948a:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 800948c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	4a19      	ldr	r2, [pc, #100]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 800949e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094a4:	e00f      	b.n	80094c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d106      	bne.n	80094ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094ac:	4b15      	ldr	r3, [pc, #84]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a14      	ldr	r2, [pc, #80]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80094b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094b8:	e005      	b.n	80094c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094ba:	4b12      	ldr	r3, [pc, #72]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80094bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094be:	4a11      	ldr	r2, [pc, #68]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80094c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a0e      	ldr	r2, [pc, #56]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80094cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d2:	f7f8 f809 	bl	80014e8 <HAL_GetTick>
 80094d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094d8:	e008      	b.n	80094ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094da:	f7f8 f805 	bl	80014e8 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e006      	b.n	80094fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <RCCEx_PLL3_Config+0x15c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0f0      	beq.n	80094da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	58024400 	.word	0x58024400
 8009508:	ffff0007 	.word	0xffff0007

0800950c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e042      	b.n	80095a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009524:	2b00      	cmp	r3, #0
 8009526:	d106      	bne.n	8009536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7f7 fec3 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2224      	movs	r2, #36	; 0x24
 800953a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0201 	bic.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f8c2 	bl	80096d8 <UART_SetConfig>
 8009554:	4603      	mov	r3, r0
 8009556:	2b01      	cmp	r3, #1
 8009558:	d101      	bne.n	800955e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e022      	b.n	80095a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fe16 	bl	800a198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685a      	ldr	r2, [r3, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800957a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800958a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0201 	orr.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fe9d 	bl	800a2dc <UART_CheckIdleState>
 80095a2:	4603      	mov	r3, r0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08a      	sub	sp, #40	; 0x28
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	4613      	mov	r3, r2
 80095ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	f040 8083 	bne.w	80096ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <HAL_UART_Transmit+0x28>
 80095ce:	88fb      	ldrh	r3, [r7, #6]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e07b      	b.n	80096d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Transmit+0x3a>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e074      	b.n	80096d0 <HAL_UART_Transmit+0x124>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2221      	movs	r2, #33	; 0x21
 80095fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095fe:	f7f7 ff73 	bl	80014e8 <HAL_GetTick>
 8009602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	88fa      	ldrh	r2, [r7, #6]
 8009608:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	88fa      	ldrh	r2, [r7, #6]
 8009610:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961c:	d108      	bne.n	8009630 <HAL_UART_Transmit+0x84>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e003      	b.n	8009638 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009634:	2300      	movs	r3, #0
 8009636:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009640:	e02c      	b.n	800969c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2200      	movs	r2, #0
 800964a:	2180      	movs	r1, #128	; 0x80
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 fe90 	bl	800a372 <UART_WaitOnFlagUntilTimeout>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e039      	b.n	80096d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009670:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	3302      	adds	r3, #2
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	e007      	b.n	800968a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	781a      	ldrb	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	3301      	adds	r3, #1
 8009688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1cc      	bne.n	8009642 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2200      	movs	r2, #0
 80096b0:	2140      	movs	r1, #64	; 0x40
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fe5d 	bl	800a372 <UART_WaitOnFlagUntilTimeout>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e006      	b.n	80096d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e000      	b.n	80096d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80096ce:	2302      	movs	r3, #2
  }
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3720      	adds	r7, #32
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096d8:	b5b0      	push	{r4, r5, r7, lr}
 80096da:	b08e      	sub	sp, #56	; 0x38
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	431a      	orrs	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4bbf      	ldr	r3, [pc, #764]	; (8009a04 <UART_SetConfig+0x32c>)
 8009706:	4013      	ands	r3, r2
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800970e:	430b      	orrs	r3, r1
 8009710:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	430a      	orrs	r2, r1
 8009726:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4ab5      	ldr	r2, [pc, #724]	; (8009a08 <UART_SetConfig+0x330>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800973e:	4313      	orrs	r3, r2
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	4bb0      	ldr	r3, [pc, #704]	; (8009a0c <UART_SetConfig+0x334>)
 800974a:	4013      	ands	r3, r2
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6812      	ldr	r2, [r2, #0]
 8009750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009752:	430b      	orrs	r3, r1
 8009754:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	f023 010f 	bic.w	r1, r3, #15
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4aa7      	ldr	r2, [pc, #668]	; (8009a10 <UART_SetConfig+0x338>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d176      	bne.n	8009864 <UART_SetConfig+0x18c>
 8009776:	4ba7      	ldr	r3, [pc, #668]	; (8009a14 <UART_SetConfig+0x33c>)
 8009778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800977e:	2b28      	cmp	r3, #40	; 0x28
 8009780:	d86c      	bhi.n	800985c <UART_SetConfig+0x184>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <UART_SetConfig+0xb0>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	0800982d 	.word	0x0800982d
 800978c:	0800985d 	.word	0x0800985d
 8009790:	0800985d 	.word	0x0800985d
 8009794:	0800985d 	.word	0x0800985d
 8009798:	0800985d 	.word	0x0800985d
 800979c:	0800985d 	.word	0x0800985d
 80097a0:	0800985d 	.word	0x0800985d
 80097a4:	0800985d 	.word	0x0800985d
 80097a8:	08009835 	.word	0x08009835
 80097ac:	0800985d 	.word	0x0800985d
 80097b0:	0800985d 	.word	0x0800985d
 80097b4:	0800985d 	.word	0x0800985d
 80097b8:	0800985d 	.word	0x0800985d
 80097bc:	0800985d 	.word	0x0800985d
 80097c0:	0800985d 	.word	0x0800985d
 80097c4:	0800985d 	.word	0x0800985d
 80097c8:	0800983d 	.word	0x0800983d
 80097cc:	0800985d 	.word	0x0800985d
 80097d0:	0800985d 	.word	0x0800985d
 80097d4:	0800985d 	.word	0x0800985d
 80097d8:	0800985d 	.word	0x0800985d
 80097dc:	0800985d 	.word	0x0800985d
 80097e0:	0800985d 	.word	0x0800985d
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	08009845 	.word	0x08009845
 80097ec:	0800985d 	.word	0x0800985d
 80097f0:	0800985d 	.word	0x0800985d
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	0800985d 	.word	0x0800985d
 80097fc:	0800985d 	.word	0x0800985d
 8009800:	0800985d 	.word	0x0800985d
 8009804:	0800985d 	.word	0x0800985d
 8009808:	0800984d 	.word	0x0800984d
 800980c:	0800985d 	.word	0x0800985d
 8009810:	0800985d 	.word	0x0800985d
 8009814:	0800985d 	.word	0x0800985d
 8009818:	0800985d 	.word	0x0800985d
 800981c:	0800985d 	.word	0x0800985d
 8009820:	0800985d 	.word	0x0800985d
 8009824:	0800985d 	.word	0x0800985d
 8009828:	08009855 	.word	0x08009855
 800982c:	2301      	movs	r3, #1
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009832:	e222      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983a:	e21e      	b.n	8009c7a <UART_SetConfig+0x5a2>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009842:	e21a      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984a:	e216      	b.n	8009c7a <UART_SetConfig+0x5a2>
 800984c:	2320      	movs	r3, #32
 800984e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009852:	e212      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985a:	e20e      	b.n	8009c7a <UART_SetConfig+0x5a2>
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009862:	e20a      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a6b      	ldr	r2, [pc, #428]	; (8009a18 <UART_SetConfig+0x340>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d130      	bne.n	80098d0 <UART_SetConfig+0x1f8>
 800986e:	4b69      	ldr	r3, [pc, #420]	; (8009a14 <UART_SetConfig+0x33c>)
 8009870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b05      	cmp	r3, #5
 8009878:	d826      	bhi.n	80098c8 <UART_SetConfig+0x1f0>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <UART_SetConfig+0x1a8>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	08009899 	.word	0x08009899
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098a9 	.word	0x080098a9
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	2300      	movs	r3, #0
 800989a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989e:	e1ec      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80098a0:	2304      	movs	r3, #4
 80098a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a6:	e1e8      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80098a8:	2308      	movs	r3, #8
 80098aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ae:	e1e4      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80098b0:	2310      	movs	r3, #16
 80098b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b6:	e1e0      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80098b8:	2320      	movs	r3, #32
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e1dc      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80098c0:	2340      	movs	r3, #64	; 0x40
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e1d8      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e1d4      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a51      	ldr	r2, [pc, #324]	; (8009a1c <UART_SetConfig+0x344>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d130      	bne.n	800993c <UART_SetConfig+0x264>
 80098da:	4b4e      	ldr	r3, [pc, #312]	; (8009a14 <UART_SetConfig+0x33c>)
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b05      	cmp	r3, #5
 80098e4:	d826      	bhi.n	8009934 <UART_SetConfig+0x25c>
 80098e6:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <UART_SetConfig+0x214>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009905 	.word	0x08009905
 80098f0:	0800990d 	.word	0x0800990d
 80098f4:	08009915 	.word	0x08009915
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	08009925 	.word	0x08009925
 8009900:	0800992d 	.word	0x0800992d
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990a:	e1b6      	b.n	8009c7a <UART_SetConfig+0x5a2>
 800990c:	2304      	movs	r3, #4
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e1b2      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009914:	2308      	movs	r3, #8
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e1ae      	b.n	8009c7a <UART_SetConfig+0x5a2>
 800991c:	2310      	movs	r3, #16
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	e1aa      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009924:	2320      	movs	r3, #32
 8009926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992a:	e1a6      	b.n	8009c7a <UART_SetConfig+0x5a2>
 800992c:	2340      	movs	r3, #64	; 0x40
 800992e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009932:	e1a2      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993a:	e19e      	b.n	8009c7a <UART_SetConfig+0x5a2>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a37      	ldr	r2, [pc, #220]	; (8009a20 <UART_SetConfig+0x348>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d130      	bne.n	80099a8 <UART_SetConfig+0x2d0>
 8009946:	4b33      	ldr	r3, [pc, #204]	; (8009a14 <UART_SetConfig+0x33c>)
 8009948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	2b05      	cmp	r3, #5
 8009950:	d826      	bhi.n	80099a0 <UART_SetConfig+0x2c8>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <UART_SetConfig+0x280>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	08009971 	.word	0x08009971
 800995c:	08009979 	.word	0x08009979
 8009960:	08009981 	.word	0x08009981
 8009964:	08009989 	.word	0x08009989
 8009968:	08009991 	.word	0x08009991
 800996c:	08009999 	.word	0x08009999
 8009970:	2300      	movs	r3, #0
 8009972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009976:	e180      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997e:	e17c      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009986:	e178      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998e:	e174      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009990:	2320      	movs	r3, #32
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e170      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e16c      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e168      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a1d      	ldr	r2, [pc, #116]	; (8009a24 <UART_SetConfig+0x34c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d142      	bne.n	8009a38 <UART_SetConfig+0x360>
 80099b2:	4b18      	ldr	r3, [pc, #96]	; (8009a14 <UART_SetConfig+0x33c>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d838      	bhi.n	8009a30 <UART_SetConfig+0x358>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x2ec>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099dd 	.word	0x080099dd
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099ed 	.word	0x080099ed
 80099d0:	080099f5 	.word	0x080099f5
 80099d4:	080099fd 	.word	0x080099fd
 80099d8:	08009a29 	.word	0x08009a29
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e14a      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80099e4:	2304      	movs	r3, #4
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e146      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80099ec:	2308      	movs	r3, #8
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f2:	e142      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80099f4:	2310      	movs	r3, #16
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e13e      	b.n	8009c7a <UART_SetConfig+0x5a2>
 80099fc:	2320      	movs	r3, #32
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e13a      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009a04:	cfff69f3 	.word	0xcfff69f3
 8009a08:	58000c00 	.word	0x58000c00
 8009a0c:	11fff4ff 	.word	0x11fff4ff
 8009a10:	40011000 	.word	0x40011000
 8009a14:	58024400 	.word	0x58024400
 8009a18:	40004400 	.word	0x40004400
 8009a1c:	40004800 	.word	0x40004800
 8009a20:	40004c00 	.word	0x40004c00
 8009a24:	40005000 	.word	0x40005000
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2e:	e124      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a36:	e120      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4acc      	ldr	r2, [pc, #816]	; (8009d70 <UART_SetConfig+0x698>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d176      	bne.n	8009b30 <UART_SetConfig+0x458>
 8009a42:	4bcc      	ldr	r3, [pc, #816]	; (8009d74 <UART_SetConfig+0x69c>)
 8009a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a4a:	2b28      	cmp	r3, #40	; 0x28
 8009a4c:	d86c      	bhi.n	8009b28 <UART_SetConfig+0x450>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <UART_SetConfig+0x37c>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009af9 	.word	0x08009af9
 8009a58:	08009b29 	.word	0x08009b29
 8009a5c:	08009b29 	.word	0x08009b29
 8009a60:	08009b29 	.word	0x08009b29
 8009a64:	08009b29 	.word	0x08009b29
 8009a68:	08009b29 	.word	0x08009b29
 8009a6c:	08009b29 	.word	0x08009b29
 8009a70:	08009b29 	.word	0x08009b29
 8009a74:	08009b01 	.word	0x08009b01
 8009a78:	08009b29 	.word	0x08009b29
 8009a7c:	08009b29 	.word	0x08009b29
 8009a80:	08009b29 	.word	0x08009b29
 8009a84:	08009b29 	.word	0x08009b29
 8009a88:	08009b29 	.word	0x08009b29
 8009a8c:	08009b29 	.word	0x08009b29
 8009a90:	08009b29 	.word	0x08009b29
 8009a94:	08009b09 	.word	0x08009b09
 8009a98:	08009b29 	.word	0x08009b29
 8009a9c:	08009b29 	.word	0x08009b29
 8009aa0:	08009b29 	.word	0x08009b29
 8009aa4:	08009b29 	.word	0x08009b29
 8009aa8:	08009b29 	.word	0x08009b29
 8009aac:	08009b29 	.word	0x08009b29
 8009ab0:	08009b29 	.word	0x08009b29
 8009ab4:	08009b11 	.word	0x08009b11
 8009ab8:	08009b29 	.word	0x08009b29
 8009abc:	08009b29 	.word	0x08009b29
 8009ac0:	08009b29 	.word	0x08009b29
 8009ac4:	08009b29 	.word	0x08009b29
 8009ac8:	08009b29 	.word	0x08009b29
 8009acc:	08009b29 	.word	0x08009b29
 8009ad0:	08009b29 	.word	0x08009b29
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b29 	.word	0x08009b29
 8009adc:	08009b29 	.word	0x08009b29
 8009ae0:	08009b29 	.word	0x08009b29
 8009ae4:	08009b29 	.word	0x08009b29
 8009ae8:	08009b29 	.word	0x08009b29
 8009aec:	08009b29 	.word	0x08009b29
 8009af0:	08009b29 	.word	0x08009b29
 8009af4:	08009b21 	.word	0x08009b21
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e0bc      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	e0b8      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0e:	e0b4      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b10:	2310      	movs	r3, #16
 8009b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b16:	e0b0      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b18:	2320      	movs	r3, #32
 8009b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1e:	e0ac      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b26:	e0a8      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b28:	2380      	movs	r3, #128	; 0x80
 8009b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2e:	e0a4      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a90      	ldr	r2, [pc, #576]	; (8009d78 <UART_SetConfig+0x6a0>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d130      	bne.n	8009b9c <UART_SetConfig+0x4c4>
 8009b3a:	4b8e      	ldr	r3, [pc, #568]	; (8009d74 <UART_SetConfig+0x69c>)
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d826      	bhi.n	8009b94 <UART_SetConfig+0x4bc>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <UART_SetConfig+0x474>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b6d 	.word	0x08009b6d
 8009b54:	08009b75 	.word	0x08009b75
 8009b58:	08009b7d 	.word	0x08009b7d
 8009b5c:	08009b85 	.word	0x08009b85
 8009b60:	08009b8d 	.word	0x08009b8d
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e086      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e082      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e07e      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	e07a      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b84:	2320      	movs	r3, #32
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e076      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	e072      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b94:	2380      	movs	r3, #128	; 0x80
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e06e      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a76      	ldr	r2, [pc, #472]	; (8009d7c <UART_SetConfig+0x6a4>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d130      	bne.n	8009c08 <UART_SetConfig+0x530>
 8009ba6:	4b73      	ldr	r3, [pc, #460]	; (8009d74 <UART_SetConfig+0x69c>)
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d826      	bhi.n	8009c00 <UART_SetConfig+0x528>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0x4e0>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bd1 	.word	0x08009bd1
 8009bbc:	08009bd9 	.word	0x08009bd9
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009be9 	.word	0x08009be9
 8009bc8:	08009bf1 	.word	0x08009bf1
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd6:	e050      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bde:	e04c      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be6:	e048      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bee:	e044      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf6:	e040      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009bf8:	2340      	movs	r3, #64	; 0x40
 8009bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfe:	e03c      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c06:	e038      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a5c      	ldr	r2, [pc, #368]	; (8009d80 <UART_SetConfig+0x6a8>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d130      	bne.n	8009c74 <UART_SetConfig+0x59c>
 8009c12:	4b58      	ldr	r3, [pc, #352]	; (8009d74 <UART_SetConfig+0x69c>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	d826      	bhi.n	8009c6c <UART_SetConfig+0x594>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x54c>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e01a      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e016      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	e012      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5a:	e00e      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e00a      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e006      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e002      	b.n	8009c7a <UART_SetConfig+0x5a2>
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a40      	ldr	r2, [pc, #256]	; (8009d80 <UART_SetConfig+0x6a8>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	f040 80ef 	bne.w	8009e64 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	dc46      	bgt.n	8009d1c <UART_SetConfig+0x644>
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	f2c0 8081 	blt.w	8009d96 <UART_SetConfig+0x6be>
 8009c94:	3b02      	subs	r3, #2
 8009c96:	2b1e      	cmp	r3, #30
 8009c98:	d87d      	bhi.n	8009d96 <UART_SetConfig+0x6be>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0x5c8>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009d23 	.word	0x08009d23
 8009ca4:	08009d97 	.word	0x08009d97
 8009ca8:	08009d2b 	.word	0x08009d2b
 8009cac:	08009d97 	.word	0x08009d97
 8009cb0:	08009d97 	.word	0x08009d97
 8009cb4:	08009d97 	.word	0x08009d97
 8009cb8:	08009d3b 	.word	0x08009d3b
 8009cbc:	08009d97 	.word	0x08009d97
 8009cc0:	08009d97 	.word	0x08009d97
 8009cc4:	08009d97 	.word	0x08009d97
 8009cc8:	08009d97 	.word	0x08009d97
 8009ccc:	08009d97 	.word	0x08009d97
 8009cd0:	08009d97 	.word	0x08009d97
 8009cd4:	08009d97 	.word	0x08009d97
 8009cd8:	08009d4b 	.word	0x08009d4b
 8009cdc:	08009d97 	.word	0x08009d97
 8009ce0:	08009d97 	.word	0x08009d97
 8009ce4:	08009d97 	.word	0x08009d97
 8009ce8:	08009d97 	.word	0x08009d97
 8009cec:	08009d97 	.word	0x08009d97
 8009cf0:	08009d97 	.word	0x08009d97
 8009cf4:	08009d97 	.word	0x08009d97
 8009cf8:	08009d97 	.word	0x08009d97
 8009cfc:	08009d97 	.word	0x08009d97
 8009d00:	08009d97 	.word	0x08009d97
 8009d04:	08009d97 	.word	0x08009d97
 8009d08:	08009d97 	.word	0x08009d97
 8009d0c:	08009d97 	.word	0x08009d97
 8009d10:	08009d97 	.word	0x08009d97
 8009d14:	08009d97 	.word	0x08009d97
 8009d18:	08009d89 	.word	0x08009d89
 8009d1c:	2b40      	cmp	r3, #64	; 0x40
 8009d1e:	d036      	beq.n	8009d8e <UART_SetConfig+0x6b6>
 8009d20:	e039      	b.n	8009d96 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d22:	f7fe fe7f 	bl	8008a24 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d28:	e03b      	b.n	8009da2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d2a:	f107 0314 	add.w	r3, r7, #20
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe fe8e 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d38:	e033      	b.n	8009da2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d3a:	f107 0308 	add.w	r3, r7, #8
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe ffda 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d48:	e02b      	b.n	8009da2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <UART_SetConfig+0x69c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d56:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <UART_SetConfig+0x69c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	08db      	lsrs	r3, r3, #3
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	4a08      	ldr	r2, [pc, #32]	; (8009d84 <UART_SetConfig+0x6ac>)
 8009d62:	fa22 f303 	lsr.w	r3, r2, r3
 8009d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d68:	e01b      	b.n	8009da2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <UART_SetConfig+0x6ac>)
 8009d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d6e:	e018      	b.n	8009da2 <UART_SetConfig+0x6ca>
 8009d70:	40011400 	.word	0x40011400
 8009d74:	58024400 	.word	0x58024400
 8009d78:	40007800 	.word	0x40007800
 8009d7c:	40007c00 	.word	0x40007c00
 8009d80:	58000c00 	.word	0x58000c00
 8009d84:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d88:	4bc4      	ldr	r3, [pc, #784]	; (800a09c <UART_SetConfig+0x9c4>)
 8009d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d8c:	e009      	b.n	8009da2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d94:	e005      	b.n	8009da2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009da0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 81da 	beq.w	800a15e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	4abc      	ldr	r2, [pc, #752]	; (800a0a0 <UART_SetConfig+0x9c8>)
 8009db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009db4:	461a      	mov	r2, r3
 8009db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dbc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	4413      	add	r3, r2
 8009dc8:	6a3a      	ldr	r2, [r7, #32]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d305      	bcc.n	8009dda <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dd4:	6a3a      	ldr	r2, [r7, #32]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d903      	bls.n	8009de2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009de0:	e1bd      	b.n	800a15e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	4618      	mov	r0, r3
 8009de6:	f04f 0100 	mov.w	r1, #0
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	4aac      	ldr	r2, [pc, #688]	; (800a0a0 <UART_SetConfig+0x9c8>)
 8009df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	f04f 0300 	mov.w	r3, #0
 8009dfa:	f7f6 fac1 	bl	8000380 <__aeabi_uldivmod>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4610      	mov	r0, r2
 8009e04:	4619      	mov	r1, r3
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	020b      	lsls	r3, r1, #8
 8009e10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e14:	0202      	lsls	r2, r0, #8
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	6849      	ldr	r1, [r1, #4]
 8009e1a:	0849      	lsrs	r1, r1, #1
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	f04f 0100 	mov.w	r1, #0
 8009e22:	1814      	adds	r4, r2, r0
 8009e24:	eb43 0501 	adc.w	r5, r3, r1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f04f 0300 	mov.w	r3, #0
 8009e32:	4620      	mov	r0, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	f7f6 faa3 	bl	8000380 <__aeabi_uldivmod>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4613      	mov	r3, r2
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e48:	d308      	bcc.n	8009e5c <UART_SetConfig+0x784>
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e50:	d204      	bcs.n	8009e5c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	e180      	b.n	800a15e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e62:	e17c      	b.n	800a15e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e6c:	f040 80be 	bne.w	8009fec <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8009e70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	dc49      	bgt.n	8009f0c <UART_SetConfig+0x834>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	db7c      	blt.n	8009f76 <UART_SetConfig+0x89e>
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d87a      	bhi.n	8009f76 <UART_SetConfig+0x89e>
 8009e80:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <UART_SetConfig+0x7b0>)
 8009e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e86:	bf00      	nop
 8009e88:	08009f13 	.word	0x08009f13
 8009e8c:	08009f1b 	.word	0x08009f1b
 8009e90:	08009f77 	.word	0x08009f77
 8009e94:	08009f77 	.word	0x08009f77
 8009e98:	08009f23 	.word	0x08009f23
 8009e9c:	08009f77 	.word	0x08009f77
 8009ea0:	08009f77 	.word	0x08009f77
 8009ea4:	08009f77 	.word	0x08009f77
 8009ea8:	08009f33 	.word	0x08009f33
 8009eac:	08009f77 	.word	0x08009f77
 8009eb0:	08009f77 	.word	0x08009f77
 8009eb4:	08009f77 	.word	0x08009f77
 8009eb8:	08009f77 	.word	0x08009f77
 8009ebc:	08009f77 	.word	0x08009f77
 8009ec0:	08009f77 	.word	0x08009f77
 8009ec4:	08009f77 	.word	0x08009f77
 8009ec8:	08009f43 	.word	0x08009f43
 8009ecc:	08009f77 	.word	0x08009f77
 8009ed0:	08009f77 	.word	0x08009f77
 8009ed4:	08009f77 	.word	0x08009f77
 8009ed8:	08009f77 	.word	0x08009f77
 8009edc:	08009f77 	.word	0x08009f77
 8009ee0:	08009f77 	.word	0x08009f77
 8009ee4:	08009f77 	.word	0x08009f77
 8009ee8:	08009f77 	.word	0x08009f77
 8009eec:	08009f77 	.word	0x08009f77
 8009ef0:	08009f77 	.word	0x08009f77
 8009ef4:	08009f77 	.word	0x08009f77
 8009ef8:	08009f77 	.word	0x08009f77
 8009efc:	08009f77 	.word	0x08009f77
 8009f00:	08009f77 	.word	0x08009f77
 8009f04:	08009f77 	.word	0x08009f77
 8009f08:	08009f69 	.word	0x08009f69
 8009f0c:	2b40      	cmp	r3, #64	; 0x40
 8009f0e:	d02e      	beq.n	8009f6e <UART_SetConfig+0x896>
 8009f10:	e031      	b.n	8009f76 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f12:	f7fd f949 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 8009f16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f18:	e033      	b.n	8009f82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f1a:	f7fd f95b 	bl	80071d4 <HAL_RCC_GetPCLK2Freq>
 8009f1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f20:	e02f      	b.n	8009f82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f22:	f107 0314 	add.w	r3, r7, #20
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fd92 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f30:	e027      	b.n	8009f82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f32:	f107 0308 	add.w	r3, r7, #8
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fede 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f40:	e01f      	b.n	8009f82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f42:	4b58      	ldr	r3, [pc, #352]	; (800a0a4 <UART_SetConfig+0x9cc>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0320 	and.w	r3, r3, #32
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d009      	beq.n	8009f62 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f4e:	4b55      	ldr	r3, [pc, #340]	; (800a0a4 <UART_SetConfig+0x9cc>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	08db      	lsrs	r3, r3, #3
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	4a53      	ldr	r2, [pc, #332]	; (800a0a8 <UART_SetConfig+0x9d0>)
 8009f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f60:	e00f      	b.n	8009f82 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009f62:	4b51      	ldr	r3, [pc, #324]	; (800a0a8 <UART_SetConfig+0x9d0>)
 8009f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f66:	e00c      	b.n	8009f82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f68:	4b4c      	ldr	r3, [pc, #304]	; (800a09c <UART_SetConfig+0x9c4>)
 8009f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f6c:	e009      	b.n	8009f82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f74:	e005      	b.n	8009f82 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 80ea 	beq.w	800a15e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	4a44      	ldr	r2, [pc, #272]	; (800a0a0 <UART_SetConfig+0x9c8>)
 8009f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f94:	461a      	mov	r2, r3
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f9c:	005a      	lsls	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	085b      	lsrs	r3, r3, #1
 8009fa4:	441a      	add	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	2b0f      	cmp	r3, #15
 8009fb4:	d916      	bls.n	8009fe4 <UART_SetConfig+0x90c>
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbc:	d212      	bcs.n	8009fe4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f023 030f 	bic.w	r3, r3, #15
 8009fc6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	085b      	lsrs	r3, r3, #1
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009fe0:	60da      	str	r2, [r3, #12]
 8009fe2:	e0bc      	b.n	800a15e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fea:	e0b8      	b.n	800a15e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	dc4b      	bgt.n	800a08c <UART_SetConfig+0x9b4>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f2c0 8087 	blt.w	800a108 <UART_SetConfig+0xa30>
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	f200 8084 	bhi.w	800a108 <UART_SetConfig+0xa30>
 800a000:	a201      	add	r2, pc, #4	; (adr r2, 800a008 <UART_SetConfig+0x930>)
 800a002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a006:	bf00      	nop
 800a008:	0800a093 	.word	0x0800a093
 800a00c:	0800a0ad 	.word	0x0800a0ad
 800a010:	0800a109 	.word	0x0800a109
 800a014:	0800a109 	.word	0x0800a109
 800a018:	0800a0b5 	.word	0x0800a0b5
 800a01c:	0800a109 	.word	0x0800a109
 800a020:	0800a109 	.word	0x0800a109
 800a024:	0800a109 	.word	0x0800a109
 800a028:	0800a0c5 	.word	0x0800a0c5
 800a02c:	0800a109 	.word	0x0800a109
 800a030:	0800a109 	.word	0x0800a109
 800a034:	0800a109 	.word	0x0800a109
 800a038:	0800a109 	.word	0x0800a109
 800a03c:	0800a109 	.word	0x0800a109
 800a040:	0800a109 	.word	0x0800a109
 800a044:	0800a109 	.word	0x0800a109
 800a048:	0800a0d5 	.word	0x0800a0d5
 800a04c:	0800a109 	.word	0x0800a109
 800a050:	0800a109 	.word	0x0800a109
 800a054:	0800a109 	.word	0x0800a109
 800a058:	0800a109 	.word	0x0800a109
 800a05c:	0800a109 	.word	0x0800a109
 800a060:	0800a109 	.word	0x0800a109
 800a064:	0800a109 	.word	0x0800a109
 800a068:	0800a109 	.word	0x0800a109
 800a06c:	0800a109 	.word	0x0800a109
 800a070:	0800a109 	.word	0x0800a109
 800a074:	0800a109 	.word	0x0800a109
 800a078:	0800a109 	.word	0x0800a109
 800a07c:	0800a109 	.word	0x0800a109
 800a080:	0800a109 	.word	0x0800a109
 800a084:	0800a109 	.word	0x0800a109
 800a088:	0800a0fb 	.word	0x0800a0fb
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d037      	beq.n	800a100 <UART_SetConfig+0xa28>
 800a090:	e03a      	b.n	800a108 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a092:	f7fd f889 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 800a096:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a098:	e03c      	b.n	800a114 <UART_SetConfig+0xa3c>
 800a09a:	bf00      	nop
 800a09c:	003d0900 	.word	0x003d0900
 800a0a0:	0800b680 	.word	0x0800b680
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0ac:	f7fd f892 	bl	80071d4 <HAL_RCC_GetPCLK2Freq>
 800a0b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0b2:	e02f      	b.n	800a114 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0b4:	f107 0314 	add.w	r3, r7, #20
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fcc9 	bl	8008a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c2:	e027      	b.n	800a114 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fe fe15 	bl	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d2:	e01f      	b.n	800a114 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0d4:	4b2c      	ldr	r3, [pc, #176]	; (800a188 <UART_SetConfig+0xab0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d009      	beq.n	800a0f4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0e0:	4b29      	ldr	r3, [pc, #164]	; (800a188 <UART_SetConfig+0xab0>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	08db      	lsrs	r3, r3, #3
 800a0e6:	f003 0303 	and.w	r3, r3, #3
 800a0ea:	4a28      	ldr	r2, [pc, #160]	; (800a18c <UART_SetConfig+0xab4>)
 800a0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0f2:	e00f      	b.n	800a114 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a0f4:	4b25      	ldr	r3, [pc, #148]	; (800a18c <UART_SetConfig+0xab4>)
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0f8:	e00c      	b.n	800a114 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0fa:	4b25      	ldr	r3, [pc, #148]	; (800a190 <UART_SetConfig+0xab8>)
 800a0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0fe:	e009      	b.n	800a114 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a106:	e005      	b.n	800a114 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a112:	bf00      	nop
    }

    if (pclk != 0U)
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d021      	beq.n	800a15e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11e:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <UART_SetConfig+0xabc>)
 800a120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a124:	461a      	mov	r2, r3
 800a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a128:	fbb3 f2f2 	udiv	r2, r3, r2
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	441a      	add	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	2b0f      	cmp	r3, #15
 800a142:	d909      	bls.n	800a158 <UART_SetConfig+0xa80>
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14a:	d205      	bcs.n	800a158 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	b29a      	uxth	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60da      	str	r2, [r3, #12]
 800a156:	e002      	b.n	800a15e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a17a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3738      	adds	r7, #56	; 0x38
 800a182:	46bd      	mov	sp, r7
 800a184:	bdb0      	pop	{r4, r5, r7, pc}
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400
 800a18c:	03d09000 	.word	0x03d09000
 800a190:	003d0900 	.word	0x003d0900
 800a194:	0800b680 	.word	0x0800b680

0800a198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	f003 0304 	and.w	r3, r3, #4
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20a:	f003 0308 	and.w	r3, r3, #8
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00a      	beq.n	800a228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22c:	f003 0310 	and.w	r3, r3, #16
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00a      	beq.n	800a24a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01a      	beq.n	800a2ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	430a      	orrs	r2, r1
 800a28c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a296:	d10a      	bne.n	800a2ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	605a      	str	r2, [r3, #4]
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af02      	add	r7, sp, #8
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2ec:	f7f7 f8fc 	bl	80014e8 <HAL_GetTick>
 800a2f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0308 	and.w	r3, r3, #8
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d10e      	bne.n	800a31e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f82f 	bl	800a372 <UART_WaitOnFlagUntilTimeout>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e025      	b.n	800a36a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d10e      	bne.n	800a34a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a32c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f819 	bl	800a372 <UART_WaitOnFlagUntilTimeout>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e00f      	b.n	800a36a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2220      	movs	r2, #32
 800a356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b09c      	sub	sp, #112	; 0x70
 800a376:	af00      	add	r7, sp, #0
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	60b9      	str	r1, [r7, #8]
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	4613      	mov	r3, r2
 800a380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a382:	e0a9      	b.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	f000 80a5 	beq.w	800a4d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38e:	f7f7 f8ab 	bl	80014e8 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d302      	bcc.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a39e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d140      	bne.n	800a426 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a3c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a3d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e6      	bne.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3308      	adds	r3, #8
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	f023 0301 	bic.w	r3, r3, #1
 800a3ec:	663b      	str	r3, [r7, #96]	; 0x60
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3308      	adds	r3, #8
 800a3f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a3f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e5      	bne.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2220      	movs	r2, #32
 800a416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e069      	b.n	800a4fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d051      	beq.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a43e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a442:	d149      	bne.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a44c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	e853 3f00 	ldrex	r3, [r3]
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a462:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	461a      	mov	r2, r3
 800a46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46c:	637b      	str	r3, [r7, #52]	; 0x34
 800a46e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e6      	bne.n	800a44e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	613b      	str	r3, [r7, #16]
   return(result);
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	66bb      	str	r3, [r7, #104]	; 0x68
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3308      	adds	r3, #8
 800a49e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a4a0:	623a      	str	r2, [r7, #32]
 800a4a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	69f9      	ldr	r1, [r7, #28]
 800a4a6:	6a3a      	ldr	r2, [r7, #32]
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e5      	bne.n	800a480 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e010      	b.n	800a4fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	69da      	ldr	r2, [r3, #28]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	bf0c      	ite	eq
 800a4e8:	2301      	moveq	r3, #1
 800a4ea:	2300      	movne	r3, #0
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	f43f af46 	beq.w	800a384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3770      	adds	r7, #112	; 0x70
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a510:	2b01      	cmp	r3, #1
 800a512:	d101      	bne.n	800a518 <HAL_UARTEx_DisableFifoMode+0x16>
 800a514:	2302      	movs	r3, #2
 800a516:	e027      	b.n	800a568 <HAL_UARTEx_DisableFifoMode+0x66>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2224      	movs	r2, #36	; 0x24
 800a524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0201 	bic.w	r2, r2, #1
 800a53e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a546:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2220      	movs	r2, #32
 800a55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a588:	2302      	movs	r3, #2
 800a58a:	e02d      	b.n	800a5e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2224      	movs	r2, #36	; 0x24
 800a598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 0201 	bic.w	r2, r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f84f 	bl	800a66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a604:	2302      	movs	r3, #2
 800a606:	e02d      	b.n	800a664 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2224      	movs	r2, #36	; 0x24
 800a614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0201 	bic.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f811 	bl	800a66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d108      	bne.n	800a68e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a68c:	e031      	b.n	800a6f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a68e:	2310      	movs	r3, #16
 800a690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a692:	2310      	movs	r3, #16
 800a694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	0e5b      	lsrs	r3, r3, #25
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	0f5b      	lsrs	r3, r3, #29
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 0307 	and.w	r3, r3, #7
 800a6b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	7b3a      	ldrb	r2, [r7, #12]
 800a6ba:	4911      	ldr	r1, [pc, #68]	; (800a700 <UARTEx_SetNbDataToProcess+0x94>)
 800a6bc:	5c8a      	ldrb	r2, [r1, r2]
 800a6be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6c2:	7b3a      	ldrb	r2, [r7, #12]
 800a6c4:	490f      	ldr	r1, [pc, #60]	; (800a704 <UARTEx_SetNbDataToProcess+0x98>)
 800a6c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	7b7a      	ldrb	r2, [r7, #13]
 800a6d8:	4909      	ldr	r1, [pc, #36]	; (800a700 <UARTEx_SetNbDataToProcess+0x94>)
 800a6da:	5c8a      	ldrb	r2, [r1, r2]
 800a6dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6e0:	7b7a      	ldrb	r2, [r7, #13]
 800a6e2:	4908      	ldr	r1, [pc, #32]	; (800a704 <UARTEx_SetNbDataToProcess+0x98>)
 800a6e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6f2:	bf00      	nop
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	0800b698 	.word	0x0800b698
 800a704:	0800b6a0 	.word	0x0800b6a0

0800a708 <__errno>:
 800a708:	4b01      	ldr	r3, [pc, #4]	; (800a710 <__errno+0x8>)
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	24000010 	.word	0x24000010

0800a714 <__sflush_r>:
 800a714:	898a      	ldrh	r2, [r1, #12]
 800a716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71a:	4605      	mov	r5, r0
 800a71c:	0710      	lsls	r0, r2, #28
 800a71e:	460c      	mov	r4, r1
 800a720:	d458      	bmi.n	800a7d4 <__sflush_r+0xc0>
 800a722:	684b      	ldr	r3, [r1, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	dc05      	bgt.n	800a734 <__sflush_r+0x20>
 800a728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dc02      	bgt.n	800a734 <__sflush_r+0x20>
 800a72e:	2000      	movs	r0, #0
 800a730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a736:	2e00      	cmp	r6, #0
 800a738:	d0f9      	beq.n	800a72e <__sflush_r+0x1a>
 800a73a:	2300      	movs	r3, #0
 800a73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a740:	682f      	ldr	r7, [r5, #0]
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	d032      	beq.n	800a7ac <__sflush_r+0x98>
 800a746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	075a      	lsls	r2, r3, #29
 800a74c:	d505      	bpl.n	800a75a <__sflush_r+0x46>
 800a74e:	6863      	ldr	r3, [r4, #4]
 800a750:	1ac0      	subs	r0, r0, r3
 800a752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a754:	b10b      	cbz	r3, 800a75a <__sflush_r+0x46>
 800a756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a758:	1ac0      	subs	r0, r0, r3
 800a75a:	2300      	movs	r3, #0
 800a75c:	4602      	mov	r2, r0
 800a75e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a760:	6a21      	ldr	r1, [r4, #32]
 800a762:	4628      	mov	r0, r5
 800a764:	47b0      	blx	r6
 800a766:	1c43      	adds	r3, r0, #1
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	d106      	bne.n	800a77a <__sflush_r+0x66>
 800a76c:	6829      	ldr	r1, [r5, #0]
 800a76e:	291d      	cmp	r1, #29
 800a770:	d82c      	bhi.n	800a7cc <__sflush_r+0xb8>
 800a772:	4a2a      	ldr	r2, [pc, #168]	; (800a81c <__sflush_r+0x108>)
 800a774:	40ca      	lsrs	r2, r1
 800a776:	07d6      	lsls	r6, r2, #31
 800a778:	d528      	bpl.n	800a7cc <__sflush_r+0xb8>
 800a77a:	2200      	movs	r2, #0
 800a77c:	6062      	str	r2, [r4, #4]
 800a77e:	04d9      	lsls	r1, r3, #19
 800a780:	6922      	ldr	r2, [r4, #16]
 800a782:	6022      	str	r2, [r4, #0]
 800a784:	d504      	bpl.n	800a790 <__sflush_r+0x7c>
 800a786:	1c42      	adds	r2, r0, #1
 800a788:	d101      	bne.n	800a78e <__sflush_r+0x7a>
 800a78a:	682b      	ldr	r3, [r5, #0]
 800a78c:	b903      	cbnz	r3, 800a790 <__sflush_r+0x7c>
 800a78e:	6560      	str	r0, [r4, #84]	; 0x54
 800a790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a792:	602f      	str	r7, [r5, #0]
 800a794:	2900      	cmp	r1, #0
 800a796:	d0ca      	beq.n	800a72e <__sflush_r+0x1a>
 800a798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a79c:	4299      	cmp	r1, r3
 800a79e:	d002      	beq.n	800a7a6 <__sflush_r+0x92>
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f9b1 	bl	800ab08 <_free_r>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a7aa:	e7c1      	b.n	800a730 <__sflush_r+0x1c>
 800a7ac:	6a21      	ldr	r1, [r4, #32]
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	47b0      	blx	r6
 800a7b4:	1c41      	adds	r1, r0, #1
 800a7b6:	d1c7      	bne.n	800a748 <__sflush_r+0x34>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0c4      	beq.n	800a748 <__sflush_r+0x34>
 800a7be:	2b1d      	cmp	r3, #29
 800a7c0:	d001      	beq.n	800a7c6 <__sflush_r+0xb2>
 800a7c2:	2b16      	cmp	r3, #22
 800a7c4:	d101      	bne.n	800a7ca <__sflush_r+0xb6>
 800a7c6:	602f      	str	r7, [r5, #0]
 800a7c8:	e7b1      	b.n	800a72e <__sflush_r+0x1a>
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	e7ad      	b.n	800a730 <__sflush_r+0x1c>
 800a7d4:	690f      	ldr	r7, [r1, #16]
 800a7d6:	2f00      	cmp	r7, #0
 800a7d8:	d0a9      	beq.n	800a72e <__sflush_r+0x1a>
 800a7da:	0793      	lsls	r3, r2, #30
 800a7dc:	680e      	ldr	r6, [r1, #0]
 800a7de:	bf08      	it	eq
 800a7e0:	694b      	ldreq	r3, [r1, #20]
 800a7e2:	600f      	str	r7, [r1, #0]
 800a7e4:	bf18      	it	ne
 800a7e6:	2300      	movne	r3, #0
 800a7e8:	eba6 0807 	sub.w	r8, r6, r7
 800a7ec:	608b      	str	r3, [r1, #8]
 800a7ee:	f1b8 0f00 	cmp.w	r8, #0
 800a7f2:	dd9c      	ble.n	800a72e <__sflush_r+0x1a>
 800a7f4:	6a21      	ldr	r1, [r4, #32]
 800a7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7f8:	4643      	mov	r3, r8
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b0      	blx	r6
 800a800:	2800      	cmp	r0, #0
 800a802:	dc06      	bgt.n	800a812 <__sflush_r+0xfe>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	e78e      	b.n	800a730 <__sflush_r+0x1c>
 800a812:	4407      	add	r7, r0
 800a814:	eba8 0800 	sub.w	r8, r8, r0
 800a818:	e7e9      	b.n	800a7ee <__sflush_r+0xda>
 800a81a:	bf00      	nop
 800a81c:	20400001 	.word	0x20400001

0800a820 <_fflush_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	690b      	ldr	r3, [r1, #16]
 800a824:	4605      	mov	r5, r0
 800a826:	460c      	mov	r4, r1
 800a828:	b913      	cbnz	r3, 800a830 <_fflush_r+0x10>
 800a82a:	2500      	movs	r5, #0
 800a82c:	4628      	mov	r0, r5
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	b118      	cbz	r0, 800a83a <_fflush_r+0x1a>
 800a832:	6983      	ldr	r3, [r0, #24]
 800a834:	b90b      	cbnz	r3, 800a83a <_fflush_r+0x1a>
 800a836:	f000 f899 	bl	800a96c <__sinit>
 800a83a:	4b14      	ldr	r3, [pc, #80]	; (800a88c <_fflush_r+0x6c>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d11b      	bne.n	800a878 <_fflush_r+0x58>
 800a840:	686c      	ldr	r4, [r5, #4]
 800a842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0ef      	beq.n	800a82a <_fflush_r+0xa>
 800a84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a84c:	07d0      	lsls	r0, r2, #31
 800a84e:	d404      	bmi.n	800a85a <_fflush_r+0x3a>
 800a850:	0599      	lsls	r1, r3, #22
 800a852:	d402      	bmi.n	800a85a <_fflush_r+0x3a>
 800a854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a856:	f000 f94c 	bl	800aaf2 <__retarget_lock_acquire_recursive>
 800a85a:	4628      	mov	r0, r5
 800a85c:	4621      	mov	r1, r4
 800a85e:	f7ff ff59 	bl	800a714 <__sflush_r>
 800a862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a864:	07da      	lsls	r2, r3, #31
 800a866:	4605      	mov	r5, r0
 800a868:	d4e0      	bmi.n	800a82c <_fflush_r+0xc>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	059b      	lsls	r3, r3, #22
 800a86e:	d4dd      	bmi.n	800a82c <_fflush_r+0xc>
 800a870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a872:	f000 f93f 	bl	800aaf4 <__retarget_lock_release_recursive>
 800a876:	e7d9      	b.n	800a82c <_fflush_r+0xc>
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <_fflush_r+0x70>)
 800a87a:	429c      	cmp	r4, r3
 800a87c:	d101      	bne.n	800a882 <_fflush_r+0x62>
 800a87e:	68ac      	ldr	r4, [r5, #8]
 800a880:	e7df      	b.n	800a842 <_fflush_r+0x22>
 800a882:	4b04      	ldr	r3, [pc, #16]	; (800a894 <_fflush_r+0x74>)
 800a884:	429c      	cmp	r4, r3
 800a886:	bf08      	it	eq
 800a888:	68ec      	ldreq	r4, [r5, #12]
 800a88a:	e7da      	b.n	800a842 <_fflush_r+0x22>
 800a88c:	0800b6c8 	.word	0x0800b6c8
 800a890:	0800b6e8 	.word	0x0800b6e8
 800a894:	0800b6a8 	.word	0x0800b6a8

0800a898 <fflush>:
 800a898:	4601      	mov	r1, r0
 800a89a:	b920      	cbnz	r0, 800a8a6 <fflush+0xe>
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <fflush+0x18>)
 800a89e:	4905      	ldr	r1, [pc, #20]	; (800a8b4 <fflush+0x1c>)
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	f000 b8e1 	b.w	800aa68 <_fwalk_reent>
 800a8a6:	4b04      	ldr	r3, [pc, #16]	; (800a8b8 <fflush+0x20>)
 800a8a8:	6818      	ldr	r0, [r3, #0]
 800a8aa:	f7ff bfb9 	b.w	800a820 <_fflush_r>
 800a8ae:	bf00      	nop
 800a8b0:	0800b708 	.word	0x0800b708
 800a8b4:	0800a821 	.word	0x0800a821
 800a8b8:	24000010 	.word	0x24000010

0800a8bc <std>:
 800a8bc:	2300      	movs	r3, #0
 800a8be:	b510      	push	{r4, lr}
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a8c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8ca:	6083      	str	r3, [r0, #8]
 800a8cc:	8181      	strh	r1, [r0, #12]
 800a8ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a8d0:	81c2      	strh	r2, [r0, #14]
 800a8d2:	6183      	str	r3, [r0, #24]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	305c      	adds	r0, #92	; 0x5c
 800a8da:	f000 f90c 	bl	800aaf6 <memset>
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <std+0x38>)
 800a8e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <std+0x3c>)
 800a8e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8e6:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <std+0x40>)
 800a8e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <std+0x44>)
 800a8ec:	6224      	str	r4, [r4, #32]
 800a8ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	bf00      	nop
 800a8f4:	0800acad 	.word	0x0800acad
 800a8f8:	0800accf 	.word	0x0800accf
 800a8fc:	0800ad07 	.word	0x0800ad07
 800a900:	0800ad2b 	.word	0x0800ad2b

0800a904 <_cleanup_r>:
 800a904:	4901      	ldr	r1, [pc, #4]	; (800a90c <_cleanup_r+0x8>)
 800a906:	f000 b8af 	b.w	800aa68 <_fwalk_reent>
 800a90a:	bf00      	nop
 800a90c:	0800a821 	.word	0x0800a821

0800a910 <__sfmoreglue>:
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	1e4a      	subs	r2, r1, #1
 800a914:	2568      	movs	r5, #104	; 0x68
 800a916:	4355      	muls	r5, r2
 800a918:	460e      	mov	r6, r1
 800a91a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a91e:	f000 f943 	bl	800aba8 <_malloc_r>
 800a922:	4604      	mov	r4, r0
 800a924:	b140      	cbz	r0, 800a938 <__sfmoreglue+0x28>
 800a926:	2100      	movs	r1, #0
 800a928:	e9c0 1600 	strd	r1, r6, [r0]
 800a92c:	300c      	adds	r0, #12
 800a92e:	60a0      	str	r0, [r4, #8]
 800a930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a934:	f000 f8df 	bl	800aaf6 <memset>
 800a938:	4620      	mov	r0, r4
 800a93a:	bd70      	pop	{r4, r5, r6, pc}

0800a93c <__sfp_lock_acquire>:
 800a93c:	4801      	ldr	r0, [pc, #4]	; (800a944 <__sfp_lock_acquire+0x8>)
 800a93e:	f000 b8d8 	b.w	800aaf2 <__retarget_lock_acquire_recursive>
 800a942:	bf00      	nop
 800a944:	24000218 	.word	0x24000218

0800a948 <__sfp_lock_release>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__sfp_lock_release+0x8>)
 800a94a:	f000 b8d3 	b.w	800aaf4 <__retarget_lock_release_recursive>
 800a94e:	bf00      	nop
 800a950:	24000218 	.word	0x24000218

0800a954 <__sinit_lock_acquire>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__sinit_lock_acquire+0x8>)
 800a956:	f000 b8cc 	b.w	800aaf2 <__retarget_lock_acquire_recursive>
 800a95a:	bf00      	nop
 800a95c:	24000213 	.word	0x24000213

0800a960 <__sinit_lock_release>:
 800a960:	4801      	ldr	r0, [pc, #4]	; (800a968 <__sinit_lock_release+0x8>)
 800a962:	f000 b8c7 	b.w	800aaf4 <__retarget_lock_release_recursive>
 800a966:	bf00      	nop
 800a968:	24000213 	.word	0x24000213

0800a96c <__sinit>:
 800a96c:	b510      	push	{r4, lr}
 800a96e:	4604      	mov	r4, r0
 800a970:	f7ff fff0 	bl	800a954 <__sinit_lock_acquire>
 800a974:	69a3      	ldr	r3, [r4, #24]
 800a976:	b11b      	cbz	r3, 800a980 <__sinit+0x14>
 800a978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a97c:	f7ff bff0 	b.w	800a960 <__sinit_lock_release>
 800a980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a984:	6523      	str	r3, [r4, #80]	; 0x50
 800a986:	4b13      	ldr	r3, [pc, #76]	; (800a9d4 <__sinit+0x68>)
 800a988:	4a13      	ldr	r2, [pc, #76]	; (800a9d8 <__sinit+0x6c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a98e:	42a3      	cmp	r3, r4
 800a990:	bf04      	itt	eq
 800a992:	2301      	moveq	r3, #1
 800a994:	61a3      	streq	r3, [r4, #24]
 800a996:	4620      	mov	r0, r4
 800a998:	f000 f820 	bl	800a9dc <__sfp>
 800a99c:	6060      	str	r0, [r4, #4]
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f81c 	bl	800a9dc <__sfp>
 800a9a4:	60a0      	str	r0, [r4, #8]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f818 	bl	800a9dc <__sfp>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	60e0      	str	r0, [r4, #12]
 800a9b0:	2104      	movs	r1, #4
 800a9b2:	6860      	ldr	r0, [r4, #4]
 800a9b4:	f7ff ff82 	bl	800a8bc <std>
 800a9b8:	68a0      	ldr	r0, [r4, #8]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	2109      	movs	r1, #9
 800a9be:	f7ff ff7d 	bl	800a8bc <std>
 800a9c2:	68e0      	ldr	r0, [r4, #12]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	2112      	movs	r1, #18
 800a9c8:	f7ff ff78 	bl	800a8bc <std>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	61a3      	str	r3, [r4, #24]
 800a9d0:	e7d2      	b.n	800a978 <__sinit+0xc>
 800a9d2:	bf00      	nop
 800a9d4:	0800b708 	.word	0x0800b708
 800a9d8:	0800a905 	.word	0x0800a905

0800a9dc <__sfp>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	4607      	mov	r7, r0
 800a9e0:	f7ff ffac 	bl	800a93c <__sfp_lock_acquire>
 800a9e4:	4b1e      	ldr	r3, [pc, #120]	; (800aa60 <__sfp+0x84>)
 800a9e6:	681e      	ldr	r6, [r3, #0]
 800a9e8:	69b3      	ldr	r3, [r6, #24]
 800a9ea:	b913      	cbnz	r3, 800a9f2 <__sfp+0x16>
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff ffbd 	bl	800a96c <__sinit>
 800a9f2:	3648      	adds	r6, #72	; 0x48
 800a9f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	d503      	bpl.n	800aa04 <__sfp+0x28>
 800a9fc:	6833      	ldr	r3, [r6, #0]
 800a9fe:	b30b      	cbz	r3, 800aa44 <__sfp+0x68>
 800aa00:	6836      	ldr	r6, [r6, #0]
 800aa02:	e7f7      	b.n	800a9f4 <__sfp+0x18>
 800aa04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa08:	b9d5      	cbnz	r5, 800aa40 <__sfp+0x64>
 800aa0a:	4b16      	ldr	r3, [pc, #88]	; (800aa64 <__sfp+0x88>)
 800aa0c:	60e3      	str	r3, [r4, #12]
 800aa0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa12:	6665      	str	r5, [r4, #100]	; 0x64
 800aa14:	f000 f86c 	bl	800aaf0 <__retarget_lock_init_recursive>
 800aa18:	f7ff ff96 	bl	800a948 <__sfp_lock_release>
 800aa1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa24:	6025      	str	r5, [r4, #0]
 800aa26:	61a5      	str	r5, [r4, #24]
 800aa28:	2208      	movs	r2, #8
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa30:	f000 f861 	bl	800aaf6 <memset>
 800aa34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa40:	3468      	adds	r4, #104	; 0x68
 800aa42:	e7d9      	b.n	800a9f8 <__sfp+0x1c>
 800aa44:	2104      	movs	r1, #4
 800aa46:	4638      	mov	r0, r7
 800aa48:	f7ff ff62 	bl	800a910 <__sfmoreglue>
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	6030      	str	r0, [r6, #0]
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d1d5      	bne.n	800aa00 <__sfp+0x24>
 800aa54:	f7ff ff78 	bl	800a948 <__sfp_lock_release>
 800aa58:	230c      	movs	r3, #12
 800aa5a:	603b      	str	r3, [r7, #0]
 800aa5c:	e7ee      	b.n	800aa3c <__sfp+0x60>
 800aa5e:	bf00      	nop
 800aa60:	0800b708 	.word	0x0800b708
 800aa64:	ffff0001 	.word	0xffff0001

0800aa68 <_fwalk_reent>:
 800aa68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	4688      	mov	r8, r1
 800aa70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa74:	2700      	movs	r7, #0
 800aa76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa7a:	f1b9 0901 	subs.w	r9, r9, #1
 800aa7e:	d505      	bpl.n	800aa8c <_fwalk_reent+0x24>
 800aa80:	6824      	ldr	r4, [r4, #0]
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	d1f7      	bne.n	800aa76 <_fwalk_reent+0xe>
 800aa86:	4638      	mov	r0, r7
 800aa88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa8c:	89ab      	ldrh	r3, [r5, #12]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d907      	bls.n	800aaa2 <_fwalk_reent+0x3a>
 800aa92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa96:	3301      	adds	r3, #1
 800aa98:	d003      	beq.n	800aaa2 <_fwalk_reent+0x3a>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	47c0      	blx	r8
 800aaa0:	4307      	orrs	r7, r0
 800aaa2:	3568      	adds	r5, #104	; 0x68
 800aaa4:	e7e9      	b.n	800aa7a <_fwalk_reent+0x12>
	...

0800aaa8 <__libc_init_array>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	4d0d      	ldr	r5, [pc, #52]	; (800aae0 <__libc_init_array+0x38>)
 800aaac:	4c0d      	ldr	r4, [pc, #52]	; (800aae4 <__libc_init_array+0x3c>)
 800aaae:	1b64      	subs	r4, r4, r5
 800aab0:	10a4      	asrs	r4, r4, #2
 800aab2:	2600      	movs	r6, #0
 800aab4:	42a6      	cmp	r6, r4
 800aab6:	d109      	bne.n	800aacc <__libc_init_array+0x24>
 800aab8:	4d0b      	ldr	r5, [pc, #44]	; (800aae8 <__libc_init_array+0x40>)
 800aaba:	4c0c      	ldr	r4, [pc, #48]	; (800aaec <__libc_init_array+0x44>)
 800aabc:	f000 fdc0 	bl	800b640 <_init>
 800aac0:	1b64      	subs	r4, r4, r5
 800aac2:	10a4      	asrs	r4, r4, #2
 800aac4:	2600      	movs	r6, #0
 800aac6:	42a6      	cmp	r6, r4
 800aac8:	d105      	bne.n	800aad6 <__libc_init_array+0x2e>
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad0:	4798      	blx	r3
 800aad2:	3601      	adds	r6, #1
 800aad4:	e7ee      	b.n	800aab4 <__libc_init_array+0xc>
 800aad6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aada:	4798      	blx	r3
 800aadc:	3601      	adds	r6, #1
 800aade:	e7f2      	b.n	800aac6 <__libc_init_array+0x1e>
 800aae0:	0800b748 	.word	0x0800b748
 800aae4:	0800b748 	.word	0x0800b748
 800aae8:	0800b748 	.word	0x0800b748
 800aaec:	0800b74c 	.word	0x0800b74c

0800aaf0 <__retarget_lock_init_recursive>:
 800aaf0:	4770      	bx	lr

0800aaf2 <__retarget_lock_acquire_recursive>:
 800aaf2:	4770      	bx	lr

0800aaf4 <__retarget_lock_release_recursive>:
 800aaf4:	4770      	bx	lr

0800aaf6 <memset>:
 800aaf6:	4402      	add	r2, r0
 800aaf8:	4603      	mov	r3, r0
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d100      	bne.n	800ab00 <memset+0xa>
 800aafe:	4770      	bx	lr
 800ab00:	f803 1b01 	strb.w	r1, [r3], #1
 800ab04:	e7f9      	b.n	800aafa <memset+0x4>
	...

0800ab08 <_free_r>:
 800ab08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	d048      	beq.n	800aba0 <_free_r+0x98>
 800ab0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab12:	9001      	str	r0, [sp, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f1a1 0404 	sub.w	r4, r1, #4
 800ab1a:	bfb8      	it	lt
 800ab1c:	18e4      	addlt	r4, r4, r3
 800ab1e:	f000 f93d 	bl	800ad9c <__malloc_lock>
 800ab22:	4a20      	ldr	r2, [pc, #128]	; (800aba4 <_free_r+0x9c>)
 800ab24:	9801      	ldr	r0, [sp, #4]
 800ab26:	6813      	ldr	r3, [r2, #0]
 800ab28:	4615      	mov	r5, r2
 800ab2a:	b933      	cbnz	r3, 800ab3a <_free_r+0x32>
 800ab2c:	6063      	str	r3, [r4, #4]
 800ab2e:	6014      	str	r4, [r2, #0]
 800ab30:	b003      	add	sp, #12
 800ab32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab36:	f000 b937 	b.w	800ada8 <__malloc_unlock>
 800ab3a:	42a3      	cmp	r3, r4
 800ab3c:	d90b      	bls.n	800ab56 <_free_r+0x4e>
 800ab3e:	6821      	ldr	r1, [r4, #0]
 800ab40:	1862      	adds	r2, r4, r1
 800ab42:	4293      	cmp	r3, r2
 800ab44:	bf04      	itt	eq
 800ab46:	681a      	ldreq	r2, [r3, #0]
 800ab48:	685b      	ldreq	r3, [r3, #4]
 800ab4a:	6063      	str	r3, [r4, #4]
 800ab4c:	bf04      	itt	eq
 800ab4e:	1852      	addeq	r2, r2, r1
 800ab50:	6022      	streq	r2, [r4, #0]
 800ab52:	602c      	str	r4, [r5, #0]
 800ab54:	e7ec      	b.n	800ab30 <_free_r+0x28>
 800ab56:	461a      	mov	r2, r3
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	b10b      	cbz	r3, 800ab60 <_free_r+0x58>
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d9fa      	bls.n	800ab56 <_free_r+0x4e>
 800ab60:	6811      	ldr	r1, [r2, #0]
 800ab62:	1855      	adds	r5, r2, r1
 800ab64:	42a5      	cmp	r5, r4
 800ab66:	d10b      	bne.n	800ab80 <_free_r+0x78>
 800ab68:	6824      	ldr	r4, [r4, #0]
 800ab6a:	4421      	add	r1, r4
 800ab6c:	1854      	adds	r4, r2, r1
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	6011      	str	r1, [r2, #0]
 800ab72:	d1dd      	bne.n	800ab30 <_free_r+0x28>
 800ab74:	681c      	ldr	r4, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	6053      	str	r3, [r2, #4]
 800ab7a:	4421      	add	r1, r4
 800ab7c:	6011      	str	r1, [r2, #0]
 800ab7e:	e7d7      	b.n	800ab30 <_free_r+0x28>
 800ab80:	d902      	bls.n	800ab88 <_free_r+0x80>
 800ab82:	230c      	movs	r3, #12
 800ab84:	6003      	str	r3, [r0, #0]
 800ab86:	e7d3      	b.n	800ab30 <_free_r+0x28>
 800ab88:	6825      	ldr	r5, [r4, #0]
 800ab8a:	1961      	adds	r1, r4, r5
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	bf04      	itt	eq
 800ab90:	6819      	ldreq	r1, [r3, #0]
 800ab92:	685b      	ldreq	r3, [r3, #4]
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	bf04      	itt	eq
 800ab98:	1949      	addeq	r1, r1, r5
 800ab9a:	6021      	streq	r1, [r4, #0]
 800ab9c:	6054      	str	r4, [r2, #4]
 800ab9e:	e7c7      	b.n	800ab30 <_free_r+0x28>
 800aba0:	b003      	add	sp, #12
 800aba2:	bd30      	pop	{r4, r5, pc}
 800aba4:	24000094 	.word	0x24000094

0800aba8 <_malloc_r>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	1ccd      	adds	r5, r1, #3
 800abac:	f025 0503 	bic.w	r5, r5, #3
 800abb0:	3508      	adds	r5, #8
 800abb2:	2d0c      	cmp	r5, #12
 800abb4:	bf38      	it	cc
 800abb6:	250c      	movcc	r5, #12
 800abb8:	2d00      	cmp	r5, #0
 800abba:	4606      	mov	r6, r0
 800abbc:	db01      	blt.n	800abc2 <_malloc_r+0x1a>
 800abbe:	42a9      	cmp	r1, r5
 800abc0:	d903      	bls.n	800abca <_malloc_r+0x22>
 800abc2:	230c      	movs	r3, #12
 800abc4:	6033      	str	r3, [r6, #0]
 800abc6:	2000      	movs	r0, #0
 800abc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abca:	f000 f8e7 	bl	800ad9c <__malloc_lock>
 800abce:	4921      	ldr	r1, [pc, #132]	; (800ac54 <_malloc_r+0xac>)
 800abd0:	680a      	ldr	r2, [r1, #0]
 800abd2:	4614      	mov	r4, r2
 800abd4:	b99c      	cbnz	r4, 800abfe <_malloc_r+0x56>
 800abd6:	4f20      	ldr	r7, [pc, #128]	; (800ac58 <_malloc_r+0xb0>)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	b923      	cbnz	r3, 800abe6 <_malloc_r+0x3e>
 800abdc:	4621      	mov	r1, r4
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 f854 	bl	800ac8c <_sbrk_r>
 800abe4:	6038      	str	r0, [r7, #0]
 800abe6:	4629      	mov	r1, r5
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 f84f 	bl	800ac8c <_sbrk_r>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d123      	bne.n	800ac3a <_malloc_r+0x92>
 800abf2:	230c      	movs	r3, #12
 800abf4:	6033      	str	r3, [r6, #0]
 800abf6:	4630      	mov	r0, r6
 800abf8:	f000 f8d6 	bl	800ada8 <__malloc_unlock>
 800abfc:	e7e3      	b.n	800abc6 <_malloc_r+0x1e>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	1b5b      	subs	r3, r3, r5
 800ac02:	d417      	bmi.n	800ac34 <_malloc_r+0x8c>
 800ac04:	2b0b      	cmp	r3, #11
 800ac06:	d903      	bls.n	800ac10 <_malloc_r+0x68>
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	441c      	add	r4, r3
 800ac0c:	6025      	str	r5, [r4, #0]
 800ac0e:	e004      	b.n	800ac1a <_malloc_r+0x72>
 800ac10:	6863      	ldr	r3, [r4, #4]
 800ac12:	42a2      	cmp	r2, r4
 800ac14:	bf0c      	ite	eq
 800ac16:	600b      	streq	r3, [r1, #0]
 800ac18:	6053      	strne	r3, [r2, #4]
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f000 f8c4 	bl	800ada8 <__malloc_unlock>
 800ac20:	f104 000b 	add.w	r0, r4, #11
 800ac24:	1d23      	adds	r3, r4, #4
 800ac26:	f020 0007 	bic.w	r0, r0, #7
 800ac2a:	1ac2      	subs	r2, r0, r3
 800ac2c:	d0cc      	beq.n	800abc8 <_malloc_r+0x20>
 800ac2e:	1a1b      	subs	r3, r3, r0
 800ac30:	50a3      	str	r3, [r4, r2]
 800ac32:	e7c9      	b.n	800abc8 <_malloc_r+0x20>
 800ac34:	4622      	mov	r2, r4
 800ac36:	6864      	ldr	r4, [r4, #4]
 800ac38:	e7cc      	b.n	800abd4 <_malloc_r+0x2c>
 800ac3a:	1cc4      	adds	r4, r0, #3
 800ac3c:	f024 0403 	bic.w	r4, r4, #3
 800ac40:	42a0      	cmp	r0, r4
 800ac42:	d0e3      	beq.n	800ac0c <_malloc_r+0x64>
 800ac44:	1a21      	subs	r1, r4, r0
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 f820 	bl	800ac8c <_sbrk_r>
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d1dd      	bne.n	800ac0c <_malloc_r+0x64>
 800ac50:	e7cf      	b.n	800abf2 <_malloc_r+0x4a>
 800ac52:	bf00      	nop
 800ac54:	24000094 	.word	0x24000094
 800ac58:	24000098 	.word	0x24000098

0800ac5c <iprintf>:
 800ac5c:	b40f      	push	{r0, r1, r2, r3}
 800ac5e:	4b0a      	ldr	r3, [pc, #40]	; (800ac88 <iprintf+0x2c>)
 800ac60:	b513      	push	{r0, r1, r4, lr}
 800ac62:	681c      	ldr	r4, [r3, #0]
 800ac64:	b124      	cbz	r4, 800ac70 <iprintf+0x14>
 800ac66:	69a3      	ldr	r3, [r4, #24]
 800ac68:	b913      	cbnz	r3, 800ac70 <iprintf+0x14>
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f7ff fe7e 	bl	800a96c <__sinit>
 800ac70:	ab05      	add	r3, sp, #20
 800ac72:	9a04      	ldr	r2, [sp, #16]
 800ac74:	68a1      	ldr	r1, [r4, #8]
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 f8c5 	bl	800ae08 <_vfiprintf_r>
 800ac7e:	b002      	add	sp, #8
 800ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac84:	b004      	add	sp, #16
 800ac86:	4770      	bx	lr
 800ac88:	24000010 	.word	0x24000010

0800ac8c <_sbrk_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d06      	ldr	r5, [pc, #24]	; (800aca8 <_sbrk_r+0x1c>)
 800ac90:	2300      	movs	r3, #0
 800ac92:	4604      	mov	r4, r0
 800ac94:	4608      	mov	r0, r1
 800ac96:	602b      	str	r3, [r5, #0]
 800ac98:	f7f6 fa06 	bl	80010a8 <_sbrk>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	d102      	bne.n	800aca6 <_sbrk_r+0x1a>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	b103      	cbz	r3, 800aca6 <_sbrk_r+0x1a>
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	2400021c 	.word	0x2400021c

0800acac <__sread>:
 800acac:	b510      	push	{r4, lr}
 800acae:	460c      	mov	r4, r1
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	f000 fb6c 	bl	800b390 <_read_r>
 800acb8:	2800      	cmp	r0, #0
 800acba:	bfab      	itete	ge
 800acbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acbe:	89a3      	ldrhlt	r3, [r4, #12]
 800acc0:	181b      	addge	r3, r3, r0
 800acc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acc6:	bfac      	ite	ge
 800acc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acca:	81a3      	strhlt	r3, [r4, #12]
 800accc:	bd10      	pop	{r4, pc}

0800acce <__swrite>:
 800acce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	461f      	mov	r7, r3
 800acd4:	898b      	ldrh	r3, [r1, #12]
 800acd6:	05db      	lsls	r3, r3, #23
 800acd8:	4605      	mov	r5, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	4616      	mov	r6, r2
 800acde:	d505      	bpl.n	800acec <__swrite+0x1e>
 800ace0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace4:	2302      	movs	r3, #2
 800ace6:	2200      	movs	r2, #0
 800ace8:	f000 f846 	bl	800ad78 <_lseek_r>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	4632      	mov	r2, r6
 800acfa:	463b      	mov	r3, r7
 800acfc:	4628      	mov	r0, r5
 800acfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	f000 b817 	b.w	800ad34 <_write_r>

0800ad06 <__sseek>:
 800ad06:	b510      	push	{r4, lr}
 800ad08:	460c      	mov	r4, r1
 800ad0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0e:	f000 f833 	bl	800ad78 <_lseek_r>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	bf15      	itete	ne
 800ad18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad22:	81a3      	strheq	r3, [r4, #12]
 800ad24:	bf18      	it	ne
 800ad26:	81a3      	strhne	r3, [r4, #12]
 800ad28:	bd10      	pop	{r4, pc}

0800ad2a <__sclose>:
 800ad2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2e:	f000 b813 	b.w	800ad58 <_close_r>
	...

0800ad34 <_write_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d07      	ldr	r5, [pc, #28]	; (800ad54 <_write_r+0x20>)
 800ad38:	4604      	mov	r4, r0
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	602a      	str	r2, [r5, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f7f5 fcf2 	bl	800072c <_write>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_write_r+0x1e>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_write_r+0x1e>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	2400021c 	.word	0x2400021c

0800ad58 <_close_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_close_r+0x1c>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f7f6 f96b 	bl	800103e <_close>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_close_r+0x1a>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_close_r+0x1a>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	2400021c 	.word	0x2400021c

0800ad78 <_lseek_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d07      	ldr	r5, [pc, #28]	; (800ad98 <_lseek_r+0x20>)
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	4608      	mov	r0, r1
 800ad80:	4611      	mov	r1, r2
 800ad82:	2200      	movs	r2, #0
 800ad84:	602a      	str	r2, [r5, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	f7f6 f980 	bl	800108c <_lseek>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_lseek_r+0x1e>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_lseek_r+0x1e>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	2400021c 	.word	0x2400021c

0800ad9c <__malloc_lock>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	; (800ada4 <__malloc_lock+0x8>)
 800ad9e:	f7ff bea8 	b.w	800aaf2 <__retarget_lock_acquire_recursive>
 800ada2:	bf00      	nop
 800ada4:	24000214 	.word	0x24000214

0800ada8 <__malloc_unlock>:
 800ada8:	4801      	ldr	r0, [pc, #4]	; (800adb0 <__malloc_unlock+0x8>)
 800adaa:	f7ff bea3 	b.w	800aaf4 <__retarget_lock_release_recursive>
 800adae:	bf00      	nop
 800adb0:	24000214 	.word	0x24000214

0800adb4 <__sfputc_r>:
 800adb4:	6893      	ldr	r3, [r2, #8]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	2b00      	cmp	r3, #0
 800adba:	b410      	push	{r4}
 800adbc:	6093      	str	r3, [r2, #8]
 800adbe:	da08      	bge.n	800add2 <__sfputc_r+0x1e>
 800adc0:	6994      	ldr	r4, [r2, #24]
 800adc2:	42a3      	cmp	r3, r4
 800adc4:	db01      	blt.n	800adca <__sfputc_r+0x16>
 800adc6:	290a      	cmp	r1, #10
 800adc8:	d103      	bne.n	800add2 <__sfputc_r+0x1e>
 800adca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adce:	f000 baf1 	b.w	800b3b4 <__swbuf_r>
 800add2:	6813      	ldr	r3, [r2, #0]
 800add4:	1c58      	adds	r0, r3, #1
 800add6:	6010      	str	r0, [r2, #0]
 800add8:	7019      	strb	r1, [r3, #0]
 800adda:	4608      	mov	r0, r1
 800addc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <__sfputs_r>:
 800ade2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade4:	4606      	mov	r6, r0
 800ade6:	460f      	mov	r7, r1
 800ade8:	4614      	mov	r4, r2
 800adea:	18d5      	adds	r5, r2, r3
 800adec:	42ac      	cmp	r4, r5
 800adee:	d101      	bne.n	800adf4 <__sfputs_r+0x12>
 800adf0:	2000      	movs	r0, #0
 800adf2:	e007      	b.n	800ae04 <__sfputs_r+0x22>
 800adf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf8:	463a      	mov	r2, r7
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ffda 	bl	800adb4 <__sfputc_r>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d1f3      	bne.n	800adec <__sfputs_r+0xa>
 800ae04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae08 <_vfiprintf_r>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	460d      	mov	r5, r1
 800ae0e:	b09d      	sub	sp, #116	; 0x74
 800ae10:	4614      	mov	r4, r2
 800ae12:	4698      	mov	r8, r3
 800ae14:	4606      	mov	r6, r0
 800ae16:	b118      	cbz	r0, 800ae20 <_vfiprintf_r+0x18>
 800ae18:	6983      	ldr	r3, [r0, #24]
 800ae1a:	b90b      	cbnz	r3, 800ae20 <_vfiprintf_r+0x18>
 800ae1c:	f7ff fda6 	bl	800a96c <__sinit>
 800ae20:	4b89      	ldr	r3, [pc, #548]	; (800b048 <_vfiprintf_r+0x240>)
 800ae22:	429d      	cmp	r5, r3
 800ae24:	d11b      	bne.n	800ae5e <_vfiprintf_r+0x56>
 800ae26:	6875      	ldr	r5, [r6, #4]
 800ae28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae2a:	07d9      	lsls	r1, r3, #31
 800ae2c:	d405      	bmi.n	800ae3a <_vfiprintf_r+0x32>
 800ae2e:	89ab      	ldrh	r3, [r5, #12]
 800ae30:	059a      	lsls	r2, r3, #22
 800ae32:	d402      	bmi.n	800ae3a <_vfiprintf_r+0x32>
 800ae34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae36:	f7ff fe5c 	bl	800aaf2 <__retarget_lock_acquire_recursive>
 800ae3a:	89ab      	ldrh	r3, [r5, #12]
 800ae3c:	071b      	lsls	r3, r3, #28
 800ae3e:	d501      	bpl.n	800ae44 <_vfiprintf_r+0x3c>
 800ae40:	692b      	ldr	r3, [r5, #16]
 800ae42:	b9eb      	cbnz	r3, 800ae80 <_vfiprintf_r+0x78>
 800ae44:	4629      	mov	r1, r5
 800ae46:	4630      	mov	r0, r6
 800ae48:	f000 fb06 	bl	800b458 <__swsetup_r>
 800ae4c:	b1c0      	cbz	r0, 800ae80 <_vfiprintf_r+0x78>
 800ae4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae50:	07dc      	lsls	r4, r3, #31
 800ae52:	d50e      	bpl.n	800ae72 <_vfiprintf_r+0x6a>
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	b01d      	add	sp, #116	; 0x74
 800ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5e:	4b7b      	ldr	r3, [pc, #492]	; (800b04c <_vfiprintf_r+0x244>)
 800ae60:	429d      	cmp	r5, r3
 800ae62:	d101      	bne.n	800ae68 <_vfiprintf_r+0x60>
 800ae64:	68b5      	ldr	r5, [r6, #8]
 800ae66:	e7df      	b.n	800ae28 <_vfiprintf_r+0x20>
 800ae68:	4b79      	ldr	r3, [pc, #484]	; (800b050 <_vfiprintf_r+0x248>)
 800ae6a:	429d      	cmp	r5, r3
 800ae6c:	bf08      	it	eq
 800ae6e:	68f5      	ldreq	r5, [r6, #12]
 800ae70:	e7da      	b.n	800ae28 <_vfiprintf_r+0x20>
 800ae72:	89ab      	ldrh	r3, [r5, #12]
 800ae74:	0598      	lsls	r0, r3, #22
 800ae76:	d4ed      	bmi.n	800ae54 <_vfiprintf_r+0x4c>
 800ae78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae7a:	f7ff fe3b 	bl	800aaf4 <__retarget_lock_release_recursive>
 800ae7e:	e7e9      	b.n	800ae54 <_vfiprintf_r+0x4c>
 800ae80:	2300      	movs	r3, #0
 800ae82:	9309      	str	r3, [sp, #36]	; 0x24
 800ae84:	2320      	movs	r3, #32
 800ae86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae8e:	2330      	movs	r3, #48	; 0x30
 800ae90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b054 <_vfiprintf_r+0x24c>
 800ae94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae98:	f04f 0901 	mov.w	r9, #1
 800ae9c:	4623      	mov	r3, r4
 800ae9e:	469a      	mov	sl, r3
 800aea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aea4:	b10a      	cbz	r2, 800aeaa <_vfiprintf_r+0xa2>
 800aea6:	2a25      	cmp	r2, #37	; 0x25
 800aea8:	d1f9      	bne.n	800ae9e <_vfiprintf_r+0x96>
 800aeaa:	ebba 0b04 	subs.w	fp, sl, r4
 800aeae:	d00b      	beq.n	800aec8 <_vfiprintf_r+0xc0>
 800aeb0:	465b      	mov	r3, fp
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7ff ff93 	bl	800ade2 <__sfputs_r>
 800aebc:	3001      	adds	r0, #1
 800aebe:	f000 80aa 	beq.w	800b016 <_vfiprintf_r+0x20e>
 800aec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec4:	445a      	add	r2, fp
 800aec6:	9209      	str	r2, [sp, #36]	; 0x24
 800aec8:	f89a 3000 	ldrb.w	r3, [sl]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 80a2 	beq.w	800b016 <_vfiprintf_r+0x20e>
 800aed2:	2300      	movs	r3, #0
 800aed4:	f04f 32ff 	mov.w	r2, #4294967295
 800aed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aedc:	f10a 0a01 	add.w	sl, sl, #1
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	9307      	str	r3, [sp, #28]
 800aee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee8:	931a      	str	r3, [sp, #104]	; 0x68
 800aeea:	4654      	mov	r4, sl
 800aeec:	2205      	movs	r2, #5
 800aeee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef2:	4858      	ldr	r0, [pc, #352]	; (800b054 <_vfiprintf_r+0x24c>)
 800aef4:	f7f5 f9f4 	bl	80002e0 <memchr>
 800aef8:	9a04      	ldr	r2, [sp, #16]
 800aefa:	b9d8      	cbnz	r0, 800af34 <_vfiprintf_r+0x12c>
 800aefc:	06d1      	lsls	r1, r2, #27
 800aefe:	bf44      	itt	mi
 800af00:	2320      	movmi	r3, #32
 800af02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af06:	0713      	lsls	r3, r2, #28
 800af08:	bf44      	itt	mi
 800af0a:	232b      	movmi	r3, #43	; 0x2b
 800af0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af10:	f89a 3000 	ldrb.w	r3, [sl]
 800af14:	2b2a      	cmp	r3, #42	; 0x2a
 800af16:	d015      	beq.n	800af44 <_vfiprintf_r+0x13c>
 800af18:	9a07      	ldr	r2, [sp, #28]
 800af1a:	4654      	mov	r4, sl
 800af1c:	2000      	movs	r0, #0
 800af1e:	f04f 0c0a 	mov.w	ip, #10
 800af22:	4621      	mov	r1, r4
 800af24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af28:	3b30      	subs	r3, #48	; 0x30
 800af2a:	2b09      	cmp	r3, #9
 800af2c:	d94e      	bls.n	800afcc <_vfiprintf_r+0x1c4>
 800af2e:	b1b0      	cbz	r0, 800af5e <_vfiprintf_r+0x156>
 800af30:	9207      	str	r2, [sp, #28]
 800af32:	e014      	b.n	800af5e <_vfiprintf_r+0x156>
 800af34:	eba0 0308 	sub.w	r3, r0, r8
 800af38:	fa09 f303 	lsl.w	r3, r9, r3
 800af3c:	4313      	orrs	r3, r2
 800af3e:	9304      	str	r3, [sp, #16]
 800af40:	46a2      	mov	sl, r4
 800af42:	e7d2      	b.n	800aeea <_vfiprintf_r+0xe2>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	1d19      	adds	r1, r3, #4
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	9103      	str	r1, [sp, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bfbb      	ittet	lt
 800af50:	425b      	neglt	r3, r3
 800af52:	f042 0202 	orrlt.w	r2, r2, #2
 800af56:	9307      	strge	r3, [sp, #28]
 800af58:	9307      	strlt	r3, [sp, #28]
 800af5a:	bfb8      	it	lt
 800af5c:	9204      	strlt	r2, [sp, #16]
 800af5e:	7823      	ldrb	r3, [r4, #0]
 800af60:	2b2e      	cmp	r3, #46	; 0x2e
 800af62:	d10c      	bne.n	800af7e <_vfiprintf_r+0x176>
 800af64:	7863      	ldrb	r3, [r4, #1]
 800af66:	2b2a      	cmp	r3, #42	; 0x2a
 800af68:	d135      	bne.n	800afd6 <_vfiprintf_r+0x1ce>
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	1d1a      	adds	r2, r3, #4
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	9203      	str	r2, [sp, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	bfb8      	it	lt
 800af76:	f04f 33ff 	movlt.w	r3, #4294967295
 800af7a:	3402      	adds	r4, #2
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b064 <_vfiprintf_r+0x25c>
 800af82:	7821      	ldrb	r1, [r4, #0]
 800af84:	2203      	movs	r2, #3
 800af86:	4650      	mov	r0, sl
 800af88:	f7f5 f9aa 	bl	80002e0 <memchr>
 800af8c:	b140      	cbz	r0, 800afa0 <_vfiprintf_r+0x198>
 800af8e:	2340      	movs	r3, #64	; 0x40
 800af90:	eba0 000a 	sub.w	r0, r0, sl
 800af94:	fa03 f000 	lsl.w	r0, r3, r0
 800af98:	9b04      	ldr	r3, [sp, #16]
 800af9a:	4303      	orrs	r3, r0
 800af9c:	3401      	adds	r4, #1
 800af9e:	9304      	str	r3, [sp, #16]
 800afa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa4:	482c      	ldr	r0, [pc, #176]	; (800b058 <_vfiprintf_r+0x250>)
 800afa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afaa:	2206      	movs	r2, #6
 800afac:	f7f5 f998 	bl	80002e0 <memchr>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d03f      	beq.n	800b034 <_vfiprintf_r+0x22c>
 800afb4:	4b29      	ldr	r3, [pc, #164]	; (800b05c <_vfiprintf_r+0x254>)
 800afb6:	bb1b      	cbnz	r3, 800b000 <_vfiprintf_r+0x1f8>
 800afb8:	9b03      	ldr	r3, [sp, #12]
 800afba:	3307      	adds	r3, #7
 800afbc:	f023 0307 	bic.w	r3, r3, #7
 800afc0:	3308      	adds	r3, #8
 800afc2:	9303      	str	r3, [sp, #12]
 800afc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc6:	443b      	add	r3, r7
 800afc8:	9309      	str	r3, [sp, #36]	; 0x24
 800afca:	e767      	b.n	800ae9c <_vfiprintf_r+0x94>
 800afcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800afd0:	460c      	mov	r4, r1
 800afd2:	2001      	movs	r0, #1
 800afd4:	e7a5      	b.n	800af22 <_vfiprintf_r+0x11a>
 800afd6:	2300      	movs	r3, #0
 800afd8:	3401      	adds	r4, #1
 800afda:	9305      	str	r3, [sp, #20]
 800afdc:	4619      	mov	r1, r3
 800afde:	f04f 0c0a 	mov.w	ip, #10
 800afe2:	4620      	mov	r0, r4
 800afe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe8:	3a30      	subs	r2, #48	; 0x30
 800afea:	2a09      	cmp	r2, #9
 800afec:	d903      	bls.n	800aff6 <_vfiprintf_r+0x1ee>
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d0c5      	beq.n	800af7e <_vfiprintf_r+0x176>
 800aff2:	9105      	str	r1, [sp, #20]
 800aff4:	e7c3      	b.n	800af7e <_vfiprintf_r+0x176>
 800aff6:	fb0c 2101 	mla	r1, ip, r1, r2
 800affa:	4604      	mov	r4, r0
 800affc:	2301      	movs	r3, #1
 800affe:	e7f0      	b.n	800afe2 <_vfiprintf_r+0x1da>
 800b000:	ab03      	add	r3, sp, #12
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	462a      	mov	r2, r5
 800b006:	4b16      	ldr	r3, [pc, #88]	; (800b060 <_vfiprintf_r+0x258>)
 800b008:	a904      	add	r1, sp, #16
 800b00a:	4630      	mov	r0, r6
 800b00c:	f3af 8000 	nop.w
 800b010:	4607      	mov	r7, r0
 800b012:	1c78      	adds	r0, r7, #1
 800b014:	d1d6      	bne.n	800afc4 <_vfiprintf_r+0x1bc>
 800b016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b018:	07d9      	lsls	r1, r3, #31
 800b01a:	d405      	bmi.n	800b028 <_vfiprintf_r+0x220>
 800b01c:	89ab      	ldrh	r3, [r5, #12]
 800b01e:	059a      	lsls	r2, r3, #22
 800b020:	d402      	bmi.n	800b028 <_vfiprintf_r+0x220>
 800b022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b024:	f7ff fd66 	bl	800aaf4 <__retarget_lock_release_recursive>
 800b028:	89ab      	ldrh	r3, [r5, #12]
 800b02a:	065b      	lsls	r3, r3, #25
 800b02c:	f53f af12 	bmi.w	800ae54 <_vfiprintf_r+0x4c>
 800b030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b032:	e711      	b.n	800ae58 <_vfiprintf_r+0x50>
 800b034:	ab03      	add	r3, sp, #12
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	462a      	mov	r2, r5
 800b03a:	4b09      	ldr	r3, [pc, #36]	; (800b060 <_vfiprintf_r+0x258>)
 800b03c:	a904      	add	r1, sp, #16
 800b03e:	4630      	mov	r0, r6
 800b040:	f000 f880 	bl	800b144 <_printf_i>
 800b044:	e7e4      	b.n	800b010 <_vfiprintf_r+0x208>
 800b046:	bf00      	nop
 800b048:	0800b6c8 	.word	0x0800b6c8
 800b04c:	0800b6e8 	.word	0x0800b6e8
 800b050:	0800b6a8 	.word	0x0800b6a8
 800b054:	0800b70c 	.word	0x0800b70c
 800b058:	0800b716 	.word	0x0800b716
 800b05c:	00000000 	.word	0x00000000
 800b060:	0800ade3 	.word	0x0800ade3
 800b064:	0800b712 	.word	0x0800b712

0800b068 <_printf_common>:
 800b068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	4616      	mov	r6, r2
 800b06e:	4699      	mov	r9, r3
 800b070:	688a      	ldr	r2, [r1, #8]
 800b072:	690b      	ldr	r3, [r1, #16]
 800b074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b078:	4293      	cmp	r3, r2
 800b07a:	bfb8      	it	lt
 800b07c:	4613      	movlt	r3, r2
 800b07e:	6033      	str	r3, [r6, #0]
 800b080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b084:	4607      	mov	r7, r0
 800b086:	460c      	mov	r4, r1
 800b088:	b10a      	cbz	r2, 800b08e <_printf_common+0x26>
 800b08a:	3301      	adds	r3, #1
 800b08c:	6033      	str	r3, [r6, #0]
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	0699      	lsls	r1, r3, #26
 800b092:	bf42      	ittt	mi
 800b094:	6833      	ldrmi	r3, [r6, #0]
 800b096:	3302      	addmi	r3, #2
 800b098:	6033      	strmi	r3, [r6, #0]
 800b09a:	6825      	ldr	r5, [r4, #0]
 800b09c:	f015 0506 	ands.w	r5, r5, #6
 800b0a0:	d106      	bne.n	800b0b0 <_printf_common+0x48>
 800b0a2:	f104 0a19 	add.w	sl, r4, #25
 800b0a6:	68e3      	ldr	r3, [r4, #12]
 800b0a8:	6832      	ldr	r2, [r6, #0]
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	42ab      	cmp	r3, r5
 800b0ae:	dc26      	bgt.n	800b0fe <_printf_common+0x96>
 800b0b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0b4:	1e13      	subs	r3, r2, #0
 800b0b6:	6822      	ldr	r2, [r4, #0]
 800b0b8:	bf18      	it	ne
 800b0ba:	2301      	movne	r3, #1
 800b0bc:	0692      	lsls	r2, r2, #26
 800b0be:	d42b      	bmi.n	800b118 <_printf_common+0xb0>
 800b0c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	47c0      	blx	r8
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	d01e      	beq.n	800b10c <_printf_common+0xa4>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	68e5      	ldr	r5, [r4, #12]
 800b0d2:	6832      	ldr	r2, [r6, #0]
 800b0d4:	f003 0306 	and.w	r3, r3, #6
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	bf08      	it	eq
 800b0dc:	1aad      	subeq	r5, r5, r2
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	6922      	ldr	r2, [r4, #16]
 800b0e2:	bf0c      	ite	eq
 800b0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e8:	2500      	movne	r5, #0
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	bfc4      	itt	gt
 800b0ee:	1a9b      	subgt	r3, r3, r2
 800b0f0:	18ed      	addgt	r5, r5, r3
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	341a      	adds	r4, #26
 800b0f6:	42b5      	cmp	r5, r6
 800b0f8:	d11a      	bne.n	800b130 <_printf_common+0xc8>
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	e008      	b.n	800b110 <_printf_common+0xa8>
 800b0fe:	2301      	movs	r3, #1
 800b100:	4652      	mov	r2, sl
 800b102:	4649      	mov	r1, r9
 800b104:	4638      	mov	r0, r7
 800b106:	47c0      	blx	r8
 800b108:	3001      	adds	r0, #1
 800b10a:	d103      	bne.n	800b114 <_printf_common+0xac>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b114:	3501      	adds	r5, #1
 800b116:	e7c6      	b.n	800b0a6 <_printf_common+0x3e>
 800b118:	18e1      	adds	r1, r4, r3
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	2030      	movs	r0, #48	; 0x30
 800b11e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b122:	4422      	add	r2, r4
 800b124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b12c:	3302      	adds	r3, #2
 800b12e:	e7c7      	b.n	800b0c0 <_printf_common+0x58>
 800b130:	2301      	movs	r3, #1
 800b132:	4622      	mov	r2, r4
 800b134:	4649      	mov	r1, r9
 800b136:	4638      	mov	r0, r7
 800b138:	47c0      	blx	r8
 800b13a:	3001      	adds	r0, #1
 800b13c:	d0e6      	beq.n	800b10c <_printf_common+0xa4>
 800b13e:	3601      	adds	r6, #1
 800b140:	e7d9      	b.n	800b0f6 <_printf_common+0x8e>
	...

0800b144 <_printf_i>:
 800b144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	460c      	mov	r4, r1
 800b14a:	4691      	mov	r9, r2
 800b14c:	7e27      	ldrb	r7, [r4, #24]
 800b14e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b150:	2f78      	cmp	r7, #120	; 0x78
 800b152:	4680      	mov	r8, r0
 800b154:	469a      	mov	sl, r3
 800b156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b15a:	d807      	bhi.n	800b16c <_printf_i+0x28>
 800b15c:	2f62      	cmp	r7, #98	; 0x62
 800b15e:	d80a      	bhi.n	800b176 <_printf_i+0x32>
 800b160:	2f00      	cmp	r7, #0
 800b162:	f000 80d8 	beq.w	800b316 <_printf_i+0x1d2>
 800b166:	2f58      	cmp	r7, #88	; 0x58
 800b168:	f000 80a3 	beq.w	800b2b2 <_printf_i+0x16e>
 800b16c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b174:	e03a      	b.n	800b1ec <_printf_i+0xa8>
 800b176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b17a:	2b15      	cmp	r3, #21
 800b17c:	d8f6      	bhi.n	800b16c <_printf_i+0x28>
 800b17e:	a001      	add	r0, pc, #4	; (adr r0, 800b184 <_printf_i+0x40>)
 800b180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b184:	0800b1dd 	.word	0x0800b1dd
 800b188:	0800b1f1 	.word	0x0800b1f1
 800b18c:	0800b16d 	.word	0x0800b16d
 800b190:	0800b16d 	.word	0x0800b16d
 800b194:	0800b16d 	.word	0x0800b16d
 800b198:	0800b16d 	.word	0x0800b16d
 800b19c:	0800b1f1 	.word	0x0800b1f1
 800b1a0:	0800b16d 	.word	0x0800b16d
 800b1a4:	0800b16d 	.word	0x0800b16d
 800b1a8:	0800b16d 	.word	0x0800b16d
 800b1ac:	0800b16d 	.word	0x0800b16d
 800b1b0:	0800b2fd 	.word	0x0800b2fd
 800b1b4:	0800b221 	.word	0x0800b221
 800b1b8:	0800b2df 	.word	0x0800b2df
 800b1bc:	0800b16d 	.word	0x0800b16d
 800b1c0:	0800b16d 	.word	0x0800b16d
 800b1c4:	0800b31f 	.word	0x0800b31f
 800b1c8:	0800b16d 	.word	0x0800b16d
 800b1cc:	0800b221 	.word	0x0800b221
 800b1d0:	0800b16d 	.word	0x0800b16d
 800b1d4:	0800b16d 	.word	0x0800b16d
 800b1d8:	0800b2e7 	.word	0x0800b2e7
 800b1dc:	680b      	ldr	r3, [r1, #0]
 800b1de:	1d1a      	adds	r2, r3, #4
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	600a      	str	r2, [r1, #0]
 800b1e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e0a3      	b.n	800b338 <_printf_i+0x1f4>
 800b1f0:	6825      	ldr	r5, [r4, #0]
 800b1f2:	6808      	ldr	r0, [r1, #0]
 800b1f4:	062e      	lsls	r6, r5, #24
 800b1f6:	f100 0304 	add.w	r3, r0, #4
 800b1fa:	d50a      	bpl.n	800b212 <_printf_i+0xce>
 800b1fc:	6805      	ldr	r5, [r0, #0]
 800b1fe:	600b      	str	r3, [r1, #0]
 800b200:	2d00      	cmp	r5, #0
 800b202:	da03      	bge.n	800b20c <_printf_i+0xc8>
 800b204:	232d      	movs	r3, #45	; 0x2d
 800b206:	426d      	negs	r5, r5
 800b208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b20c:	485e      	ldr	r0, [pc, #376]	; (800b388 <_printf_i+0x244>)
 800b20e:	230a      	movs	r3, #10
 800b210:	e019      	b.n	800b246 <_printf_i+0x102>
 800b212:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b216:	6805      	ldr	r5, [r0, #0]
 800b218:	600b      	str	r3, [r1, #0]
 800b21a:	bf18      	it	ne
 800b21c:	b22d      	sxthne	r5, r5
 800b21e:	e7ef      	b.n	800b200 <_printf_i+0xbc>
 800b220:	680b      	ldr	r3, [r1, #0]
 800b222:	6825      	ldr	r5, [r4, #0]
 800b224:	1d18      	adds	r0, r3, #4
 800b226:	6008      	str	r0, [r1, #0]
 800b228:	0628      	lsls	r0, r5, #24
 800b22a:	d501      	bpl.n	800b230 <_printf_i+0xec>
 800b22c:	681d      	ldr	r5, [r3, #0]
 800b22e:	e002      	b.n	800b236 <_printf_i+0xf2>
 800b230:	0669      	lsls	r1, r5, #25
 800b232:	d5fb      	bpl.n	800b22c <_printf_i+0xe8>
 800b234:	881d      	ldrh	r5, [r3, #0]
 800b236:	4854      	ldr	r0, [pc, #336]	; (800b388 <_printf_i+0x244>)
 800b238:	2f6f      	cmp	r7, #111	; 0x6f
 800b23a:	bf0c      	ite	eq
 800b23c:	2308      	moveq	r3, #8
 800b23e:	230a      	movne	r3, #10
 800b240:	2100      	movs	r1, #0
 800b242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b246:	6866      	ldr	r6, [r4, #4]
 800b248:	60a6      	str	r6, [r4, #8]
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	bfa2      	ittt	ge
 800b24e:	6821      	ldrge	r1, [r4, #0]
 800b250:	f021 0104 	bicge.w	r1, r1, #4
 800b254:	6021      	strge	r1, [r4, #0]
 800b256:	b90d      	cbnz	r5, 800b25c <_printf_i+0x118>
 800b258:	2e00      	cmp	r6, #0
 800b25a:	d04d      	beq.n	800b2f8 <_printf_i+0x1b4>
 800b25c:	4616      	mov	r6, r2
 800b25e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b262:	fb03 5711 	mls	r7, r3, r1, r5
 800b266:	5dc7      	ldrb	r7, [r0, r7]
 800b268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b26c:	462f      	mov	r7, r5
 800b26e:	42bb      	cmp	r3, r7
 800b270:	460d      	mov	r5, r1
 800b272:	d9f4      	bls.n	800b25e <_printf_i+0x11a>
 800b274:	2b08      	cmp	r3, #8
 800b276:	d10b      	bne.n	800b290 <_printf_i+0x14c>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	07df      	lsls	r7, r3, #31
 800b27c:	d508      	bpl.n	800b290 <_printf_i+0x14c>
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	6861      	ldr	r1, [r4, #4]
 800b282:	4299      	cmp	r1, r3
 800b284:	bfde      	ittt	le
 800b286:	2330      	movle	r3, #48	; 0x30
 800b288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b28c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b290:	1b92      	subs	r2, r2, r6
 800b292:	6122      	str	r2, [r4, #16]
 800b294:	f8cd a000 	str.w	sl, [sp]
 800b298:	464b      	mov	r3, r9
 800b29a:	aa03      	add	r2, sp, #12
 800b29c:	4621      	mov	r1, r4
 800b29e:	4640      	mov	r0, r8
 800b2a0:	f7ff fee2 	bl	800b068 <_printf_common>
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d14c      	bne.n	800b342 <_printf_i+0x1fe>
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	b004      	add	sp, #16
 800b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b2:	4835      	ldr	r0, [pc, #212]	; (800b388 <_printf_i+0x244>)
 800b2b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	680e      	ldr	r6, [r1, #0]
 800b2bc:	061f      	lsls	r7, r3, #24
 800b2be:	f856 5b04 	ldr.w	r5, [r6], #4
 800b2c2:	600e      	str	r6, [r1, #0]
 800b2c4:	d514      	bpl.n	800b2f0 <_printf_i+0x1ac>
 800b2c6:	07d9      	lsls	r1, r3, #31
 800b2c8:	bf44      	itt	mi
 800b2ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b2ce:	6023      	strmi	r3, [r4, #0]
 800b2d0:	b91d      	cbnz	r5, 800b2da <_printf_i+0x196>
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	f023 0320 	bic.w	r3, r3, #32
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	2310      	movs	r3, #16
 800b2dc:	e7b0      	b.n	800b240 <_printf_i+0xfc>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	f043 0320 	orr.w	r3, r3, #32
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	2378      	movs	r3, #120	; 0x78
 800b2e8:	4828      	ldr	r0, [pc, #160]	; (800b38c <_printf_i+0x248>)
 800b2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2ee:	e7e3      	b.n	800b2b8 <_printf_i+0x174>
 800b2f0:	065e      	lsls	r6, r3, #25
 800b2f2:	bf48      	it	mi
 800b2f4:	b2ad      	uxthmi	r5, r5
 800b2f6:	e7e6      	b.n	800b2c6 <_printf_i+0x182>
 800b2f8:	4616      	mov	r6, r2
 800b2fa:	e7bb      	b.n	800b274 <_printf_i+0x130>
 800b2fc:	680b      	ldr	r3, [r1, #0]
 800b2fe:	6826      	ldr	r6, [r4, #0]
 800b300:	6960      	ldr	r0, [r4, #20]
 800b302:	1d1d      	adds	r5, r3, #4
 800b304:	600d      	str	r5, [r1, #0]
 800b306:	0635      	lsls	r5, r6, #24
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	d501      	bpl.n	800b310 <_printf_i+0x1cc>
 800b30c:	6018      	str	r0, [r3, #0]
 800b30e:	e002      	b.n	800b316 <_printf_i+0x1d2>
 800b310:	0671      	lsls	r1, r6, #25
 800b312:	d5fb      	bpl.n	800b30c <_printf_i+0x1c8>
 800b314:	8018      	strh	r0, [r3, #0]
 800b316:	2300      	movs	r3, #0
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	4616      	mov	r6, r2
 800b31c:	e7ba      	b.n	800b294 <_printf_i+0x150>
 800b31e:	680b      	ldr	r3, [r1, #0]
 800b320:	1d1a      	adds	r2, r3, #4
 800b322:	600a      	str	r2, [r1, #0]
 800b324:	681e      	ldr	r6, [r3, #0]
 800b326:	6862      	ldr	r2, [r4, #4]
 800b328:	2100      	movs	r1, #0
 800b32a:	4630      	mov	r0, r6
 800b32c:	f7f4 ffd8 	bl	80002e0 <memchr>
 800b330:	b108      	cbz	r0, 800b336 <_printf_i+0x1f2>
 800b332:	1b80      	subs	r0, r0, r6
 800b334:	6060      	str	r0, [r4, #4]
 800b336:	6863      	ldr	r3, [r4, #4]
 800b338:	6123      	str	r3, [r4, #16]
 800b33a:	2300      	movs	r3, #0
 800b33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b340:	e7a8      	b.n	800b294 <_printf_i+0x150>
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	4632      	mov	r2, r6
 800b346:	4649      	mov	r1, r9
 800b348:	4640      	mov	r0, r8
 800b34a:	47d0      	blx	sl
 800b34c:	3001      	adds	r0, #1
 800b34e:	d0ab      	beq.n	800b2a8 <_printf_i+0x164>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	079b      	lsls	r3, r3, #30
 800b354:	d413      	bmi.n	800b37e <_printf_i+0x23a>
 800b356:	68e0      	ldr	r0, [r4, #12]
 800b358:	9b03      	ldr	r3, [sp, #12]
 800b35a:	4298      	cmp	r0, r3
 800b35c:	bfb8      	it	lt
 800b35e:	4618      	movlt	r0, r3
 800b360:	e7a4      	b.n	800b2ac <_printf_i+0x168>
 800b362:	2301      	movs	r3, #1
 800b364:	4632      	mov	r2, r6
 800b366:	4649      	mov	r1, r9
 800b368:	4640      	mov	r0, r8
 800b36a:	47d0      	blx	sl
 800b36c:	3001      	adds	r0, #1
 800b36e:	d09b      	beq.n	800b2a8 <_printf_i+0x164>
 800b370:	3501      	adds	r5, #1
 800b372:	68e3      	ldr	r3, [r4, #12]
 800b374:	9903      	ldr	r1, [sp, #12]
 800b376:	1a5b      	subs	r3, r3, r1
 800b378:	42ab      	cmp	r3, r5
 800b37a:	dcf2      	bgt.n	800b362 <_printf_i+0x21e>
 800b37c:	e7eb      	b.n	800b356 <_printf_i+0x212>
 800b37e:	2500      	movs	r5, #0
 800b380:	f104 0619 	add.w	r6, r4, #25
 800b384:	e7f5      	b.n	800b372 <_printf_i+0x22e>
 800b386:	bf00      	nop
 800b388:	0800b71d 	.word	0x0800b71d
 800b38c:	0800b72e 	.word	0x0800b72e

0800b390 <_read_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_read_r+0x20>)
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	2200      	movs	r2, #0
 800b39c:	602a      	str	r2, [r5, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7f5 fe30 	bl	8001004 <_read>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_read_r+0x1e>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_read_r+0x1e>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	2400021c 	.word	0x2400021c

0800b3b4 <__swbuf_r>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	b118      	cbz	r0, 800b3c6 <__swbuf_r+0x12>
 800b3be:	6983      	ldr	r3, [r0, #24]
 800b3c0:	b90b      	cbnz	r3, 800b3c6 <__swbuf_r+0x12>
 800b3c2:	f7ff fad3 	bl	800a96c <__sinit>
 800b3c6:	4b21      	ldr	r3, [pc, #132]	; (800b44c <__swbuf_r+0x98>)
 800b3c8:	429c      	cmp	r4, r3
 800b3ca:	d12b      	bne.n	800b424 <__swbuf_r+0x70>
 800b3cc:	686c      	ldr	r4, [r5, #4]
 800b3ce:	69a3      	ldr	r3, [r4, #24]
 800b3d0:	60a3      	str	r3, [r4, #8]
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	071a      	lsls	r2, r3, #28
 800b3d6:	d52f      	bpl.n	800b438 <__swbuf_r+0x84>
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	b36b      	cbz	r3, 800b438 <__swbuf_r+0x84>
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	6820      	ldr	r0, [r4, #0]
 800b3e0:	1ac0      	subs	r0, r0, r3
 800b3e2:	6963      	ldr	r3, [r4, #20]
 800b3e4:	b2f6      	uxtb	r6, r6
 800b3e6:	4283      	cmp	r3, r0
 800b3e8:	4637      	mov	r7, r6
 800b3ea:	dc04      	bgt.n	800b3f6 <__swbuf_r+0x42>
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f7ff fa16 	bl	800a820 <_fflush_r>
 800b3f4:	bb30      	cbnz	r0, 800b444 <__swbuf_r+0x90>
 800b3f6:	68a3      	ldr	r3, [r4, #8]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	60a3      	str	r3, [r4, #8]
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	6022      	str	r2, [r4, #0]
 800b402:	701e      	strb	r6, [r3, #0]
 800b404:	6963      	ldr	r3, [r4, #20]
 800b406:	3001      	adds	r0, #1
 800b408:	4283      	cmp	r3, r0
 800b40a:	d004      	beq.n	800b416 <__swbuf_r+0x62>
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	07db      	lsls	r3, r3, #31
 800b410:	d506      	bpl.n	800b420 <__swbuf_r+0x6c>
 800b412:	2e0a      	cmp	r6, #10
 800b414:	d104      	bne.n	800b420 <__swbuf_r+0x6c>
 800b416:	4621      	mov	r1, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	f7ff fa01 	bl	800a820 <_fflush_r>
 800b41e:	b988      	cbnz	r0, 800b444 <__swbuf_r+0x90>
 800b420:	4638      	mov	r0, r7
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <__swbuf_r+0x9c>)
 800b426:	429c      	cmp	r4, r3
 800b428:	d101      	bne.n	800b42e <__swbuf_r+0x7a>
 800b42a:	68ac      	ldr	r4, [r5, #8]
 800b42c:	e7cf      	b.n	800b3ce <__swbuf_r+0x1a>
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <__swbuf_r+0xa0>)
 800b430:	429c      	cmp	r4, r3
 800b432:	bf08      	it	eq
 800b434:	68ec      	ldreq	r4, [r5, #12]
 800b436:	e7ca      	b.n	800b3ce <__swbuf_r+0x1a>
 800b438:	4621      	mov	r1, r4
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 f80c 	bl	800b458 <__swsetup_r>
 800b440:	2800      	cmp	r0, #0
 800b442:	d0cb      	beq.n	800b3dc <__swbuf_r+0x28>
 800b444:	f04f 37ff 	mov.w	r7, #4294967295
 800b448:	e7ea      	b.n	800b420 <__swbuf_r+0x6c>
 800b44a:	bf00      	nop
 800b44c:	0800b6c8 	.word	0x0800b6c8
 800b450:	0800b6e8 	.word	0x0800b6e8
 800b454:	0800b6a8 	.word	0x0800b6a8

0800b458 <__swsetup_r>:
 800b458:	4b32      	ldr	r3, [pc, #200]	; (800b524 <__swsetup_r+0xcc>)
 800b45a:	b570      	push	{r4, r5, r6, lr}
 800b45c:	681d      	ldr	r5, [r3, #0]
 800b45e:	4606      	mov	r6, r0
 800b460:	460c      	mov	r4, r1
 800b462:	b125      	cbz	r5, 800b46e <__swsetup_r+0x16>
 800b464:	69ab      	ldr	r3, [r5, #24]
 800b466:	b913      	cbnz	r3, 800b46e <__swsetup_r+0x16>
 800b468:	4628      	mov	r0, r5
 800b46a:	f7ff fa7f 	bl	800a96c <__sinit>
 800b46e:	4b2e      	ldr	r3, [pc, #184]	; (800b528 <__swsetup_r+0xd0>)
 800b470:	429c      	cmp	r4, r3
 800b472:	d10f      	bne.n	800b494 <__swsetup_r+0x3c>
 800b474:	686c      	ldr	r4, [r5, #4]
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b47c:	0719      	lsls	r1, r3, #28
 800b47e:	d42c      	bmi.n	800b4da <__swsetup_r+0x82>
 800b480:	06dd      	lsls	r5, r3, #27
 800b482:	d411      	bmi.n	800b4a8 <__swsetup_r+0x50>
 800b484:	2309      	movs	r3, #9
 800b486:	6033      	str	r3, [r6, #0]
 800b488:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	f04f 30ff 	mov.w	r0, #4294967295
 800b492:	e03e      	b.n	800b512 <__swsetup_r+0xba>
 800b494:	4b25      	ldr	r3, [pc, #148]	; (800b52c <__swsetup_r+0xd4>)
 800b496:	429c      	cmp	r4, r3
 800b498:	d101      	bne.n	800b49e <__swsetup_r+0x46>
 800b49a:	68ac      	ldr	r4, [r5, #8]
 800b49c:	e7eb      	b.n	800b476 <__swsetup_r+0x1e>
 800b49e:	4b24      	ldr	r3, [pc, #144]	; (800b530 <__swsetup_r+0xd8>)
 800b4a0:	429c      	cmp	r4, r3
 800b4a2:	bf08      	it	eq
 800b4a4:	68ec      	ldreq	r4, [r5, #12]
 800b4a6:	e7e6      	b.n	800b476 <__swsetup_r+0x1e>
 800b4a8:	0758      	lsls	r0, r3, #29
 800b4aa:	d512      	bpl.n	800b4d2 <__swsetup_r+0x7a>
 800b4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ae:	b141      	cbz	r1, 800b4c2 <__swsetup_r+0x6a>
 800b4b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	d002      	beq.n	800b4be <__swsetup_r+0x66>
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f7ff fb25 	bl	800ab08 <_free_r>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6363      	str	r3, [r4, #52]	; 0x34
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4c8:	81a3      	strh	r3, [r4, #12]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	6063      	str	r3, [r4, #4]
 800b4ce:	6923      	ldr	r3, [r4, #16]
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	f043 0308 	orr.w	r3, r3, #8
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	b94b      	cbnz	r3, 800b4f2 <__swsetup_r+0x9a>
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4e8:	d003      	beq.n	800b4f2 <__swsetup_r+0x9a>
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f000 f845 	bl	800b57c <__smakebuf_r>
 800b4f2:	89a0      	ldrh	r0, [r4, #12]
 800b4f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4f8:	f010 0301 	ands.w	r3, r0, #1
 800b4fc:	d00a      	beq.n	800b514 <__swsetup_r+0xbc>
 800b4fe:	2300      	movs	r3, #0
 800b500:	60a3      	str	r3, [r4, #8]
 800b502:	6963      	ldr	r3, [r4, #20]
 800b504:	425b      	negs	r3, r3
 800b506:	61a3      	str	r3, [r4, #24]
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	b943      	cbnz	r3, 800b51e <__swsetup_r+0xc6>
 800b50c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b510:	d1ba      	bne.n	800b488 <__swsetup_r+0x30>
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	0781      	lsls	r1, r0, #30
 800b516:	bf58      	it	pl
 800b518:	6963      	ldrpl	r3, [r4, #20]
 800b51a:	60a3      	str	r3, [r4, #8]
 800b51c:	e7f4      	b.n	800b508 <__swsetup_r+0xb0>
 800b51e:	2000      	movs	r0, #0
 800b520:	e7f7      	b.n	800b512 <__swsetup_r+0xba>
 800b522:	bf00      	nop
 800b524:	24000010 	.word	0x24000010
 800b528:	0800b6c8 	.word	0x0800b6c8
 800b52c:	0800b6e8 	.word	0x0800b6e8
 800b530:	0800b6a8 	.word	0x0800b6a8

0800b534 <__swhatbuf_r>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	460e      	mov	r6, r1
 800b538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53c:	2900      	cmp	r1, #0
 800b53e:	b096      	sub	sp, #88	; 0x58
 800b540:	4614      	mov	r4, r2
 800b542:	461d      	mov	r5, r3
 800b544:	da07      	bge.n	800b556 <__swhatbuf_r+0x22>
 800b546:	2300      	movs	r3, #0
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	89b3      	ldrh	r3, [r6, #12]
 800b54c:	061a      	lsls	r2, r3, #24
 800b54e:	d410      	bmi.n	800b572 <__swhatbuf_r+0x3e>
 800b550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b554:	e00e      	b.n	800b574 <__swhatbuf_r+0x40>
 800b556:	466a      	mov	r2, sp
 800b558:	f000 f850 	bl	800b5fc <_fstat_r>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	dbf2      	blt.n	800b546 <__swhatbuf_r+0x12>
 800b560:	9a01      	ldr	r2, [sp, #4]
 800b562:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b566:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b56a:	425a      	negs	r2, r3
 800b56c:	415a      	adcs	r2, r3
 800b56e:	602a      	str	r2, [r5, #0]
 800b570:	e7ee      	b.n	800b550 <__swhatbuf_r+0x1c>
 800b572:	2340      	movs	r3, #64	; 0x40
 800b574:	2000      	movs	r0, #0
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	b016      	add	sp, #88	; 0x58
 800b57a:	bd70      	pop	{r4, r5, r6, pc}

0800b57c <__smakebuf_r>:
 800b57c:	898b      	ldrh	r3, [r1, #12]
 800b57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b580:	079d      	lsls	r5, r3, #30
 800b582:	4606      	mov	r6, r0
 800b584:	460c      	mov	r4, r1
 800b586:	d507      	bpl.n	800b598 <__smakebuf_r+0x1c>
 800b588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	2301      	movs	r3, #1
 800b592:	6163      	str	r3, [r4, #20]
 800b594:	b002      	add	sp, #8
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	ab01      	add	r3, sp, #4
 800b59a:	466a      	mov	r2, sp
 800b59c:	f7ff ffca 	bl	800b534 <__swhatbuf_r>
 800b5a0:	9900      	ldr	r1, [sp, #0]
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7ff faff 	bl	800aba8 <_malloc_r>
 800b5aa:	b948      	cbnz	r0, 800b5c0 <__smakebuf_r+0x44>
 800b5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b0:	059a      	lsls	r2, r3, #22
 800b5b2:	d4ef      	bmi.n	800b594 <__smakebuf_r+0x18>
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	f043 0302 	orr.w	r3, r3, #2
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	e7e3      	b.n	800b588 <__smakebuf_r+0xc>
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <__smakebuf_r+0x7c>)
 800b5c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	6020      	str	r0, [r4, #0]
 800b5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5cc:	81a3      	strh	r3, [r4, #12]
 800b5ce:	9b00      	ldr	r3, [sp, #0]
 800b5d0:	6163      	str	r3, [r4, #20]
 800b5d2:	9b01      	ldr	r3, [sp, #4]
 800b5d4:	6120      	str	r0, [r4, #16]
 800b5d6:	b15b      	cbz	r3, 800b5f0 <__smakebuf_r+0x74>
 800b5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f000 f81f 	bl	800b620 <_isatty_r>
 800b5e2:	b128      	cbz	r0, 800b5f0 <__smakebuf_r+0x74>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f023 0303 	bic.w	r3, r3, #3
 800b5ea:	f043 0301 	orr.w	r3, r3, #1
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	89a0      	ldrh	r0, [r4, #12]
 800b5f2:	4305      	orrs	r5, r0
 800b5f4:	81a5      	strh	r5, [r4, #12]
 800b5f6:	e7cd      	b.n	800b594 <__smakebuf_r+0x18>
 800b5f8:	0800a905 	.word	0x0800a905

0800b5fc <_fstat_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4d07      	ldr	r5, [pc, #28]	; (800b61c <_fstat_r+0x20>)
 800b600:	2300      	movs	r3, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	4611      	mov	r1, r2
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	f7f5 fd24 	bl	8001056 <_fstat>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d102      	bne.n	800b618 <_fstat_r+0x1c>
 800b612:	682b      	ldr	r3, [r5, #0]
 800b614:	b103      	cbz	r3, 800b618 <_fstat_r+0x1c>
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	bd38      	pop	{r3, r4, r5, pc}
 800b61a:	bf00      	nop
 800b61c:	2400021c 	.word	0x2400021c

0800b620 <_isatty_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d06      	ldr	r5, [pc, #24]	; (800b63c <_isatty_r+0x1c>)
 800b624:	2300      	movs	r3, #0
 800b626:	4604      	mov	r4, r0
 800b628:	4608      	mov	r0, r1
 800b62a:	602b      	str	r3, [r5, #0]
 800b62c:	f7f5 fd23 	bl	8001076 <_isatty>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d102      	bne.n	800b63a <_isatty_r+0x1a>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	b103      	cbz	r3, 800b63a <_isatty_r+0x1a>
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	2400021c 	.word	0x2400021c

0800b640 <_init>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	bf00      	nop
 800b644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b646:	bc08      	pop	{r3}
 800b648:	469e      	mov	lr, r3
 800b64a:	4770      	bx	lr

0800b64c <_fini>:
 800b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64e:	bf00      	nop
 800b650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b652:	bc08      	pop	{r3}
 800b654:	469e      	mov	lr, r3
 800b656:	4770      	bx	lr
