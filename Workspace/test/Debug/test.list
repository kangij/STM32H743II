
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d38  08007d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  24000010  08007d50  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  240001e8  08007d50  000201e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d151  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044f5  00000000  00000000  0004d18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  00051688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001170  00000000  00000000  00052990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037c84  00000000  00000000  00053b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cbec  00000000  00000000  0008b784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e115  00000000  00000000  000a8370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00206485  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d78  00000000  00000000  002064d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ce0 	.word	0x08007ce0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007ce0 	.word	0x08007ce0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <User_BSP_Init>:
 */

#include "Driver.h"

void User_BSP_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	BSP_Driver_Init();
 80005d4:	f000 f818 	bl	8000608 <BSP_Driver_Init>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <Driver_ADC_Test_Task>:
{

}

void Driver_ADC_Test_Task(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <Driver_Uart_Debug_Init>:

#define DEBUG_UART_PORT (&huart1)
#define DEBUG_BAUDRATE  (BAUD_115200)

void Driver_Uart_Debug_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	Peri_Uart_Init(PERI_UART1);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 f84f 	bl	8000694 <Peri_Uart_Init>
	Peri_Uart_BuadRate_Change(DEBUG_UART_PORT, DEBUG_BAUDRATE);
 80005f6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005fa:	4802      	ldr	r0, [pc, #8]	; (8000604 <Driver_Uart_Debug_Init+0x18>)
 80005fc:	f000 f86e 	bl	80006dc <Peri_Uart_BuadRate_Change>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	24000154 	.word	0x24000154

08000608 <BSP_Driver_Init>:

#include "DEBUG/debug.h"
//#include "ADC_Data/ADC_Data.h"

void BSP_Driver_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	Driver_Uart_Debug_Init();
 800060c:	f7ff ffee 	bl	80005ec <Driver_Uart_Debug_Init>
///	Driver_ADC_Data_Init();
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{

}
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <HAL_I2C_AddrCallback>:
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
 8000648:	4613      	mov	r3, r2
 800064a:	803b      	strh	r3, [r7, #0]

}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <HAL_I2C_ListenCpltCallback>:
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <HAL_I2C_ErrorCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{

}
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <Peri_Uart_Init>:
void Peri_Uart_DMA_Control(uint8_t mod, UART_HandleTypeDef* uartHandle);
void Peri_Uart_Abort_Control(uint8_t mod, UART_HandleTypeDef* uartHandle);
void Peri_Uart_Status_Check(void);

void Peri_Uart_Init(uint8_t peri_num)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	switch(peri_num)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	d816      	bhi.n	80006d2 <Peri_Uart_Init+0x3e>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <Peri_Uart_Init+0x18>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006d3 	.word	0x080006d3
 80006b4:	080006d3 	.word	0x080006d3
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	080006d3 	.word	0x080006d3
 80006c0:	080006d3 	.word	0x080006d3
 80006c4:	080006d3 	.word	0x080006d3
 80006c8:	080006d3 	.word	0x080006d3
	{
	case PERI_UART1:
		MX_USART1_UART_Init();
 80006cc:	f000 fd00 	bl	80010d0 <MX_USART1_UART_Init>
		break;
 80006d0:	e000      	b.n	80006d4 <Peri_Uart_Init+0x40>
	case PERI_UART8:

		break;

	default:
			break;
 80006d2:	bf00      	nop
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <Peri_Uart_BuadRate_Change>:
	HAL_UART_DeInit(uartHandle);
}


void Peri_Uart_BuadRate_Change(UART_HandleTypeDef* uartHandle,uint32_t buadrate)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	uartHandle->Init.BaudRate=buadrate;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartHandle);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f006 fa62 	bl	8006bb6 <HAL_UART_Init>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	4b80      	ldr	r3, [pc, #512]	; (8000914 <MX_GPIO_Init+0x218>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a7e      	ldr	r2, [pc, #504]	; (8000914 <MX_GPIO_Init+0x218>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b7c      	ldr	r3, [pc, #496]	; (8000914 <MX_GPIO_Init+0x218>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	623b      	str	r3, [r7, #32]
 800072e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000730:	4b78      	ldr	r3, [pc, #480]	; (8000914 <MX_GPIO_Init+0x218>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	4a77      	ldr	r2, [pc, #476]	; (8000914 <MX_GPIO_Init+0x218>)
 8000738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800073c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000740:	4b74      	ldr	r3, [pc, #464]	; (8000914 <MX_GPIO_Init+0x218>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b71      	ldr	r3, [pc, #452]	; (8000914 <MX_GPIO_Init+0x218>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	4a6f      	ldr	r2, [pc, #444]	; (8000914 <MX_GPIO_Init+0x218>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075e:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <MX_GPIO_Init+0x218>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076c:	4b69      	ldr	r3, [pc, #420]	; (8000914 <MX_GPIO_Init+0x218>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	4a68      	ldr	r2, [pc, #416]	; (8000914 <MX_GPIO_Init+0x218>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077c:	4b65      	ldr	r3, [pc, #404]	; (8000914 <MX_GPIO_Init+0x218>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b62      	ldr	r3, [pc, #392]	; (8000914 <MX_GPIO_Init+0x218>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	4a60      	ldr	r2, [pc, #384]	; (8000914 <MX_GPIO_Init+0x218>)
 8000792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b5e      	ldr	r3, [pc, #376]	; (8000914 <MX_GPIO_Init+0x218>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b5a      	ldr	r3, [pc, #360]	; (8000914 <MX_GPIO_Init+0x218>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	4a59      	ldr	r2, [pc, #356]	; (8000914 <MX_GPIO_Init+0x218>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b8:	4b56      	ldr	r3, [pc, #344]	; (8000914 <MX_GPIO_Init+0x218>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b53      	ldr	r3, [pc, #332]	; (8000914 <MX_GPIO_Init+0x218>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	4a51      	ldr	r2, [pc, #324]	; (8000914 <MX_GPIO_Init+0x218>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d6:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <MX_GPIO_Init+0x218>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <MX_GPIO_Init+0x218>)
 80007e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ea:	4a4a      	ldr	r2, [pc, #296]	; (8000914 <MX_GPIO_Init+0x218>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f4:	4b47      	ldr	r3, [pc, #284]	; (8000914 <MX_GPIO_Init+0x218>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	4b44      	ldr	r3, [pc, #272]	; (8000914 <MX_GPIO_Init+0x218>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	4a42      	ldr	r2, [pc, #264]	; (8000914 <MX_GPIO_Init+0x218>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <MX_GPIO_Init+0x218>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	4838      	ldr	r0, [pc, #224]	; (8000918 <MX_GPIO_Init+0x21c>)
 8000836:	f001 f927 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI9 PI10 PI11
                           PI0 PI1 PI2 PI3
                           PI4 PI5 PI6 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800083a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000840:	2303      	movs	r3, #3
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	4833      	ldr	r0, [pc, #204]	; (800091c <MX_GPIO_Init+0x220>)
 8000850:	f001 f91a 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3
 8000854:	f643 73fd 	movw	r3, #16381	; 0x3ffd
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	4619      	mov	r1, r3
 8000868:	482d      	ldr	r0, [pc, #180]	; (8000920 <MX_GPIO_Init+0x224>)
 800086a:	f001 f90d 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000874:	2303      	movs	r3, #3
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	4828      	ldr	r0, [pc, #160]	; (8000924 <MX_GPIO_Init+0x228>)
 8000884:	f001 f900 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000888:	f641 131f 	movw	r3, #6431	; 0x191f
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4822      	ldr	r0, [pc, #136]	; (8000928 <MX_GPIO_Init+0x22c>)
 800089e:	f001 f8f3 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5
                           PH6 PH7 PH8 PH9
                           PH10 PH11 PH12 PH13
                           PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008a2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	481d      	ldr	r0, [pc, #116]	; (800092c <MX_GPIO_Init+0x230>)
 80008b8:	f001 f8e6 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB14 PB15 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008bc:	f64c 43f7 	movw	r3, #52471	; 0xccf7
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_GPIO_Init+0x234>)
 80008d2:	f001 f8d9 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_GPIO_Init+0x238>)
 80008ec:	f001 f8cc 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f6:	2303      	movs	r3, #3
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0x23c>)
 8000906:	f001 f8bf 	bl	8001a88 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3738      	adds	r7, #56	; 0x38
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58024400 	.word	0x58024400
 8000918:	58021000 	.word	0x58021000
 800091c:	58022000 	.word	0x58022000
 8000920:	58020800 	.word	0x58020800
 8000924:	58021400 	.word	0x58021400
 8000928:	58020000 	.word	0x58020000
 800092c:	58021c00 	.word	0x58021c00
 8000930:	58020400 	.word	0x58020400
 8000934:	58021800 	.word	0x58021800
 8000938:	58020c00 	.word	0x58020c00

0800093c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_I2C1_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000978:	f001 fa36 	bl	8001de8 <HAL_I2C_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 f9e9 	bl	8000d58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <MX_I2C1_Init+0x74>)
 800098a:	f002 f902 	bl	8002b92 <HAL_I2CEx_ConfigAnalogFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 f9e0 	bl	8000d58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_I2C1_Init+0x74>)
 800099c:	f002 f944 	bl	8002c28 <HAL_I2CEx_ConfigDigitalFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 f9d7 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2400002c 	.word	0x2400002c
 80009b4:	40005400 	.word	0x40005400
 80009b8:	00b03fdb 	.word	0x00b03fdb

080009bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0b8      	sub	sp, #224	; 0xe0
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	22bc      	movs	r2, #188	; 0xbc
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f007 f977 	bl	8007cd0 <memset>
  if(i2cHandle->Instance==I2C1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <HAL_I2C_MspInit+0xe0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d152      	bne.n	8000a92 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009ec:	2308      	movs	r3, #8
 80009ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fb72 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a06:	f000 f9a7 	bl	8000d58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <HAL_I2C_MspInit+0xe4>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_I2C_MspInit+0xe4>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_I2C_MspInit+0xe4>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a42:	2304      	movs	r3, #4
 8000a44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <HAL_I2C_MspInit+0xe8>)
 8000a50:	f001 f81a 	bl	8001a88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_I2C_MspInit+0xe4>)
 8000a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_I2C_MspInit+0xe4>)
 8000a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_I2C_MspInit+0xe4>)
 8000a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	201f      	movs	r0, #31
 8000a78:	f000 fd7f 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a7c:	201f      	movs	r0, #31
 8000a7e:	f000 fd96 	bl	80015ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2020      	movs	r0, #32
 8000a88:	f000 fd77 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a8c:	2020      	movs	r0, #32
 8000a8e:	f000 fd8e 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a92:	bf00      	nop
 8000a94:	37e0      	adds	r7, #224	; 0xe0
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	58024400 	.word	0x58024400
 8000aa4:	58020400 	.word	0x58020400

08000aa8 <MX_I2S2_Init>:

I2S_HandleTypeDef hi2s2;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <MX_I2S2_Init+0x60>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000acc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_I2S2_Init+0x5c>)
 8000af2:	f002 f8e5 	bl	8002cc0 <HAL_I2S_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2S2_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f92c 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000078 	.word	0x24000078
 8000b08:	40003800 	.word	0x40003800

08000b0c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ba      	sub	sp, #232	; 0xe8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	22bc      	movs	r2, #188	; 0xbc
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f007 f8cf 	bl	8007cd0 <memset>
  if(i2sHandle->Instance==SPI2)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a3b      	ldr	r2, [pc, #236]	; (8000c24 <HAL_I2S_MspInit+0x118>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d16e      	bne.n	8000c1a <HAL_I2S_MspInit+0x10e>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 faca 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 8000b56:	f000 f8ff 	bl	8000d58 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b60:	4a31      	ldr	r2, [pc, #196]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_I2S_MspInit+0x11c>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SDO
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bcc:	2305      	movs	r3, #5
 8000bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <HAL_I2S_MspInit+0x120>)
 8000bda:	f000 ff55 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c02:	4619      	mov	r1, r3
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <HAL_I2S_MspInit+0x124>)
 8000c06:	f000 ff3f 	bl	8001a88 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2024      	movs	r0, #36	; 0x24
 8000c10:	f000 fcb3 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c14:	2024      	movs	r0, #36	; 0x24
 8000c16:	f000 fcca 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	37e8      	adds	r7, #232	; 0xe8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40003800 	.word	0x40003800
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020800 	.word	0x58020800
 8000c30:	58020400 	.word	0x58020400

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fb26 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f810 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f7ff fd5c 	bl	80006fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c44:	f000 fa44 	bl	80010d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000c48:	f7ff fe78 	bl	800093c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000c4c:	f7ff ff2c 	bl	8000aa8 <MX_I2S2_Init>
  MX_SPI1_Init();
 8000c50:	f000 f888 	bl	8000d64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  User_BSP_Init();
 8000c54:	f7ff fcbc 	bl	80005d0 <User_BSP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Driver_ADC_Test_Task();
 8000c58:	f7ff fcc0 	bl	80005dc <Driver_ADC_Test_Task>
 8000c5c:	e7fc      	b.n	8000c58 <main+0x24>
	...

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09c      	sub	sp, #112	; 0x70
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	224c      	movs	r2, #76	; 0x4c
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f007 f82e 	bl	8007cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2220      	movs	r2, #32
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f007 f828 	bl	8007cd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c80:	2002      	movs	r0, #2
 8000c82:	f002 fa3d 	bl	8003100 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <SystemClock_Config+0xf0>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <SystemClock_Config+0xf0>)
 8000c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <SystemClock_Config+0xf0>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <SystemClock_Config+0xf4>)
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <SystemClock_Config+0xf4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <SystemClock_Config+0xf4>)
 8000cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb8:	bf00      	nop
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <SystemClock_Config+0xf0>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc6:	d1f8      	bne.n	8000cba <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ce0:	233c      	movs	r3, #60	; 0x3c
 8000ce2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000ce8:	2314      	movs	r3, #20
 8000cea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fa37 	bl	8003174 <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d0c:	f000 f824 	bl	8000d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	233f      	movs	r3, #63	; 0x3f
 8000d12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2303      	movs	r3, #3
 8000d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d20:	2340      	movs	r3, #64	; 0x40
 8000d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2104      	movs	r1, #4
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fe48 	bl	80039cc <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d42:	f000 f809 	bl	8000d58 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3770      	adds	r7, #112	; 0x70
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58024800 	.word	0x58024800
 8000d54:	58000400 	.word	0x58000400

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d6a:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <MX_SPI1_Init+0xa8>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d7e:	2207      	movs	r2, #7
 8000d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000d98:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000d9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000db8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_SPI1_Init+0xa4>)
 8000df6:	f005 fafb 	bl	80063f0 <HAL_SPI_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000e00:	f7ff ffaa 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	240000cc 	.word	0x240000cc
 8000e0c:	40013000 	.word	0x40013000

08000e10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0b8      	sub	sp, #224	; 0xe0
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	22bc      	movs	r2, #188	; 0xbc
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 ff4d 	bl	8007cd0 <memset>
  if(spiHandle->Instance==SPI1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_SPI_MspInit+0xcc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d149      	bne.n	8000ed4 <HAL_SPI_MspInit+0xc4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 f948 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000e5a:	f7ff ff7d 	bl	8000d58 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_SPI_MspInit+0xd0>)
 8000e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e64:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <HAL_SPI_MspInit+0xd0>)
 8000e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_SPI_MspInit+0xd0>)
 8000e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_SPI_MspInit+0xd0>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_SPI_MspInit+0xd0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_SPI_MspInit+0xd0>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e9a:	23e0      	movs	r3, #224	; 0xe0
 8000e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000ec0:	f000 fde2 	bl	8001a88 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2023      	movs	r0, #35	; 0x23
 8000eca:	f000 fb56 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ece:	2023      	movs	r0, #35	; 0x23
 8000ed0:	f000 fb6d 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	37e0      	adds	r7, #224	; 0xe0
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40013000 	.word	0x40013000
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020000 	.word	0x58020000

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	58024400 	.word	0x58024400

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 fa00 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <I2C1_EV_IRQHandler+0x10>)
 8000f76:	f000 ffc7 	bl	8001f08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2400002c 	.word	0x2400002c

08000f84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <I2C1_ER_IRQHandler+0x10>)
 8000f8a:	f000 ffd7 	bl	8001f3c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2400002c 	.word	0x2400002c

08000f98 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <SPI1_IRQHandler+0x10>)
 8000f9e:	f005 fb2d 	bl	80065fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	240000cc 	.word	0x240000cc

08000fac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <SPI2_IRQHandler+0x10>)
 8000fb2:	f001 ffa5 	bl	8002f00 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	24000078 	.word	0x24000078

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <SystemInit+0xe4>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a36      	ldr	r2, [pc, #216]	; (80010a4 <SystemInit+0xe4>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <SystemInit+0xe8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	2b06      	cmp	r3, #6
 8000fde:	d807      	bhi.n	8000ff0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fe0:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <SystemInit+0xe8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f023 030f 	bic.w	r3, r3, #15
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <SystemInit+0xe8>)
 8000fea:	f043 0307 	orr.w	r3, r3, #7
 8000fee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <SystemInit+0xec>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <SystemInit+0xec>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <SystemInit+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <SystemInit+0xec>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4929      	ldr	r1, [pc, #164]	; (80010ac <SystemInit+0xec>)
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <SystemInit+0xf0>)
 800100a:	4013      	ands	r3, r2
 800100c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <SystemInit+0xe8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <SystemInit+0xe8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 030f 	bic.w	r3, r3, #15
 8001022:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <SystemInit+0xe8>)
 8001024:	f043 0307 	orr.w	r3, r3, #7
 8001028:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <SystemInit+0xec>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <SystemInit+0xec>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <SystemInit+0xec>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <SystemInit+0xec>)
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <SystemInit+0xf4>)
 8001040:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <SystemInit+0xec>)
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <SystemInit+0xf8>)
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <SystemInit+0xec>)
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <SystemInit+0xfc>)
 800104c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <SystemInit+0xec>)
 8001050:	2200      	movs	r2, #0
 8001052:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <SystemInit+0xec>)
 8001056:	4a19      	ldr	r2, [pc, #100]	; (80010bc <SystemInit+0xfc>)
 8001058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <SystemInit+0xec>)
 800105c:	2200      	movs	r2, #0
 800105e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <SystemInit+0xec>)
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <SystemInit+0xfc>)
 8001064:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <SystemInit+0xec>)
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <SystemInit+0xec>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <SystemInit+0xec>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <SystemInit+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <SystemInit+0x100>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <SystemInit+0x104>)
 8001084:	4013      	ands	r3, r2
 8001086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800108a:	d202      	bcs.n	8001092 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <SystemInit+0x108>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <SystemInit+0x10c>)
 8001094:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001098:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	52002000 	.word	0x52002000
 80010ac:	58024400 	.word	0x58024400
 80010b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010b4:	02020200 	.word	0x02020200
 80010b8:	01ff0000 	.word	0x01ff0000
 80010bc:	01010280 	.word	0x01010280
 80010c0:	5c001000 	.word	0x5c001000
 80010c4:	ffff0000 	.word	0xffff0000
 80010c8:	51008108 	.word	0x51008108
 80010cc:	52004000 	.word	0x52004000

080010d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_USART1_UART_Init+0x90>)
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <MX_USART1_UART_Init+0x94>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_USART1_UART_Init+0x90>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_USART1_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_USART1_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_USART1_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_USART1_UART_Init+0x90>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_USART1_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_USART1_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_USART1_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_USART1_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_USART1_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_USART1_UART_Init+0x90>)
 800111a:	f005 fd4c 	bl	8006bb6 <HAL_UART_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001124:	f7ff fe18 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_USART1_UART_Init+0x90>)
 800112c:	f006 fce2 	bl	8007af4 <HAL_UARTEx_SetTxFifoThreshold>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001136:	f7ff fe0f 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <MX_USART1_UART_Init+0x90>)
 800113e:	f006 fd17 	bl	8007b70 <HAL_UARTEx_SetRxFifoThreshold>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001148:	f7ff fe06 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_USART1_UART_Init+0x90>)
 800114e:	f006 fc98 	bl	8007a82 <HAL_UARTEx_DisableFifoMode>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001158:	f7ff fdfe 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	24000154 	.word	0x24000154
 8001164:	40011000 	.word	0x40011000

08001168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0b8      	sub	sp, #224	; 0xe0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	22bc      	movs	r2, #188	; 0xbc
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fda1 	bl	8007cd0 <memset>
  if(uartHandle->Instance==USART1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a25      	ldr	r2, [pc, #148]	; (8001228 <HAL_UART_MspInit+0xc0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d142      	bne.n	800121e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 ff9c 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011b2:	f7ff fdd1 	bl	8000d58 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_UART_MspInit+0xc4>)
 80011b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_UART_MspInit+0xc4>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_UART_MspInit+0xc4>)
 80011c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0xc4>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_UART_MspInit+0xc4>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0xc4>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800120c:	2307      	movs	r3, #7
 800120e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_UART_MspInit+0xc8>)
 800121a:	f000 fc35 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	37e0      	adds	r7, #224	; 0xe0
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40011000 	.word	0x40011000
 800122c:	58024400 	.word	0x58024400
 8001230:	58020000 	.word	0x58020000

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001238:	f7ff fec2 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f006 fd11 	bl	8007c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fce5 	bl	8000c34 <main>
  bx  lr
 800126a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001270:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001274:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001278:	08007d40 	.word	0x08007d40
  ldr r2, =_sbss
 800127c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001280:	240001e8 	.word	0x240001e8

08001284 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC3_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128e:	2003      	movs	r0, #3
 8001290:	f000 f968 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001294:	f002 fd50 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_Init+0x68>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	4913      	ldr	r1, [pc, #76]	; (80012f4 <HAL_Init+0x6c>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_Init+0x68>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_Init+0x6c>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_Init+0x70>)
 80012ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_Init+0x74>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f814 	bl	8001300 <HAL_InitTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e002      	b.n	80012e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fe01 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58024400 	.word	0x58024400
 80012f4:	08007cf8 	.word	0x08007cf8
 80012f8:	24000004 	.word	0x24000004
 80012fc:	24000000 	.word	0x24000000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_InitTick+0x60>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e021      	b.n	8001358 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_InitTick+0x64>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_InitTick+0x60>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f94d 	bl	80015ca <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f917 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x68>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2400000c 	.word	0x2400000c
 8001364:	24000000 	.word	0x24000000
 8001368:	24000008 	.word	0x24000008

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2400000c 	.word	0x2400000c
 8001390:	240001e4 	.word	0x240001e4

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	240001e4 	.word	0x240001e4

080013ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetREVID+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0c1b      	lsrs	r3, r3, #16
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	5c001000 	.word	0x5c001000

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0000 	.word	0x05fa0000

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff40 	bl	800140c <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff33 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa4 	bl	8001520 <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e205      	b.n	8001a02 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d004      	beq.n	800160c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e1fa      	b.n	8001a02 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a8c      	ldr	r2, [pc, #560]	; (8001844 <HAL_DMA_Abort_IT+0x260>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d04a      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a8b      	ldr	r2, [pc, #556]	; (8001848 <HAL_DMA_Abort_IT+0x264>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d045      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a89      	ldr	r2, [pc, #548]	; (800184c <HAL_DMA_Abort_IT+0x268>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d040      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a88      	ldr	r2, [pc, #544]	; (8001850 <HAL_DMA_Abort_IT+0x26c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d03b      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a86      	ldr	r2, [pc, #536]	; (8001854 <HAL_DMA_Abort_IT+0x270>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d036      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a85      	ldr	r2, [pc, #532]	; (8001858 <HAL_DMA_Abort_IT+0x274>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d031      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a83      	ldr	r2, [pc, #524]	; (800185c <HAL_DMA_Abort_IT+0x278>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d02c      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a82      	ldr	r2, [pc, #520]	; (8001860 <HAL_DMA_Abort_IT+0x27c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d027      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a80      	ldr	r2, [pc, #512]	; (8001864 <HAL_DMA_Abort_IT+0x280>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d022      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d01d      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a7d      	ldr	r2, [pc, #500]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d018      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7c      	ldr	r2, [pc, #496]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d013      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a7a      	ldr	r2, [pc, #488]	; (8001874 <HAL_DMA_Abort_IT+0x290>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00e      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_DMA_Abort_IT+0x294>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d009      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a77      	ldr	r2, [pc, #476]	; (800187c <HAL_DMA_Abort_IT+0x298>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a76      	ldr	r2, [pc, #472]	; (8001880 <HAL_DMA_Abort_IT+0x29c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Abort_IT+0xcc>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_DMA_Abort_IT+0xce>
 80016b0:	2300      	movs	r3, #0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d065      	beq.n	8001782 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_DMA_Abort_IT+0x260>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04a      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a5e      	ldr	r2, [pc, #376]	; (8001848 <HAL_DMA_Abort_IT+0x264>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d045      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_DMA_Abort_IT+0x268>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d040      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <HAL_DMA_Abort_IT+0x26c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d03b      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_DMA_Abort_IT+0x270>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d036      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_DMA_Abort_IT+0x274>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d031      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_DMA_Abort_IT+0x278>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d02c      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_DMA_Abort_IT+0x27c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d027      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_DMA_Abort_IT+0x280>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d022      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d018      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_DMA_Abort_IT+0x290>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00e      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_DMA_Abort_IT+0x294>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d009      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_DMA_Abort_IT+0x298>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d004      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a49      	ldr	r2, [pc, #292]	; (8001880 <HAL_DMA_Abort_IT+0x29c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d108      	bne.n	8001770 <HAL_DMA_Abort_IT+0x18c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e147      	b.n	8001a00 <HAL_DMA_Abort_IT+0x41c>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e13e      	b.n	8001a00 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 020e 	bic.w	r2, r2, #14
 8001790:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <HAL_DMA_Abort_IT+0x260>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d04a      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_DMA_Abort_IT+0x264>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d045      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_DMA_Abort_IT+0x268>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d040      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_DMA_Abort_IT+0x26c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d03b      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_DMA_Abort_IT+0x270>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d036      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_DMA_Abort_IT+0x274>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d031      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a22      	ldr	r2, [pc, #136]	; (800185c <HAL_DMA_Abort_IT+0x278>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d02c      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_DMA_Abort_IT+0x27c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d027      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_DMA_Abort_IT+0x280>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01d      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d018      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_DMA_Abort_IT+0x290>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00e      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_DMA_Abort_IT+0x294>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d009      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_DMA_Abort_IT+0x298>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_DMA_Abort_IT+0x29c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d128      	bne.n	8001884 <HAL_DMA_Abort_IT+0x2a0>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e027      	b.n	8001894 <HAL_DMA_Abort_IT+0x2b0>
 8001844:	40020010 	.word	0x40020010
 8001848:	40020028 	.word	0x40020028
 800184c:	40020040 	.word	0x40020040
 8001850:	40020058 	.word	0x40020058
 8001854:	40020070 	.word	0x40020070
 8001858:	40020088 	.word	0x40020088
 800185c:	400200a0 	.word	0x400200a0
 8001860:	400200b8 	.word	0x400200b8
 8001864:	40020410 	.word	0x40020410
 8001868:	40020428 	.word	0x40020428
 800186c:	40020440 	.word	0x40020440
 8001870:	40020458 	.word	0x40020458
 8001874:	40020470 	.word	0x40020470
 8001878:	40020488 	.word	0x40020488
 800187c:	400204a0 	.word	0x400204a0
 8001880:	400204b8 	.word	0x400204b8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_DMA_Abort_IT+0x428>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d072      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_DMA_Abort_IT+0x42c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d06d      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a59      	ldr	r2, [pc, #356]	; (8001a14 <HAL_DMA_Abort_IT+0x430>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d068      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_DMA_Abort_IT+0x434>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d063      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_DMA_Abort_IT+0x438>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d05e      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a55      	ldr	r2, [pc, #340]	; (8001a20 <HAL_DMA_Abort_IT+0x43c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d059      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_DMA_Abort_IT+0x440>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d054      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_DMA_Abort_IT+0x444>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d04f      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_DMA_Abort_IT+0x448>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d04a      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_DMA_Abort_IT+0x44c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d045      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_DMA_Abort_IT+0x450>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d040      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_DMA_Abort_IT+0x454>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d03b      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_DMA_Abort_IT+0x458>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d036      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <HAL_DMA_Abort_IT+0x45c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d031      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_DMA_Abort_IT+0x460>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02c      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_DMA_Abort_IT+0x464>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d027      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <HAL_DMA_Abort_IT+0x468>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d022      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <HAL_DMA_Abort_IT+0x46c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d01d      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <HAL_DMA_Abort_IT+0x470>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d018      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <HAL_DMA_Abort_IT+0x474>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <HAL_DMA_Abort_IT+0x478>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00e      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3d      	ldr	r2, [pc, #244]	; (8001a60 <HAL_DMA_Abort_IT+0x47c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <HAL_DMA_Abort_IT+0x480>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d004      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <HAL_DMA_Abort_IT+0x484>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Abort_IT+0x3a4>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_DMA_Abort_IT+0x3a6>
 8001988:	2300      	movs	r3, #0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d028      	beq.n	80019e0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800199c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2201      	movs	r2, #1
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40020010 	.word	0x40020010
 8001a10:	40020028 	.word	0x40020028
 8001a14:	40020040 	.word	0x40020040
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	40020070 	.word	0x40020070
 8001a20:	40020088 	.word	0x40020088
 8001a24:	400200a0 	.word	0x400200a0
 8001a28:	400200b8 	.word	0x400200b8
 8001a2c:	40020410 	.word	0x40020410
 8001a30:	40020428 	.word	0x40020428
 8001a34:	40020440 	.word	0x40020440
 8001a38:	40020458 	.word	0x40020458
 8001a3c:	40020470 	.word	0x40020470
 8001a40:	40020488 	.word	0x40020488
 8001a44:	400204a0 	.word	0x400204a0
 8001a48:	400204b8 	.word	0x400204b8
 8001a4c:	58025408 	.word	0x58025408
 8001a50:	5802541c 	.word	0x5802541c
 8001a54:	58025430 	.word	0x58025430
 8001a58:	58025444 	.word	0x58025444
 8001a5c:	58025458 	.word	0x58025458
 8001a60:	5802546c 	.word	0x5802546c
 8001a64:	58025480 	.word	0x58025480
 8001a68:	58025494 	.word	0x58025494

08001a6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a7a:	b2db      	uxtb	r3, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_GPIO_Init+0x234>)
 8001a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a9a:	e194      	b.n	8001dc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8186 	beq.w	8001dc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d005      	beq.n	8001acc <HAL_GPIO_Init+0x44>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d130      	bne.n	8001b2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b02:	2201      	movs	r2, #1
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	f003 0201 	and.w	r2, r3, #1
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d017      	beq.n	8001b6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d123      	bne.n	8001bbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	08da      	lsrs	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3208      	adds	r2, #8
 8001bb8:	69b9      	ldr	r1, [r7, #24]
 8001bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0203 	and.w	r2, r3, #3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80e0 	beq.w	8001dc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_GPIO_Init+0x238>)
 8001c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_GPIO_Init+0x238>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_GPIO_Init+0x238>)
 8001c12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_GPIO_Init+0x23c>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_GPIO_Init+0x240>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d052      	beq.n	8001cf0 <HAL_GPIO_Init+0x268>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_GPIO_Init+0x244>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d031      	beq.n	8001cb6 <HAL_GPIO_Init+0x22e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_GPIO_Init+0x248>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x22a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_GPIO_Init+0x24c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_GPIO_Init+0x250>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_GPIO_Init+0x254>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <HAL_GPIO_Init+0x258>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_GPIO_Init+0x25c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x216>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <HAL_GPIO_Init+0x260>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x212>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_GPIO_Init+0x264>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20e>
 8001c92:	2309      	movs	r3, #9
 8001c94:	e02d      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001c96:	230a      	movs	r3, #10
 8001c98:	e02b      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	e029      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e027      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e025      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e023      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e021      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e01f      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e01d      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e01b      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cba:	bf00      	nop
 8001cbc:	58000080 	.word	0x58000080
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58000400 	.word	0x58000400
 8001cc8:	58020000 	.word	0x58020000
 8001ccc:	58020400 	.word	0x58020400
 8001cd0:	58020800 	.word	0x58020800
 8001cd4:	58020c00 	.word	0x58020c00
 8001cd8:	58021000 	.word	0x58021000
 8001cdc:	58021400 	.word	0x58021400
 8001ce0:	58021800 	.word	0x58021800
 8001ce4:	58021c00 	.word	0x58021c00
 8001ce8:	58022000 	.word	0x58022000
 8001cec:	58022400 	.word	0x58022400
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d02:	4938      	ldr	r1, [pc, #224]	; (8001de4 <HAL_GPIO_Init+0x35c>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f47f ae63 	bne.w	8001a9c <HAL_GPIO_Init+0x14>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	3724      	adds	r7, #36	; 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	58000400 	.word	0x58000400

08001de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07f      	b.n	8001efa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fdd4 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2224      	movs	r2, #36	; 0x24
 8001e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d107      	bne.n	8001e62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e006      	b.n	8001e70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d104      	bne.n	8001e82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_I2C_Init+0x11c>)
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69d9      	ldr	r1, [r3, #28]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	02008000 	.word	0x02008000

08001f08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
  }
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d010      	beq.n	8001f82 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	09db      	lsrs	r3, r3, #7
 8001f64:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f80:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	0a9b      	lsrs	r3, r3, #10
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	09db      	lsrs	r3, r3, #7
 8001f92:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f043 0208 	orr.w	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	0a5b      	lsrs	r3, r3, #9
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d010      	beq.n	8001fde <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	09db      	lsrs	r3, r3, #7
 8001fc0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f043 0202 	orr.w	r2, r3, #2
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fdc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 030b 	and.w	r3, r3, #11
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fc37 	bl	8002864 <I2C_ITError>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <I2C_Slave_ISR_IT+0x24>
 800201e:	2302      	movs	r3, #2
 8002020:	e0ec      	b.n	80021fc <I2C_Slave_ISR_IT+0x1fe>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002042:	6939      	ldr	r1, [r7, #16]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f9bf 	bl	80023c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d04d      	beq.n	80020f2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800205e:	2b00      	cmp	r3, #0
 8002060:	d047      	beq.n	80020f2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d128      	bne.n	80020be <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b28      	cmp	r3, #40	; 0x28
 8002076:	d108      	bne.n	800208a <I2C_Slave_ISR_IT+0x8c>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800207e:	d104      	bne.n	800208a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002080:	6939      	ldr	r1, [r7, #16]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fb98 	bl	80027b8 <I2C_ITListenCplt>
 8002088:	e032      	b.n	80020f0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b29      	cmp	r3, #41	; 0x29
 8002094:	d10e      	bne.n	80020b4 <I2C_Slave_ISR_IT+0xb6>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800209c:	d00a      	beq.n	80020b4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2210      	movs	r2, #16
 80020a4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fcd3 	bl	8002a52 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f92d 	bl	800230c <I2C_ITSlaveSeqCplt>
 80020b2:	e01d      	b.n	80020f0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2210      	movs	r2, #16
 80020ba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80020bc:	e096      	b.n	80021ec <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2210      	movs	r2, #16
 80020c4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f043 0204 	orr.w	r2, r3, #4
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <I2C_Slave_ISR_IT+0xe4>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020de:	f040 8085 	bne.w	80021ec <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4619      	mov	r1, r3
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fbbb 	bl	8002864 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020ee:	e07d      	b.n	80021ec <I2C_Slave_ISR_IT+0x1ee>
 80020f0:	e07c      	b.n	80021ec <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d030      	beq.n	8002160 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02a      	beq.n	8002160 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d018      	beq.n	8002146 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d14f      	bne.n	80021f0 <I2C_Slave_ISR_IT+0x1f2>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002156:	d04b      	beq.n	80021f0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f8d7 	bl	800230c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800215e:	e047      	b.n	80021f0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	08db      	lsrs	r3, r3, #3
 8002170:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f842 	bl	8002204 <I2C_ITAddrCplt>
 8002180:	e037      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d031      	beq.n	80021f2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002196:	2b00      	cmp	r3, #0
 8002198:	d02b      	beq.n	80021f2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d018      	beq.n	80021d6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80021d4:	e00d      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d002      	beq.n	80021e4 <I2C_Slave_ISR_IT+0x1e6>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f891 	bl	800230c <I2C_ITSlaveSeqCplt>
 80021ea:	e002      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80021ec:	bf00      	nop
 80021ee:	e000      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80021f0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800221a:	2b28      	cmp	r3, #40	; 0x28
 800221c:	d16a      	bne.n	80022f4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b29b      	uxth	r3, r3
 8002238:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800223c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	b29b      	uxth	r3, r3
 8002246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002258:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d138      	bne.n	80022d4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	09db      	lsrs	r3, r3, #7
 8002266:	b29a      	uxth	r2, r3
 8002268:	89bb      	ldrh	r3, [r7, #12]
 800226a:	4053      	eors	r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	f003 0306 	and.w	r3, r3, #6
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11c      	bne.n	80022b0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002276:	897b      	ldrh	r3, [r7, #10]
 8002278:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	2b02      	cmp	r3, #2
 800228a:	d13b      	bne.n	8002304 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2208      	movs	r2, #8
 8002298:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022a2:	89ba      	ldrh	r2, [r7, #12]
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe f9c7 	bl	800063c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80022ae:	e029      	b.n	8002304 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80022b0:	893b      	ldrh	r3, [r7, #8]
 80022b2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fc0c 	bl	8002ad6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022c6:	89ba      	ldrh	r2, [r7, #12]
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7fe f9b5 	bl	800063c <HAL_I2C_AddrCallback>
}
 80022d2:	e017      	b.n	8002304 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fbfc 	bl	8002ad6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022e6:	89ba      	ldrh	r2, [r7, #12]
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7fe f9a5 	bl	800063c <HAL_I2C_AddrCallback>
}
 80022f2:	e007      	b.n	8002304 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2208      	movs	r2, #8
 80022fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	0b9b      	lsrs	r3, r3, #14
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e00d      	b.n	800235e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	0bdb      	lsrs	r3, r3, #15
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800235c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b29      	cmp	r3, #41	; 0x29
 8002368:	d112      	bne.n	8002390 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2228      	movs	r2, #40	; 0x28
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2221      	movs	r2, #33	; 0x21
 8002376:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002378:	2101      	movs	r1, #1
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fbab 	bl	8002ad6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe f943 	bl	8000614 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800238e:	e017      	b.n	80023c0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b2a      	cmp	r3, #42	; 0x2a
 800239a:	d111      	bne.n	80023c0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2228      	movs	r2, #40	; 0x28
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2222      	movs	r2, #34	; 0x22
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023aa:	2102      	movs	r1, #2
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fb92 	bl	8002ad6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe f934 	bl	8000628 <HAL_I2C_SlaveRxCpltCallback>
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b21      	cmp	r3, #33	; 0x21
 80023f2:	d002      	beq.n	80023fa <I2C_ITSlaveCplt+0x32>
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b29      	cmp	r3, #41	; 0x29
 80023f8:	d108      	bne.n	800240c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023fa:	f248 0101 	movw	r1, #32769	; 0x8001
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fb69 	bl	8002ad6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2221      	movs	r2, #33	; 0x21
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
 800240a:	e00d      	b.n	8002428 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b22      	cmp	r3, #34	; 0x22
 8002410:	d002      	beq.n	8002418 <I2C_ITSlaveCplt+0x50>
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b2a      	cmp	r3, #42	; 0x2a
 8002416:	d107      	bne.n	8002428 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002418:	f248 0102 	movw	r1, #32770	; 0x8002
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fb5a 	bl	8002ad6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2222      	movs	r2, #34	; 0x22
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002436:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b80      	ldr	r3, [pc, #512]	; (8002644 <I2C_ITSlaveCplt+0x27c>)
 8002444:	400b      	ands	r3, r1
 8002446:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fb02 	bl	8002a52 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	0b9b      	lsrs	r3, r3, #14
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d07a      	beq.n	8002550 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002468:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8111 	beq.w	8002696 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a73      	ldr	r2, [pc, #460]	; (8002648 <I2C_ITSlaveCplt+0x280>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d059      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a71      	ldr	r2, [pc, #452]	; (800264c <I2C_ITSlaveCplt+0x284>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d053      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <I2C_ITSlaveCplt+0x288>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d04d      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6d      	ldr	r2, [pc, #436]	; (8002654 <I2C_ITSlaveCplt+0x28c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d047      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6b      	ldr	r2, [pc, #428]	; (8002658 <I2C_ITSlaveCplt+0x290>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d041      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a69      	ldr	r2, [pc, #420]	; (800265c <I2C_ITSlaveCplt+0x294>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a67      	ldr	r2, [pc, #412]	; (8002660 <I2C_ITSlaveCplt+0x298>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d035      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <I2C_ITSlaveCplt+0x29c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d02f      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a63      	ldr	r2, [pc, #396]	; (8002668 <I2C_ITSlaveCplt+0x2a0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d029      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a61      	ldr	r2, [pc, #388]	; (800266c <I2C_ITSlaveCplt+0x2a4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d023      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <I2C_ITSlaveCplt+0x2a8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a5d      	ldr	r2, [pc, #372]	; (8002674 <I2C_ITSlaveCplt+0x2ac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d017      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5b      	ldr	r2, [pc, #364]	; (8002678 <I2C_ITSlaveCplt+0x2b0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d011      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a59      	ldr	r2, [pc, #356]	; (800267c <I2C_ITSlaveCplt+0x2b4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00b      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a57      	ldr	r2, [pc, #348]	; (8002680 <I2C_ITSlaveCplt+0x2b8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d005      	beq.n	8002534 <I2C_ITSlaveCplt+0x16c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a55      	ldr	r2, [pc, #340]	; (8002684 <I2C_ITSlaveCplt+0x2bc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d105      	bne.n	8002540 <I2C_ITSlaveCplt+0x178>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b29b      	uxth	r3, r3
 800253e:	e004      	b.n	800254a <I2C_ITSlaveCplt+0x182>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	b29b      	uxth	r3, r3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800254e:	e0a2      	b.n	8002696 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	0bdb      	lsrs	r3, r3, #15
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 809c 	beq.w	8002696 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800256c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 808f 	beq.w	8002696 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a32      	ldr	r2, [pc, #200]	; (8002648 <I2C_ITSlaveCplt+0x280>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d059      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a30      	ldr	r2, [pc, #192]	; (800264c <I2C_ITSlaveCplt+0x284>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d053      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <I2C_ITSlaveCplt+0x288>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d04d      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <I2C_ITSlaveCplt+0x28c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d047      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <I2C_ITSlaveCplt+0x290>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d041      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a28      	ldr	r2, [pc, #160]	; (800265c <I2C_ITSlaveCplt+0x294>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d03b      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <I2C_ITSlaveCplt+0x298>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d035      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a24      	ldr	r2, [pc, #144]	; (8002664 <I2C_ITSlaveCplt+0x29c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d02f      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a22      	ldr	r2, [pc, #136]	; (8002668 <I2C_ITSlaveCplt+0x2a0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d029      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a20      	ldr	r2, [pc, #128]	; (800266c <I2C_ITSlaveCplt+0x2a4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d023      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <I2C_ITSlaveCplt+0x2a8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01d      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <I2C_ITSlaveCplt+0x2ac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d017      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <I2C_ITSlaveCplt+0x2b0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d011      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <I2C_ITSlaveCplt+0x2b4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00b      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <I2C_ITSlaveCplt+0x2b8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d005      	beq.n	8002638 <I2C_ITSlaveCplt+0x270>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a14      	ldr	r2, [pc, #80]	; (8002684 <I2C_ITSlaveCplt+0x2bc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d127      	bne.n	8002688 <I2C_ITSlaveCplt+0x2c0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	b29b      	uxth	r3, r3
 8002642:	e026      	b.n	8002692 <I2C_ITSlaveCplt+0x2ca>
 8002644:	fe00e800 	.word	0xfe00e800
 8002648:	40020010 	.word	0x40020010
 800264c:	40020028 	.word	0x40020028
 8002650:	40020040 	.word	0x40020040
 8002654:	40020058 	.word	0x40020058
 8002658:	40020070 	.word	0x40020070
 800265c:	40020088 	.word	0x40020088
 8002660:	400200a0 	.word	0x400200a0
 8002664:	400200b8 	.word	0x400200b8
 8002668:	40020410 	.word	0x40020410
 800266c:	40020428 	.word	0x40020428
 8002670:	40020440 	.word	0x40020440
 8002674:	40020458 	.word	0x40020458
 8002678:	40020470 	.word	0x40020470
 800267c:	40020488 	.word	0x40020488
 8002680:	400204a0 	.word	0x400204a0
 8002684:	400204b8 	.word	0x400204b8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	b29b      	uxth	r3, r3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d020      	beq.n	80026e4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	2b00      	cmp	r3, #0
 800270e:	d010      	beq.n	8002732 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8a4 	bl	8002864 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b28      	cmp	r3, #40	; 0x28
 8002726:	d141      	bne.n	80027ac <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f844 	bl	80027b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002730:	e03c      	b.n	80027ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800273a:	d014      	beq.n	8002766 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fde5 	bl	800230c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <I2C_ITSlaveCplt+0x3ec>)
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fd ff7a 	bl	8000658 <HAL_I2C_ListenCpltCallback>
}
 8002764:	e022      	b.n	80027ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b22      	cmp	r3, #34	; 0x22
 8002770:	d10e      	bne.n	8002790 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fd ff4d 	bl	8000628 <HAL_I2C_SlaveRxCpltCallback>
}
 800278e:	e00d      	b.n	80027ac <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fd ff34 	bl	8000614 <HAL_I2C_SlaveTxCpltCallback>
}
 80027ac:	bf00      	nop
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	ffff0000 	.word	0xffff0000

080027b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a26      	ldr	r2, [pc, #152]	; (8002860 <I2C_ITListenCplt+0xa8>)
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d022      	beq.n	8002836 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002836:	f248 0103 	movw	r1, #32771	; 0x8003
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f94b 	bl	8002ad6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2210      	movs	r2, #16
 8002846:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fd ff01 	bl	8000658 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	ffff0000 	.word	0xffff0000

08002864 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a5d      	ldr	r2, [pc, #372]	; (80029f8 <I2C_ITError+0x194>)
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b28      	cmp	r3, #40	; 0x28
 800289a:	d005      	beq.n	80028a8 <I2C_ITError+0x44>
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b29      	cmp	r3, #41	; 0x29
 80028a0:	d002      	beq.n	80028a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b2a      	cmp	r3, #42	; 0x2a
 80028a6:	d10b      	bne.n	80028c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028a8:	2103      	movs	r1, #3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f913 	bl	8002ad6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2228      	movs	r2, #40	; 0x28
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a50      	ldr	r2, [pc, #320]	; (80029fc <I2C_ITError+0x198>)
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34
 80028be:	e011      	b.n	80028e4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f906 	bl	8002ad6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b60      	cmp	r3, #96	; 0x60
 80028d4:	d003      	beq.n	80028de <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d039      	beq.n	8002966 <I2C_ITError+0x102>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d002      	beq.n	80028fe <I2C_ITError+0x9a>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b21      	cmp	r3, #33	; 0x21
 80028fc:	d133      	bne.n	8002966 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800290c:	d107      	bne.n	800291e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800291c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f8a2 	bl	8001a6c <HAL_DMA_GetState>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d017      	beq.n	800295e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	4a33      	ldr	r2, [pc, #204]	; (8002a00 <I2C_ITError+0x19c>)
 8002934:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fe4e 	bl	80015e4 <HAL_DMA_Abort_IT>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04d      	beq.n	80029ea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002958:	4610      	mov	r0, r2
 800295a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800295c:	e045      	b.n	80029ea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f850 	bl	8002a04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002964:	e041      	b.n	80029ea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d039      	beq.n	80029e2 <I2C_ITError+0x17e>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b12      	cmp	r3, #18
 8002972:	d002      	beq.n	800297a <I2C_ITError+0x116>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b22      	cmp	r3, #34	; 0x22
 8002978:	d133      	bne.n	80029e2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002988:	d107      	bne.n	800299a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002998:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f864 	bl	8001a6c <HAL_DMA_GetState>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d017      	beq.n	80029da <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <I2C_ITError+0x19c>)
 80029b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fe10 	bl	80015e4 <HAL_DMA_Abort_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d011      	beq.n	80029ee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029d8:	e009      	b.n	80029ee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f812 	bl	8002a04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029e0:	e005      	b.n	80029ee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f80e 	bl	8002a04 <I2C_TreatErrorCallback>
  }
}
 80029e8:	e002      	b.n	80029f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029ee:	bf00      	nop
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	ffff0000 	.word	0xffff0000
 80029fc:	08001fff 	.word	0x08001fff
 8002a00:	08002a9b 	.word	0x08002a9b

08002a04 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b60      	cmp	r3, #96	; 0x60
 8002a16:	d10e      	bne.n	8002a36 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd fe26 	bl	8000680 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a34:	e009      	b.n	8002a4a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fd fe11 	bl	800066c <HAL_I2C_ErrorCallback>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d103      	bne.n	8002a70 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d007      	beq.n	8002a8e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	619a      	str	r2, [r3, #24]
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff ff9b 	bl	8002a04 <I2C_TreatErrorCallback>
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00f      	beq.n	8002b10 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002af6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b04:	2b28      	cmp	r3, #40	; 0x28
 8002b06:	d003      	beq.n	8002b10 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002b0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00f      	beq.n	8002b3a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002b20:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b2e:	2b28      	cmp	r3, #40	; 0x28
 8002b30:	d003      	beq.n	8002b3a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002b38:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da03      	bge.n	8002b4a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d103      	bne.n	8002b58 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002b56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d103      	bne.n	8002b66 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f043 0320 	orr.w	r3, r3, #32
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d103      	bne.n	8002b74 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	400a      	ands	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d138      	bne.n	8002c1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e032      	b.n	8002c1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2224      	movs	r2, #36	; 0x24
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002be4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6819      	ldr	r1, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d139      	bne.n	8002cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e033      	b.n	8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e10b      	b.n	8002eea <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd ff10 	bl	8000b0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d008      	beq.n	8002d34 <HAL_I2S_Init+0x74>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d004      	beq.n	8002d34 <HAL_I2S_Init+0x74>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b0a      	cmp	r3, #10
 8002d30:	f040 8085 	bne.w	8002e3e <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d058      	beq.n	8002dee <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002d44:	2302      	movs	r3, #2
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e001      	b.n	8002d4e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b30      	cmp	r3, #48	; 0x30
 8002d54:	d003      	beq.n	8002d5e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002d5a:	2bb0      	cmp	r3, #176	; 0xb0
 8002d5c:	d102      	bne.n	8002d64 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e001      	b.n	8002d68 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002d68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d6c:	f002 f8fa 	bl	8004f64 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d70:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7a:	d113      	bne.n	8002da4 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	3305      	adds	r3, #5
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e014      	b.n	8002dce <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002da4:	2220      	movs	r2, #32
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	3305      	adds	r3, #5
 8002dcc:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4a48      	ldr	r2, [pc, #288]	; (8002ef4 <HAL_I2S_Init+0x234>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e003      	b.n	8002df6 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8002dee:	2302      	movs	r3, #2
 8002df0:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_I2S_Init+0x142>
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d002      	beq.n	8002e08 <HAL_I2S_Init+0x148>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2bff      	cmp	r3, #255	; 0xff
 8002e06:	d907      	bls.n	8002e18 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e068      	b.n	8002eea <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_I2S_Init+0x238>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	0411      	lsls	r1, r2, #16
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	0612      	lsls	r2, r2, #24
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_I2S_Init+0x23c>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6851      	ldr	r1, [r2, #4]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6992      	ldr	r2, [r2, #24]
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6a12      	ldr	r2, [r2, #32]
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e68:	4311      	orrs	r1, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6912      	ldr	r2, [r2, #16]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f640 72f8 	movw	r2, #4088	; 0xff8
 8002e84:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e94:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d007      	beq.n	8002ec4 <HAL_I2S_Init+0x204>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d003      	beq.n	8002ec4 <HAL_I2S_Init+0x204>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b0a      	cmp	r3, #10
 8002ec2:	d10a      	bne.n	8002eda <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	cccccccd 	.word	0xcccccccd
 8002ef8:	fe00ffff 	.word	0xfe00ffff
 8002efc:	fdff9040 	.word	0xfdff9040

08002f00 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d12f      	bne.n	8002f8c <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_I2S_IRQHandler+0x48>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01c      	beq.n	8002f8c <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6919      	ldr	r1, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <HAL_I2S_IRQHandler+0x1e8>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f70:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8b0 	bl	80030ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d12f      	bne.n	8002ff8 <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_I2S_IRQHandler+0xb4>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01c      	beq.n	8002ff8 <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 8002fcc:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0220 	orr.w	r2, r2, #32
 8002fdc:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f87a 	bl	80030ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b05      	cmp	r3, #5
 8003002:	d16c      	bne.n	80030de <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_I2S_IRQHandler+0x13a>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_I2S_IRQHandler+0x156>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01c      	beq.n	800309a <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 800306e:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0220 	orr.w	r2, r2, #32
 800307e:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f829 	bl	80030ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01c      	beq.n	80030de <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_I2S_IRQHandler+0x1e8>)
 80030b0:	400b      	ands	r3, r1
 80030b2:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c2:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	f043 0202 	orr.w	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f807 	bl	80030ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	fffffe9e 	.word	0xfffffe9e

080030ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d00a      	beq.n	800312a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	d001      	beq.n	8003126 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e01f      	b.n	8003166 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e01d      	b.n	8003166 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 0207 	bic.w	r2, r3, #7
 8003132:	490f      	ldr	r1, [pc, #60]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4313      	orrs	r3, r2
 8003138:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800313a:	f7fe f92b 	bl	8001394 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003140:	e009      	b.n	8003156 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003142:	f7fe f927 	bl	8001394 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003150:	d901      	bls.n	8003156 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e007      	b.n	8003166 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003162:	d1ee      	bne.n	8003142 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024800 	.word	0x58024800

08003174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f000 bc1c 	b.w	80039c0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8087 	beq.w	80032a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003196:	4b9e      	ldr	r3, [pc, #632]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031a0:	4b9b      	ldr	r3, [pc, #620]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d007      	beq.n	80031bc <HAL_RCC_OscConfig+0x48>
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	2b18      	cmp	r3, #24
 80031b0:	d110      	bne.n	80031d4 <HAL_RCC_OscConfig+0x60>
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	4b94      	ldr	r3, [pc, #592]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d06c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x12e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d168      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e3f5      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031dc:	d106      	bne.n	80031ec <HAL_RCC_OscConfig+0x78>
 80031de:	4b8c      	ldr	r3, [pc, #560]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a8b      	ldr	r2, [pc, #556]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e02e      	b.n	800324a <HAL_RCC_OscConfig+0xd6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10c      	bne.n	800320e <HAL_RCC_OscConfig+0x9a>
 80031f4:	4b86      	ldr	r3, [pc, #536]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a85      	ldr	r2, [pc, #532]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b83      	ldr	r3, [pc, #524]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a82      	ldr	r2, [pc, #520]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e01d      	b.n	800324a <HAL_RCC_OscConfig+0xd6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003216:	d10c      	bne.n	8003232 <HAL_RCC_OscConfig+0xbe>
 8003218:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7c      	ldr	r2, [pc, #496]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 800321e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b7a      	ldr	r3, [pc, #488]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a79      	ldr	r2, [pc, #484]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e00b      	b.n	800324a <HAL_RCC_OscConfig+0xd6>
 8003232:	4b77      	ldr	r3, [pc, #476]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a76      	ldr	r2, [pc, #472]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b74      	ldr	r3, [pc, #464]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a73      	ldr	r2, [pc, #460]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d013      	beq.n	800327a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fe f89f 	bl	8001394 <HAL_GetTick>
 8003256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325a:	f7fe f89b 	bl	8001394 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b64      	cmp	r3, #100	; 0x64
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e3a9      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0xe6>
 8003278:	e014      	b.n	80032a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe f88b 	bl	8001394 <HAL_GetTick>
 800327e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003282:	f7fe f887 	bl	8001394 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b64      	cmp	r3, #100	; 0x64
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e395      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003294:	4b5e      	ldr	r3, [pc, #376]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x10e>
 80032a0:	e000      	b.n	80032a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80ca 	beq.w	8003446 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4b57      	ldr	r3, [pc, #348]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032bc:	4b54      	ldr	r3, [pc, #336]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_RCC_OscConfig+0x164>
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b18      	cmp	r3, #24
 80032cc:	d156      	bne.n	800337c <HAL_RCC_OscConfig+0x208>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d151      	bne.n	800337c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d8:	4b4d      	ldr	r3, [pc, #308]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_OscConfig+0x17c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e367      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032f0:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 0219 	bic.w	r2, r3, #25
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4944      	ldr	r1, [pc, #272]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003302:	f7fe f847 	bl	8001394 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe f843 	bl	8001394 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e351      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800331c:	4b3c      	ldr	r3, [pc, #240]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	f7fe f840 	bl	80013ac <HAL_GetREVID>
 800332c:	4603      	mov	r3, r0
 800332e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003332:	4293      	cmp	r3, r2
 8003334:	d817      	bhi.n	8003366 <HAL_RCC_OscConfig+0x1f2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d108      	bne.n	8003350 <HAL_RCC_OscConfig+0x1dc>
 800333e:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003346:	4a32      	ldr	r2, [pc, #200]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334e:	e07a      	b.n	8003446 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	031b      	lsls	r3, r3, #12
 800335e:	492c      	ldr	r1, [pc, #176]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003364:	e06f      	b.n	8003446 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	4926      	ldr	r1, [pc, #152]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337a:	e064      	b.n	8003446 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d047      	beq.n	8003414 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003384:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 0219 	bic.w	r2, r3, #25
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	491f      	ldr	r1, [pc, #124]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fd fffd 	bl	8001394 <HAL_GetTick>
 800339a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339e:	f7fd fff9 	bl	8001394 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e307      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	f7fd fff6 	bl	80013ac <HAL_GetREVID>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d817      	bhi.n	80033fa <HAL_RCC_OscConfig+0x286>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0x270>
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033da:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e0:	6053      	str	r3, [r2, #4]
 80033e2:	e030      	b.n	8003446 <HAL_RCC_OscConfig+0x2d2>
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	031b      	lsls	r3, r3, #12
 80033f2:	4907      	ldr	r1, [pc, #28]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	e025      	b.n	8003446 <HAL_RCC_OscConfig+0x2d2>
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	4901      	ldr	r1, [pc, #4]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
 800340e:	e01a      	b.n	8003446 <HAL_RCC_OscConfig+0x2d2>
 8003410:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003414:	4b9e      	ldr	r3, [pc, #632]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a9d      	ldr	r2, [pc, #628]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fd ffb8 	bl	8001394 <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7fd ffb4 	bl	8001394 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e2c2      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800343a:	4b95      	ldr	r3, [pc, #596]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80a9 	beq.w	80035a6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003454:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800345e:	4b8c      	ldr	r3, [pc, #560]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b08      	cmp	r3, #8
 8003468:	d007      	beq.n	800347a <HAL_RCC_OscConfig+0x306>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b18      	cmp	r3, #24
 800346e:	d13a      	bne.n	80034e6 <HAL_RCC_OscConfig+0x372>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d135      	bne.n	80034e6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800347a:	4b85      	ldr	r3, [pc, #532]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x31e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e296      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003492:	f7fd ff8b 	bl	80013ac <HAL_GetREVID>
 8003496:	4603      	mov	r3, r0
 8003498:	f241 0203 	movw	r2, #4099	; 0x1003
 800349c:	4293      	cmp	r3, r2
 800349e:	d817      	bhi.n	80034d0 <HAL_RCC_OscConfig+0x35c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d108      	bne.n	80034ba <HAL_RCC_OscConfig+0x346>
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034b0:	4a77      	ldr	r2, [pc, #476]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034b6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034b8:	e075      	b.n	80035a6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ba:	4b75      	ldr	r3, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	069b      	lsls	r3, r3, #26
 80034c8:	4971      	ldr	r1, [pc, #452]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034ce:	e06a      	b.n	80035a6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d0:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	496c      	ldr	r1, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034e4:	e05f      	b.n	80035a6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d042      	beq.n	8003574 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034ee:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a67      	ldr	r2, [pc, #412]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd ff4b 	bl	8001394 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003502:	f7fd ff47 	bl	8001394 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e255      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003514:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003520:	f7fd ff44 	bl	80013ac <HAL_GetREVID>
 8003524:	4603      	mov	r3, r0
 8003526:	f241 0203 	movw	r2, #4099	; 0x1003
 800352a:	4293      	cmp	r3, r2
 800352c:	d817      	bhi.n	800355e <HAL_RCC_OscConfig+0x3ea>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	2b20      	cmp	r3, #32
 8003534:	d108      	bne.n	8003548 <HAL_RCC_OscConfig+0x3d4>
 8003536:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800353e:	4a54      	ldr	r2, [pc, #336]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003544:	6053      	str	r3, [r2, #4]
 8003546:	e02e      	b.n	80035a6 <HAL_RCC_OscConfig+0x432>
 8003548:	4b51      	ldr	r3, [pc, #324]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	069b      	lsls	r3, r3, #26
 8003556:	494e      	ldr	r1, [pc, #312]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
 800355c:	e023      	b.n	80035a6 <HAL_RCC_OscConfig+0x432>
 800355e:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	4948      	ldr	r1, [pc, #288]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
 8003572:	e018      	b.n	80035a6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003574:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a45      	ldr	r2, [pc, #276]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800357a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd ff08 	bl	8001394 <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003588:	f7fd ff04 	bl	8001394 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e212      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d036      	beq.n	8003620 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d019      	beq.n	80035ee <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ba:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fd fee5 	bl	8001394 <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ce:	f7fd fee1 	bl	8001394 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1ef      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80035e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x45a>
 80035ec:	e018      	b.n	8003620 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ee:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	4a27      	ldr	r2, [pc, #156]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd fecb 	bl	8001394 <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003602:	f7fd fec7 	bl	8001394 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e1d5      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d039      	beq.n	80036a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d019      	beq.n	8003668 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800363a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800363e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003640:	f7fd fea8 	bl	8001394 <HAL_GetTick>
 8003644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003648:	f7fd fea4 	bl	8001394 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1b2      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x4d4>
 8003666:	e01b      	b.n	80036a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a08      	ldr	r2, [pc, #32]	; (8003690 <HAL_RCC_OscConfig+0x51c>)
 800366e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003672:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003674:	f7fd fe8e 	bl	8001394 <HAL_GetTick>
 8003678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800367c:	f7fd fe8a 	bl	8001394 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d904      	bls.n	8003694 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e198      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
 800368e:	bf00      	nop
 8003690:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003694:	4ba3      	ldr	r3, [pc, #652]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ed      	bne.n	800367c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8081 	beq.w	80037b0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036ae:	4b9e      	ldr	r3, [pc, #632]	; (8003928 <HAL_RCC_OscConfig+0x7b4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a9d      	ldr	r2, [pc, #628]	; (8003928 <HAL_RCC_OscConfig+0x7b4>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ba:	f7fd fe6b 	bl	8001394 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fd fe67 	bl	8001394 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b64      	cmp	r3, #100	; 0x64
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e175      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d4:	4b94      	ldr	r3, [pc, #592]	; (8003928 <HAL_RCC_OscConfig+0x7b4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x582>
 80036e8:	4b8e      	ldr	r3, [pc, #568]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a8d      	ldr	r2, [pc, #564]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	e02d      	b.n	8003752 <HAL_RCC_OscConfig+0x5de>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0x5a4>
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a88      	ldr	r2, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	6713      	str	r3, [r2, #112]	; 0x70
 800370a:	4b86      	ldr	r3, [pc, #536]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a85      	ldr	r2, [pc, #532]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003710:	f023 0304 	bic.w	r3, r3, #4
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e01c      	b.n	8003752 <HAL_RCC_OscConfig+0x5de>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x5c6>
 8003720:	4b80      	ldr	r3, [pc, #512]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a7f      	ldr	r2, [pc, #508]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	4b7d      	ldr	r3, [pc, #500]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e00b      	b.n	8003752 <HAL_RCC_OscConfig+0x5de>
 800373a:	4b7a      	ldr	r3, [pc, #488]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a79      	ldr	r2, [pc, #484]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b77      	ldr	r3, [pc, #476]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a76      	ldr	r2, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d015      	beq.n	8003786 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fd fe1b 	bl	8001394 <HAL_GetTick>
 800375e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd fe17 	bl	8001394 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e123      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003778:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <HAL_RCC_OscConfig+0x5ee>
 8003784:	e014      	b.n	80037b0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd fe05 	bl	8001394 <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fd fe01 	bl	8001394 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e10d      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037a4:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ee      	bne.n	800378e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8102 	beq.w	80039be <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037ba:	4b5a      	ldr	r3, [pc, #360]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c2:	2b18      	cmp	r3, #24
 80037c4:	f000 80bd 	beq.w	8003942 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f040 8095 	bne.w	80038fc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b54      	ldr	r3, [pc, #336]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a53      	ldr	r2, [pc, #332]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80037d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fd fdd9 	bl	8001394 <HAL_GetTick>
 80037e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd fdd5 	bl	8001394 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0e3      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037f8:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003804:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003808:	4b48      	ldr	r3, [pc, #288]	; (800392c <HAL_RCC_OscConfig+0x7b8>)
 800380a:	4013      	ands	r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	430a      	orrs	r2, r1
 8003818:	4942      	ldr	r1, [pc, #264]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	628b      	str	r3, [r1, #40]	; 0x28
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	3b01      	subs	r3, #1
 8003824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	3b01      	subs	r3, #1
 800382e:	025b      	lsls	r3, r3, #9
 8003830:	b29b      	uxth	r3, r3
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	3b01      	subs	r3, #1
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	3b01      	subs	r3, #1
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800384e:	4935      	ldr	r1, [pc, #212]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003854:	4b33      	ldr	r3, [pc, #204]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	4a32      	ldr	r2, [pc, #200]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003860:	4b30      	ldr	r3, [pc, #192]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_RCC_OscConfig+0x7bc>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800386c:	00d2      	lsls	r2, r2, #3
 800386e:	492d      	ldr	r1, [pc, #180]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f023 020c 	bic.w	r2, r3, #12
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4928      	ldr	r1, [pc, #160]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003882:	4313      	orrs	r3, r2
 8003884:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003886:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f023 0202 	bic.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4924      	ldr	r1, [pc, #144]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	4a21      	ldr	r2, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038b0:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a15      	ldr	r2, [pc, #84]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fd5e 	bl	8001394 <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fd5a 	bl	8001394 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e068      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x768>
 80038fa:	e060      	b.n	80039be <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a08      	ldr	r2, [pc, #32]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd fd44 	bl	8001394 <HAL_GetTick>
 800390c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800390e:	e011      	b.n	8003934 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fd40 	bl	8001394 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d90a      	bls.n	8003934 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04e      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
 8003922:	bf00      	nop
 8003924:	58024400 	.word	0x58024400
 8003928:	58024800 	.word	0x58024800
 800392c:	fffffc0c 	.word	0xfffffc0c
 8003930:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003934:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <HAL_RCC_OscConfig+0x854>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e7      	bne.n	8003910 <HAL_RCC_OscConfig+0x79c>
 8003940:	e03d      	b.n	80039be <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x854>)
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <HAL_RCC_OscConfig+0x854>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b01      	cmp	r3, #1
 8003954:	d031      	beq.n	80039ba <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0203 	and.w	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d12a      	bne.n	80039ba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d122      	bne.n	80039ba <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d11a      	bne.n	80039ba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	0a5b      	lsrs	r3, r3, #9
 8003988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d111      	bne.n	80039ba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d108      	bne.n	80039ba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	0e1b      	lsrs	r3, r3, #24
 80039ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3730      	adds	r7, #48	; 0x30
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	58024400 	.word	0x58024400

080039cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e19c      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b8a      	ldr	r3, [pc, #552]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d910      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b87      	ldr	r3, [pc, #540]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 020f 	bic.w	r2, r3, #15
 80039f6:	4985      	ldr	r1, [pc, #532]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b83      	ldr	r3, [pc, #524]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e184      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	4b7b      	ldr	r3, [pc, #492]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d908      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a2c:	4b78      	ldr	r3, [pc, #480]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	4975      	ldr	r1, [pc, #468]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	4b70      	ldr	r3, [pc, #448]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d908      	bls.n	8003a6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	496a      	ldr	r1, [pc, #424]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	4b64      	ldr	r3, [pc, #400]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d908      	bls.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a88:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	495e      	ldr	r1, [pc, #376]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d908      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ab6:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4953      	ldr	r1, [pc, #332]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d908      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b4a      	ldr	r3, [pc, #296]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f023 020f 	bic.w	r2, r3, #15
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4947      	ldr	r1, [pc, #284]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d055      	beq.n	8003bae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b02:	4b43      	ldr	r3, [pc, #268]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	4940      	ldr	r1, [pc, #256]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b1c:	4b3c      	ldr	r3, [pc, #240]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d121      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0f6      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d115      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0ea      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b4c:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0de      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b5c:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0d6      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b6c:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f023 0207 	bic.w	r2, r3, #7
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4925      	ldr	r1, [pc, #148]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fd fc09 	bl	8001394 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b86:	f7fd fc05 	bl	8001394 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0be      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9c:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d1eb      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d010      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d208      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bca:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f023 020f 	bic.w	r2, r3, #15
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	490e      	ldr	r1, [pc, #56]	; (8003c10 <HAL_RCC_ClockConfig+0x244>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d214      	bcs.n	8003c14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 020f 	bic.w	r2, r3, #15
 8003bf2:	4906      	ldr	r1, [pc, #24]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_RCC_ClockConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e086      	b.n	8003d1a <HAL_RCC_ClockConfig+0x34e>
 8003c0c:	52002000 	.word	0x52002000
 8003c10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d208      	bcs.n	8003c42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c30:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	4939      	ldr	r1, [pc, #228]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d010      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d208      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	492e      	ldr	r1, [pc, #184]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d208      	bcs.n	8003c9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	4922      	ldr	r1, [pc, #136]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d208      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4917      	ldr	r1, [pc, #92]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ccc:	f000 f834 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	4912      	ldr	r1, [pc, #72]	; (8003d28 <HAL_RCC_ClockConfig+0x35c>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <HAL_RCC_ClockConfig+0x358>)
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_RCC_ClockConfig+0x35c>)
 8003cf4:	5cd3      	ldrb	r3, [r2, r3]
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <HAL_RCC_ClockConfig+0x360>)
 8003d02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x364>)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x368>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd faf6 	bl	8001300 <HAL_InitTick>
 8003d14:	4603      	mov	r3, r0
 8003d16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	08007cf8 	.word	0x08007cf8
 8003d2c:	24000004 	.word	0x24000004
 8003d30:	24000000 	.word	0x24000000
 8003d34:	24000008 	.word	0x24000008

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b089      	sub	sp, #36	; 0x24
 8003d3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d3e:	4bb3      	ldr	r3, [pc, #716]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d46:	2b18      	cmp	r3, #24
 8003d48:	f200 8155 	bhi.w	8003ff6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003db9 	.word	0x08003db9
 8003d58:	08003ff7 	.word	0x08003ff7
 8003d5c:	08003ff7 	.word	0x08003ff7
 8003d60:	08003ff7 	.word	0x08003ff7
 8003d64:	08003ff7 	.word	0x08003ff7
 8003d68:	08003ff7 	.word	0x08003ff7
 8003d6c:	08003ff7 	.word	0x08003ff7
 8003d70:	08003ff7 	.word	0x08003ff7
 8003d74:	08003ddf 	.word	0x08003ddf
 8003d78:	08003ff7 	.word	0x08003ff7
 8003d7c:	08003ff7 	.word	0x08003ff7
 8003d80:	08003ff7 	.word	0x08003ff7
 8003d84:	08003ff7 	.word	0x08003ff7
 8003d88:	08003ff7 	.word	0x08003ff7
 8003d8c:	08003ff7 	.word	0x08003ff7
 8003d90:	08003ff7 	.word	0x08003ff7
 8003d94:	08003de5 	.word	0x08003de5
 8003d98:	08003ff7 	.word	0x08003ff7
 8003d9c:	08003ff7 	.word	0x08003ff7
 8003da0:	08003ff7 	.word	0x08003ff7
 8003da4:	08003ff7 	.word	0x08003ff7
 8003da8:	08003ff7 	.word	0x08003ff7
 8003dac:	08003ff7 	.word	0x08003ff7
 8003db0:	08003ff7 	.word	0x08003ff7
 8003db4:	08003deb 	.word	0x08003deb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db8:	4b94      	ldr	r3, [pc, #592]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dc4:	4b91      	ldr	r3, [pc, #580]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	08db      	lsrs	r3, r3, #3
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	4a90      	ldr	r2, [pc, #576]	; (8004010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003dd6:	e111      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dd8:	4b8d      	ldr	r3, [pc, #564]	; (8004010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dda:	61bb      	str	r3, [r7, #24]
    break;
 8003ddc:	e10e      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dde:	4b8d      	ldr	r3, [pc, #564]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003de0:	61bb      	str	r3, [r7, #24]
    break;
 8003de2:	e10b      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003de4:	4b8c      	ldr	r3, [pc, #560]	; (8004018 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003de6:	61bb      	str	r3, [r7, #24]
    break;
 8003de8:	e108      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dea:	4b88      	ldr	r3, [pc, #544]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003df4:	4b85      	ldr	r3, [pc, #532]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dfe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e00:	4b82      	ldr	r3, [pc, #520]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e0a:	4b80      	ldr	r3, [pc, #512]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80e1 	beq.w	8003ff0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f000 8083 	beq.w	8003f3c <HAL_RCC_GetSysClockFreq+0x204>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f200 80a1 	bhi.w	8003f80 <HAL_RCC_GetSysClockFreq+0x248>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x114>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d056      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e4a:	e099      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e4c:	4b6f      	ldr	r3, [pc, #444]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02d      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e58:	4b6c      	ldr	r3, [pc, #432]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	4a6b      	ldr	r2, [pc, #428]	; (8004010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e82:	4b62      	ldr	r3, [pc, #392]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800401c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003eb2:	e087      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004020 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec6:	4b51      	ldr	r3, [pc, #324]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800401c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ef6:	e065      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800401c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3a:	e043      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004028 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800401c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7e:	e021      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800401c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fc2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	0a5b      	lsrs	r3, r3, #9
 8003fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fce:	3301      	adds	r3, #1
 8003fd0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe8:	ee17 3a90 	vmov	r3, s15
 8003fec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fee:	e005      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
    break;
 8003ff4:	e002      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ff8:	61bb      	str	r3, [r7, #24]
    break;
 8003ffa:	bf00      	nop
  }

  return sysclockfreq;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	58024400 	.word	0x58024400
 8004010:	03d09000 	.word	0x03d09000
 8004014:	003d0900 	.word	0x003d0900
 8004018:	017d7840 	.word	0x017d7840
 800401c:	46000000 	.word	0x46000000
 8004020:	4c742400 	.word	0x4c742400
 8004024:	4a742400 	.word	0x4a742400
 8004028:	4bbebc20 	.word	0x4bbebc20

0800402c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004032:	f7ff fe81 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8004036:	4602      	mov	r2, r0
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <HAL_RCC_GetHCLKFreq+0x50>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	490f      	ldr	r1, [pc, #60]	; (8004080 <HAL_RCC_GetHCLKFreq+0x54>)
 8004044:	5ccb      	ldrb	r3, [r1, r3]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_RCC_GetHCLKFreq+0x50>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_GetHCLKFreq+0x54>)
 800405a:	5cd3      	ldrb	r3, [r2, r3]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	4a07      	ldr	r2, [pc, #28]	; (8004084 <HAL_RCC_GetHCLKFreq+0x58>)
 8004068:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_RCC_GetHCLKFreq+0x5c>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <HAL_RCC_GetHCLKFreq+0x58>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024400 	.word	0x58024400
 8004080:	08007cf8 	.word	0x08007cf8
 8004084:	24000004 	.word	0x24000004
 8004088:	24000000 	.word	0x24000000

0800408c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004090:	f7ff ffcc 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4904      	ldr	r1, [pc, #16]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	58024400 	.word	0x58024400
 80040b4:	08007cf8 	.word	0x08007cf8

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040bc:	f7ff ffb6 	bl	800402c <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4904      	ldr	r1, [pc, #16]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	58024400 	.word	0x58024400
 80040e0:	08007cf8 	.word	0x08007cf8

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040ec:	2300      	movs	r3, #0
 80040ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040f0:	2300      	movs	r3, #0
 80040f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d03f      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004108:	d02a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800410a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800410e:	d824      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004114:	d018      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800411a:	d81e      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004124:	d007      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004126:	e018      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004128:	4bab      	ldr	r3, [pc, #684]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	4aaa      	ldr	r2, [pc, #680]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800412e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004132:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004134:	e015      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	2102      	movs	r1, #2
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fff3 	bl	8006128 <RCCEx_PLL2_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004146:	e00c      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3324      	adds	r3, #36	; 0x24
 800414c:	2102      	movs	r1, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f002 f89c 	bl	800628c <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004158:	e003      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
      break;
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004168:	4b9b      	ldr	r3, [pc, #620]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004174:	4998      	ldr	r1, [pc, #608]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	650b      	str	r3, [r1, #80]	; 0x50
 800417a:	e001      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03d      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	2b04      	cmp	r3, #4
 8004192:	d826      	bhi.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041b1 	.word	0x080041b1
 80041a0:	080041bf 	.word	0x080041bf
 80041a4:	080041d1 	.word	0x080041d1
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4b89      	ldr	r3, [pc, #548]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	4a88      	ldr	r2, [pc, #544]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041bc:	e015      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 ffaf 	bl	8006128 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041ce:	e00c      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3324      	adds	r3, #36	; 0x24
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f002 f858 	bl	800628c <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
      break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80041e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041f0:	4b79      	ldr	r3, [pc, #484]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	f023 0207 	bic.w	r2, r3, #7
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	4976      	ldr	r1, [pc, #472]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	650b      	str	r3, [r1, #80]	; 0x50
 8004202:	e001      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004210:	2b00      	cmp	r3, #0
 8004212:	d042      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421c:	d02b      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d825      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004224:	2bc0      	cmp	r3, #192	; 0xc0
 8004226:	d028      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004228:	2bc0      	cmp	r3, #192	; 0xc0
 800422a:	d821      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800422c:	2b80      	cmp	r3, #128	; 0x80
 800422e:	d016      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d81d      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d007      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800423c:	e018      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423e:	4b66      	ldr	r3, [pc, #408]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a65      	ldr	r2, [pc, #404]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800424a:	e017      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f001 ff68 	bl	8006128 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800425c:	e00e      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3324      	adds	r3, #36	; 0x24
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f002 f811 	bl	800628c <RCCEx_PLL3_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800426e:	e005      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]
      break;
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800427a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004282:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4952      	ldr	r1, [pc, #328]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004290:	4313      	orrs	r3, r2
 8004292:	650b      	str	r3, [r1, #80]	; 0x50
 8004294:	e001      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d049      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b0:	d030      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80042b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b6:	d82a      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042bc:	d02c      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80042be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042c2:	d824      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c8:	d018      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ce:	d81e      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80042d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042d8:	d007      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80042da:	e018      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042dc:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	4a3d      	ldr	r2, [pc, #244]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042e8:	e017      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3304      	adds	r3, #4
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 ff19 	bl	8006128 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042fa:	e00e      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3324      	adds	r3, #36	; 0x24
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f001 ffc2 	bl	800628c <RCCEx_PLL3_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800430c:	e005      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
      break;
 8004312:	e002      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800432e:	492a      	ldr	r1, [pc, #168]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	658b      	str	r3, [r1, #88]	; 0x58
 8004334:	e001      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	2b00      	cmp	r3, #0
 8004344:	d04c      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800434c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004350:	d030      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004356:	d82a      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800435c:	d02c      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800435e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004362:	d824      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004368:	d018      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800436a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800436e:	d81e      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004378:	d007      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800437a:	e018      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004388:	e017      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fec9 	bl	8006128 <RCCEx_PLL2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800439a:	e00e      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 ff72 	bl	800628c <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043ac:	e005      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
      break;
 80043b2:	e002      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80043b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043ce:	4902      	ldr	r1, [pc, #8]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	658b      	str	r3, [r1, #88]	; 0x58
 80043d4:	e004      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80043d6:	bf00      	nop
 80043d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d032      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f0:	2b30      	cmp	r3, #48	; 0x30
 80043f2:	d01c      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043f4:	2b30      	cmp	r3, #48	; 0x30
 80043f6:	d817      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d00c      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d813      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d016      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004404:	2b10      	cmp	r3, #16
 8004406:	d10f      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	4baf      	ldr	r3, [pc, #700]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4aae      	ldr	r2, [pc, #696]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800440e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004414:	e00e      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	2102      	movs	r1, #2
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fe83 	bl	8006128 <RCCEx_PLL2_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004426:	e005      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
      break;
 800442c:	e002      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800443a:	4ba3      	ldr	r3, [pc, #652]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004446:	49a0      	ldr	r1, [pc, #640]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004448:	4313      	orrs	r3, r2
 800444a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800444c:	e001      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d047      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004466:	d030      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446c:	d82a      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800446e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004472:	d02c      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004478:	d824      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	d018      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004484:	d81e      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d007      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004490:	e018      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004492:	4b8d      	ldr	r3, [pc, #564]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	4a8c      	ldr	r2, [pc, #560]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800449e:	e017      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 fe3e 	bl	8006128 <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044b0:	e00e      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3324      	adds	r3, #36	; 0x24
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 fee7 	bl	800628c <RCCEx_PLL3_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	e002      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80044ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044d6:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	4979      	ldr	r1, [pc, #484]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	650b      	str	r3, [r1, #80]	; 0x50
 80044e8:	e001      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d049      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004502:	d02e      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004508:	d828      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800450a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800450e:	d02a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004514:	d822      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004516:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800451a:	d026      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800451c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004520:	d81c      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004526:	d010      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800452c:	d816      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01d      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004536:	d111      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	2101      	movs	r1, #1
 800453e:	4618      	mov	r0, r3
 8004540:	f001 fdf2 	bl	8006128 <RCCEx_PLL2_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004548:	e012      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3324      	adds	r3, #36	; 0x24
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f001 fe9b 	bl	800628c <RCCEx_PLL3_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800455a:	e009      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	e006      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004562:	bf00      	nop
 8004564:	e004      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004566:	bf00      	nop
 8004568:	e002      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800456e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004576:	4b54      	ldr	r3, [pc, #336]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	4951      	ldr	r1, [pc, #324]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	650b      	str	r3, [r1, #80]	; 0x50
 8004588:	e001      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04b      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a4:	d02e      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80045a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045aa:	d828      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b0:	d02a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80045b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b6:	d822      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045bc:	d026      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80045be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045c2:	d81c      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c8:	d010      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80045ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ce:	d816      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01d      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80045d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d8:	d111      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 fda1 	bl	8006128 <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045ea:	e012      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fe4a 	bl	800628c <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045fc:	e009      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
      break;
 8004602:	e006      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004604:	bf00      	nop
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004608:	bf00      	nop
 800460a:	e002      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004618:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004626:	4928      	ldr	r1, [pc, #160]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	658b      	str	r3, [r1, #88]	; 0x58
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02f      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004646:	d00e      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800464c:	d814      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d015      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004656:	d10f      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004664:	e00c      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f001 fd5b 	bl	8006128 <RCCEx_PLL2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004676:	e003      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	75fb      	strb	r3, [r7, #23]
      break;
 800467c:	e000      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800467e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004692:	490d      	ldr	r1, [pc, #52]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	650b      	str	r3, [r1, #80]	; 0x50
 8004698:	e001      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469a:	7dfb      	ldrb	r3, [r7, #23]
 800469c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d033      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d81c      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046f3 	.word	0x080046f3
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	080046db 	.word	0x080046db
 80046c4:	080046f3 	.word	0x080046f3
 80046c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046cc:	4bb8      	ldr	r3, [pc, #736]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4ab7      	ldr	r2, [pc, #732]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046d8:	e00c      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 fd21 	bl	8006128 <RCCEx_PLL2_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046ea:	e003      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80046f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046fa:	4bad      	ldr	r3, [pc, #692]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	49aa      	ldr	r1, [pc, #680]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800470c:	e001      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8086 	beq.w	800482c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004720:	4ba4      	ldr	r3, [pc, #656]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4aa3      	ldr	r2, [pc, #652]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800472c:	f7fc fe32 	bl	8001394 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004732:	e009      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004734:	f7fc fe2e 	bl	8001394 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d902      	bls.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	75fb      	strb	r3, [r7, #23]
        break;
 8004746:	e005      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004748:	4b9a      	ldr	r3, [pc, #616]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0ef      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d166      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800475a:	4b95      	ldr	r3, [pc, #596]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800475c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004764:	4053      	eors	r3, r2
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800476e:	4b90      	ldr	r3, [pc, #576]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004776:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004778:	4b8d      	ldr	r3, [pc, #564]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4a8c      	ldr	r2, [pc, #560]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800477e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004782:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004784:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4a89      	ldr	r2, [pc, #548]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004790:	4a87      	ldr	r2, [pc, #540]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800479c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a0:	d115      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fc fdf7 	bl	8001394 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047a8:	e00b      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fc fdf3 	bl	8001394 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d902      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	75fb      	strb	r3, [r7, #23]
            break;
 80047c0:	e005      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047c2:	4b7b      	ldr	r3, [pc, #492]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ed      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d126      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e2:	d10d      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80047e4:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047f2:	0919      	lsrs	r1, r3, #4
 80047f4:	4b70      	ldr	r3, [pc, #448]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80047f6:	400b      	ands	r3, r1
 80047f8:	496d      	ldr	r1, [pc, #436]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	610b      	str	r3, [r1, #16]
 80047fe:	e005      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004800:	4b6b      	ldr	r3, [pc, #428]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	4a6a      	ldr	r2, [pc, #424]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004806:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800480a:	6113      	str	r3, [r2, #16]
 800480c:	4b68      	ldr	r3, [pc, #416]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800480e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481a:	4965      	ldr	r1, [pc, #404]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	670b      	str	r3, [r1, #112]	; 0x70
 8004820:	e004      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	75bb      	strb	r3, [r7, #22]
 8004826:	e001      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
 800482a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d07e      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483c:	2b28      	cmp	r3, #40	; 0x28
 800483e:	d867      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004917 	.word	0x08004917
 800484c:	08004911 	.word	0x08004911
 8004850:	08004911 	.word	0x08004911
 8004854:	08004911 	.word	0x08004911
 8004858:	08004911 	.word	0x08004911
 800485c:	08004911 	.word	0x08004911
 8004860:	08004911 	.word	0x08004911
 8004864:	08004911 	.word	0x08004911
 8004868:	080048ed 	.word	0x080048ed
 800486c:	08004911 	.word	0x08004911
 8004870:	08004911 	.word	0x08004911
 8004874:	08004911 	.word	0x08004911
 8004878:	08004911 	.word	0x08004911
 800487c:	08004911 	.word	0x08004911
 8004880:	08004911 	.word	0x08004911
 8004884:	08004911 	.word	0x08004911
 8004888:	080048ff 	.word	0x080048ff
 800488c:	08004911 	.word	0x08004911
 8004890:	08004911 	.word	0x08004911
 8004894:	08004911 	.word	0x08004911
 8004898:	08004911 	.word	0x08004911
 800489c:	08004911 	.word	0x08004911
 80048a0:	08004911 	.word	0x08004911
 80048a4:	08004911 	.word	0x08004911
 80048a8:	08004917 	.word	0x08004917
 80048ac:	08004911 	.word	0x08004911
 80048b0:	08004911 	.word	0x08004911
 80048b4:	08004911 	.word	0x08004911
 80048b8:	08004911 	.word	0x08004911
 80048bc:	08004911 	.word	0x08004911
 80048c0:	08004911 	.word	0x08004911
 80048c4:	08004911 	.word	0x08004911
 80048c8:	08004917 	.word	0x08004917
 80048cc:	08004911 	.word	0x08004911
 80048d0:	08004911 	.word	0x08004911
 80048d4:	08004911 	.word	0x08004911
 80048d8:	08004911 	.word	0x08004911
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004911 	.word	0x08004911
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004917 	.word	0x08004917
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 fc18 	bl	8006128 <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048fc:	e00c      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	2101      	movs	r1, #1
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fcc1 	bl	800628c <RCCEx_PLL3_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800490e:	e003      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
      break;
 8004914:	e000      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	4921      	ldr	r1, [pc, #132]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	654b      	str	r3, [r1, #84]	; 0x54
 8004930:	e001      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d03e      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004946:	2b05      	cmp	r3, #5
 8004948:	d820      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	08004993 	.word	0x08004993
 8004954:	08004969 	.word	0x08004969
 8004958:	0800497b 	.word	0x0800497b
 800495c:	08004993 	.word	0x08004993
 8004960:	08004993 	.word	0x08004993
 8004964:	08004993 	.word	0x08004993
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f001 fbda 	bl	8006128 <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004978:	e00c      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3324      	adds	r3, #36	; 0x24
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f001 fc83 	bl	800628c <RCCEx_PLL3_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800498a:	e003      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75fb      	strb	r3, [r7, #23]
      break;
 8004990:	e000      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d110      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f023 0207 	bic.w	r2, r3, #7
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	4902      	ldr	r1, [pc, #8]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	654b      	str	r3, [r1, #84]	; 0x54
 80049ac:	e008      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	58024800 	.word	0x58024800
 80049b8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d039      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d820      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a1f 	.word	0x08004a1f
 80049e0:	080049f5 	.word	0x080049f5
 80049e4:	08004a07 	.word	0x08004a07
 80049e8:	08004a1f 	.word	0x08004a1f
 80049ec:	08004a1f 	.word	0x08004a1f
 80049f0:	08004a1f 	.word	0x08004a1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fb94 	bl	8006128 <RCCEx_PLL2_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a04:	e00c      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3324      	adds	r3, #36	; 0x24
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 fc3d 	bl	800628c <RCCEx_PLL3_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a16:	e003      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a26:	4bb7      	ldr	r3, [pc, #732]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	f023 0207 	bic.w	r2, r3, #7
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	49b3      	ldr	r1, [pc, #716]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	658b      	str	r3, [r1, #88]	; 0x58
 8004a3a:	e001      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d04b      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a56:	d02e      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a5c:	d828      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d02a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d822      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a6e:	d026      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004a70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a74:	d81c      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a7a:	d010      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a80:	d816      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01d      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a8a:	d111      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 fb48 	bl	8006128 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a9c:	e012      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3324      	adds	r3, #36	; 0x24
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fbf1 	bl	800628c <RCCEx_PLL3_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004aae:	e009      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aca:	4b8e      	ldr	r3, [pc, #568]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad8:	498a      	ldr	r1, [pc, #552]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ade:	e001      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d04b      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004afa:	d02e      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004afc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b00:	d828      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	d02a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d822      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b12:	d026      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b18:	d81c      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1e:	d010      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b24:	d816      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01d      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2e:	d111      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 faf6 	bl	8006128 <RCCEx_PLL2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b40:	e012      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3324      	adds	r3, #36	; 0x24
 8004b46:	2102      	movs	r1, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 fb9f 	bl	800628c <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b52:	e009      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	75fb      	strb	r3, [r7, #23]
      break;
 8004b58:	e006      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e004      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e002      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b6e:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b7c:	4961      	ldr	r1, [pc, #388]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	658b      	str	r3, [r1, #88]	; 0x58
 8004b82:	e001      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d04b      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b9e:	d02e      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004ba0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ba4:	d828      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004baa:	d02a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	d822      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004bb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bb6:	d026      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004bb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bbc:	d81c      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc8:	d816      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01d      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d111      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 faa4 	bl	8006128 <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004be4:	e012      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3324      	adds	r3, #36	; 0x24
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fb4d 	bl	800628c <RCCEx_PLL3_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bf6:	e009      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e004      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c12:	4b3c      	ldr	r3, [pc, #240]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c20:	4938      	ldr	r1, [pc, #224]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	658b      	str	r3, [r1, #88]	; 0x58
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c42:	d10a      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3324      	adds	r3, #36	; 0x24
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fb1e 	bl	800628c <RCCEx_PLL3_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c5a:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c68:	4926      	ldr	r1, [pc, #152]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c84:	d10a      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3324      	adds	r3, #36	; 0x24
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fafd 	bl	800628c <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c9c:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004caa:	4916      	ldr	r1, [pc, #88]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d036      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc6:	d01f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ccc:	d817      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd6:	d009      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004cd8:	e011      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 fa21 	bl	8006128 <RCCEx_PLL2_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cea:	e00e      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3324      	adds	r3, #36	; 0x24
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 faca 	bl	800628c <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cfc:	e005      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004d04:	58024400 	.word	0x58024400
      break;
 8004d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d10:	4b93      	ldr	r3, [pc, #588]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d1e:	4990      	ldr	r1, [pc, #576]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	658b      	str	r3, [r1, #88]	; 0x58
 8004d24:	e001      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d033      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d40:	d01c      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004d42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d46:	d816      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004d4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d52:	d007      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004d54:	e00f      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d56:	4b82      	ldr	r3, [pc, #520]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	4a81      	ldr	r2, [pc, #516]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d62:	e00c      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3324      	adds	r3, #36	; 0x24
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fa8e 	bl	800628c <RCCEx_PLL3_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d74:	e003      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7a:	e000      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d84:	4b76      	ldr	r3, [pc, #472]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d92:	4973      	ldr	r1, [pc, #460]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	654b      	str	r3, [r1, #84]	; 0x54
 8004d98:	e001      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d029      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db6:	d007      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004db8:	e00f      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dba:	4b69      	ldr	r3, [pc, #420]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4a68      	ldr	r2, [pc, #416]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 f9aa 	bl	8006128 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004de6:	4b5e      	ldr	r3, [pc, #376]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	495b      	ldr	r1, [pc, #364]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004df8:	e001      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3324      	adds	r3, #36	; 0x24
 8004e0e:	2102      	movs	r1, #2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fa3b 	bl	800628c <RCCEx_PLL3_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d030      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e34:	d017      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e3a:	d811      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e40:	d013      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e46:	d80b      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d010      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e50:	d106      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e52:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	4a42      	ldr	r2, [pc, #264]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e5e:	e007      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
      break;
 8004e64:	e004      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e76:	4b3a      	ldr	r3, [pc, #232]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e82:	4937      	ldr	r1, [pc, #220]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	654b      	str	r3, [r1, #84]	; 0x54
 8004e88:	e001      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e9a:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	492e      	ldr	r1, [pc, #184]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ec6:	4926      	ldr	r1, [pc, #152]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ed8:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee4:	491e      	ldr	r1, [pc, #120]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004efc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f00:	6113      	str	r3, [r2, #16]
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f0c:	4914      	ldr	r1, [pc, #80]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da08      	bge.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f26:	490e      	ldr	r1, [pc, #56]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f38:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	4906      	ldr	r1, [pc, #24]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f4c:	7dbb      	ldrb	r3, [r7, #22]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	58024400 	.word	0x58024400

08004f64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b090      	sub	sp, #64	; 0x40
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f72:	f040 8095 	bne.w	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004f76:	4bae      	ldr	r3, [pc, #696]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	f200 8088 	bhi.w	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fa5 	.word	0x08004fa5
 8004f94:	08004fcd 	.word	0x08004fcd
 8004f98:	08004ff5 	.word	0x08004ff5
 8004f9c:	08005091 	.word	0x08005091
 8004fa0:	0800501d 	.word	0x0800501d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fa4:	4ba2      	ldr	r3, [pc, #648]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fb0:	d108      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 ff64 	bl	8005e84 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fc0:	f000 bc95 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc8:	f000 bc91 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fcc:	4b98      	ldr	r3, [pc, #608]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd8:	d108      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fda:	f107 0318 	add.w	r3, r7, #24
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fca8 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fe8:	f000 bc81 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff0:	f000 bc7d 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ff4:	4b8e      	ldr	r3, [pc, #568]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005000:	d108      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fde8 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005010:	f000 bc6d 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005018:	f000 bc69 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800501c:	4b84      	ldr	r3, [pc, #528]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800501e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005024:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005026:	4b82      	ldr	r3, [pc, #520]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d10c      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	2b00      	cmp	r3, #0
 8005036:	d109      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005038:	4b7d      	ldr	r3, [pc, #500]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	4a7c      	ldr	r2, [pc, #496]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504a:	e01f      	b.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800504c:	4b78      	ldr	r3, [pc, #480]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005058:	d106      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005060:	d102      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005062:	4b75      	ldr	r3, [pc, #468]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005066:	e011      	b.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005068:	4b71      	ldr	r3, [pc, #452]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005074:	d106      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507c:	d102      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800507e:	4b6f      	ldr	r3, [pc, #444]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005082:	e003      	b.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005088:	f000 bc31 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800508c:	f000 bc2f 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005090:	4b6b      	ldr	r3, [pc, #428]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005094:	f000 bc2b 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800509c:	f000 bc27 	b.w	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a6:	f040 8095 	bne.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80050aa:	4b61      	ldr	r3, [pc, #388]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	d04d      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c2:	f200 8084 	bhi.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	2bc0      	cmp	r3, #192	; 0xc0
 80050ca:	d07d      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2bc0      	cmp	r3, #192	; 0xc0
 80050d0:	d87d      	bhi.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b80      	cmp	r3, #128	; 0x80
 80050d6:	d02d      	beq.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d877      	bhi.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d012      	beq.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80050ea:	e070      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050ec:	4b50      	ldr	r3, [pc, #320]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050f8:	d107      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fec0 	bl	8005e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005108:	e3f1      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800510e:	e3ee      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005110:	4b47      	ldr	r3, [pc, #284]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800511c:	d107      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800511e:	f107 0318 	add.w	r3, r7, #24
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc06 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800512c:	e3df      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005132:	e3dc      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005134:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800513c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005140:	d107      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fd48 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005150:	e3cd      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005156:	e3ca      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005158:	4b35      	ldr	r3, [pc, #212]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005160:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005162:	4b33      	ldr	r3, [pc, #204]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b04      	cmp	r3, #4
 800516c:	d10c      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005174:	4b2e      	ldr	r3, [pc, #184]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	08db      	lsrs	r3, r3, #3
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	4a2d      	ldr	r2, [pc, #180]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005186:	e01e      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005188:	4b29      	ldr	r3, [pc, #164]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005194:	d106      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519c:	d102      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a2:	e010      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051a4:	4b22      	ldr	r3, [pc, #136]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b0:	d106      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80051b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b8:	d102      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80051ba:	4b20      	ldr	r3, [pc, #128]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051be:	e002      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80051c4:	e393      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80051c6:	e392      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051cc:	e38f      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051d2:	e38c      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	f040 80a7 	bne.w	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80051de:	4b14      	ldr	r3, [pc, #80]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ee:	d05f      	beq.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051f6:	f200 8096 	bhi.w	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005200:	f000 808e 	beq.w	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800520a:	f200 808c 	bhi.w	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005214:	d03a      	beq.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521c:	f200 8083 	bhi.w	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00e      	beq.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	d01c      	beq.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800522e:	e07a      	b.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005230:	58024400 	.word	0x58024400
 8005234:	03d09000 	.word	0x03d09000
 8005238:	003d0900 	.word	0x003d0900
 800523c:	017d7840 	.word	0x017d7840
 8005240:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005244:	4baa      	ldr	r3, [pc, #680]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005250:	d107      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fe14 	bl	8005e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005260:	e345      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005266:	e342      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005268:	4ba1      	ldr	r3, [pc, #644]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005274:	d107      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005276:	f107 0318 	add.w	r3, r7, #24
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb5a 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005284:	e333      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800528a:	e330      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800528c:	4b98      	ldr	r3, [pc, #608]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005298:	d107      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800529a:	f107 030c 	add.w	r3, r7, #12
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fc9c 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052a8:	e321      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ae:	e31e      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052b0:	4b8f      	ldr	r3, [pc, #572]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052ba:	4b8d      	ldr	r3, [pc, #564]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052cc:	4b88      	ldr	r3, [pc, #544]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	4a87      	ldr	r2, [pc, #540]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052de:	e01e      	b.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052e0:	4b83      	ldr	r3, [pc, #524]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ec:	d106      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80052ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f4:	d102      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052f6:	4b80      	ldr	r3, [pc, #512]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fa:	e010      	b.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052fc:	4b7c      	ldr	r3, [pc, #496]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005308:	d106      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005310:	d102      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005312:	4b7a      	ldr	r3, [pc, #488]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005316:	e002      	b.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800531c:	e2e7      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800531e:	e2e6      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005320:	4b77      	ldr	r3, [pc, #476]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005324:	e2e3      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800532a:	e2e0      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005332:	f040 809c 	bne.w	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005336:	4b6e      	ldr	r3, [pc, #440]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800533e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005346:	d054      	beq.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800534e:	f200 808b 	bhi.w	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005358:	f000 8083 	beq.w	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005362:	f200 8081 	bhi.w	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536c:	d02f      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005374:	d878      	bhi.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005382:	d012      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005384:	e070      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005386:	4b5a      	ldr	r3, [pc, #360]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005392:	d107      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fd73 	bl	8005e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053a2:	e2a4      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053a8:	e2a1      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053aa:	4b51      	ldr	r3, [pc, #324]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b6:	d107      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b8:	f107 0318 	add.w	r3, r7, #24
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fab9 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80053c6:	e292      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053cc:	e28f      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053ce:	4b48      	ldr	r3, [pc, #288]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053da:	d107      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053dc:	f107 030c 	add.w	r3, r7, #12
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fbfb 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053ea:	e280      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f0:	e27d      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053f2:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053fc:	4b3c      	ldr	r3, [pc, #240]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d10c      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800540e:	4b38      	ldr	r3, [pc, #224]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	08db      	lsrs	r3, r3, #3
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	4a36      	ldr	r2, [pc, #216]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800541a:	fa22 f303 	lsr.w	r3, r2, r3
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005420:	e01e      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005422:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d106      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005436:	d102      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005438:	4b2f      	ldr	r3, [pc, #188]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543c:	e010      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800544a:	d106      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005452:	d102      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005454:	4b29      	ldr	r3, [pc, #164]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005458:	e002      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800545e:	e246      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005460:	e245      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005462:	4b27      	ldr	r3, [pc, #156]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005466:	e242      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800546c:	e23f      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	f040 80a8 	bne.w	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800547a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005480:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005488:	d060      	beq.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005490:	f200 8097 	bhi.w	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800549a:	f000 808f 	beq.w	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054a4:	f200 808d 	bhi.w	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ae:	d03b      	beq.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b6:	f200 8084 	bhi.w	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	d01d      	beq.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80054c8:	e07b      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054d6:	d107      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fcd1 	bl	8005e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054e6:	e202      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ec:	e1ff      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80054ee:	bf00      	nop
 80054f0:	58024400 	.word	0x58024400
 80054f4:	03d09000 	.word	0x03d09000
 80054f8:	003d0900 	.word	0x003d0900
 80054fc:	017d7840 	.word	0x017d7840
 8005500:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005504:	4ba3      	ldr	r3, [pc, #652]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800550c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005512:	f107 0318 	add.w	r3, r7, #24
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fa0c 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005520:	e1e5      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005526:	e1e2      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005528:	4b9a      	ldr	r3, [pc, #616]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005534:	d107      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005536:	f107 030c 	add.w	r3, r7, #12
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fb4e 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005544:	e1d3      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800554a:	e1d0      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800554c:	4b91      	ldr	r3, [pc, #580]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005554:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005556:	4b8f      	ldr	r3, [pc, #572]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b04      	cmp	r3, #4
 8005560:	d10c      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005568:	4b8a      	ldr	r3, [pc, #552]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	4a89      	ldr	r2, [pc, #548]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557a:	e01e      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800557c:	4b85      	ldr	r3, [pc, #532]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005588:	d106      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005590:	d102      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005592:	4b82      	ldr	r3, [pc, #520]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005596:	e010      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005598:	4b7e      	ldr	r3, [pc, #504]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a4:	d106      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ac:	d102      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80055ae:	4b7c      	ldr	r3, [pc, #496]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b2:	e002      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80055b8:	e199      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80055ba:	e198      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055bc:	4b79      	ldr	r3, [pc, #484]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055c0:	e195      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055c6:	e192      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055ce:	d173      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80055d0:	4b70      	ldr	r3, [pc, #448]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e0:	d02f      	beq.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e8:	d863      	bhi.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d012      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80055f8:	e05b      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055fa:	4b66      	ldr	r3, [pc, #408]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005606:	d107      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005608:	f107 0318 	add.w	r3, r7, #24
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f991 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005616:	e16a      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800561c:	e167      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800561e:	4b5d      	ldr	r3, [pc, #372]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562a:	d107      	bne.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800562c:	f107 030c 	add.w	r3, r7, #12
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fad3 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800563a:	e158      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005640:	e155      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005642:	4b54      	ldr	r3, [pc, #336]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800564a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800564c:	4b51      	ldr	r3, [pc, #324]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d10c      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800565e:	4b4d      	ldr	r3, [pc, #308]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	08db      	lsrs	r3, r3, #3
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	4a4b      	ldr	r2, [pc, #300]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005670:	e01e      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005672:	4b48      	ldr	r3, [pc, #288]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567e:	d106      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005686:	d102      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005688:	4b44      	ldr	r3, [pc, #272]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	e010      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800569a:	d106      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a2:	d102      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056a4:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a8:	e002      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056ae:	e11e      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80056b0:	e11d      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b6:	e11a      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056be:	d133      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80056c0:	4b34      	ldr	r3, [pc, #208]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d6:	d012      	beq.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80056d8:	e023      	b.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e6:	d107      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fbc9 	bl	8005e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056f6:	e0fa      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056fc:	e0f7      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056fe:	4b25      	ldr	r3, [pc, #148]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800570a:	d107      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800570c:	f107 0318 	add.w	r3, r7, #24
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f90f 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800571a:	e0e8      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005720:	e0e5      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005726:	e0e2      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572e:	f040 808f 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005732:	4b18      	ldr	r3, [pc, #96]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005742:	d075      	beq.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800574a:	d87e      	bhi.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005752:	d060      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575a:	d876      	bhi.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005762:	d045      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800576a:	d86e      	bhi.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005772:	d02b      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800577a:	d866      	bhi.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005788:	d00e      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800578a:	e05e      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800578c:	f000 f8bc 	bl	8005908 <HAL_RCCEx_GetD3PCLK1Freq>
 8005790:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005792:	e0ac      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005794:	58024400 	.word	0x58024400
 8005798:	03d09000 	.word	0x03d09000
 800579c:	003d0900 	.word	0x003d0900
 80057a0:	017d7840 	.word	0x017d7840
 80057a4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057a8:	4b53      	ldr	r3, [pc, #332]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b4:	d107      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b6:	f107 0318 	add.w	r3, r7, #24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f8ba 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057c4:	e093      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ca:	e090      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057cc:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d8:	d107      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057da:	f107 030c 	add.w	r3, r7, #12
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f9fc 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057e8:	e081      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ee:	e07e      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057f0:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d109      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057fc:	4b3e      	ldr	r3, [pc, #248]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	08db      	lsrs	r3, r3, #3
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800580e:	e06e      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005814:	e06b      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005816:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005822:	d102      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005824:	4b36      	ldr	r3, [pc, #216]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005828:	e061      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800582e:	e05e      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005830:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800583c:	d102      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005842:	e054      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005848:	e051      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584e:	e04e      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005856:	d148      	bne.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005858:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800585a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005868:	d02a      	beq.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005870:	d838      	bhi.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800587e:	d00d      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005880:	e030      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800588e:	d102      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005890:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005894:	e02b      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589a:	e028      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a8:	d107      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fae8 	bl	8005e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80058b8:	e019      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058be:	e016      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058c0:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058cc:	d107      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f82e 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80058dc:	e007      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e2:	e004      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e8:	e001      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80058ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3740      	adds	r7, #64	; 0x40
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	58024400 	.word	0x58024400
 80058fc:	03d09000 	.word	0x03d09000
 8005900:	003d0900 	.word	0x003d0900
 8005904:	017d7840 	.word	0x017d7840

08005908 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800590c:	f7fe fb8e 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8005910:	4602      	mov	r2, r0
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	091b      	lsrs	r3, r3, #4
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	4904      	ldr	r1, [pc, #16]	; (8005930 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800591e:	5ccb      	ldrb	r3, [r1, r3]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005928:	4618      	mov	r0, r3
 800592a:	bd80      	pop	{r7, pc}
 800592c:	58024400 	.word	0x58024400
 8005930:	08007cf8 	.word	0x08007cf8

08005934 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005934:	b480      	push	{r7}
 8005936:	b089      	sub	sp, #36	; 0x24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800593c:	4ba1      	ldr	r3, [pc, #644]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005946:	4b9f      	ldr	r3, [pc, #636]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	0b1b      	lsrs	r3, r3, #12
 800594c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005950:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005952:	4b9c      	ldr	r3, [pc, #624]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800595e:	4b99      	ldr	r3, [pc, #612]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005962:	08db      	lsrs	r3, r3, #3
 8005964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8111 	beq.w	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b02      	cmp	r3, #2
 8005986:	f000 8083 	beq.w	8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b02      	cmp	r3, #2
 800598e:	f200 80a1 	bhi.w	8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d056      	beq.n	8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800599e:	e099      	b.n	8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059a0:	4b88      	ldr	r3, [pc, #544]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02d      	beq.n	8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059ac:	4b85      	ldr	r3, [pc, #532]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	08db      	lsrs	r3, r3, #3
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	4a84      	ldr	r2, [pc, #528]	; (8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d6:	4b7b      	ldr	r3, [pc, #492]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a06:	e087      	b.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1a:	4b6a      	ldr	r3, [pc, #424]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a4a:	e065      	b.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a8e:	e043      	b.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa2:	4b48      	ldr	r3, [pc, #288]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ad2:	e021      	b.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005afa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005b18:	4b2a      	ldr	r3, [pc, #168]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	0a5b      	lsrs	r3, r3, #9
 8005b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3e:	ee17 2a90 	vmov	r2, s15
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b46:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	0c1b      	lsrs	r3, r3, #16
 8005b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6c:	ee17 2a90 	vmov	r2, s15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9a:	ee17 2a90 	vmov	r2, s15
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	609a      	str	r2, [r3, #8]
}
 8005bb6:	bf00      	nop
 8005bb8:	3724      	adds	r7, #36	; 0x24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	58024400 	.word	0x58024400
 8005bc8:	03d09000 	.word	0x03d09000
 8005bcc:	46000000 	.word	0x46000000
 8005bd0:	4c742400 	.word	0x4c742400
 8005bd4:	4a742400 	.word	0x4a742400
 8005bd8:	4bbebc20 	.word	0x4bbebc20

08005bdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be4:	4ba1      	ldr	r3, [pc, #644]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005bee:	4b9f      	ldr	r3, [pc, #636]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	0d1b      	lsrs	r3, r3, #20
 8005bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bfa:	4b9c      	ldr	r3, [pc, #624]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c06:	4b99      	ldr	r3, [pc, #612]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8111 	beq.w	8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	f000 8083 	beq.w	8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f200 80a1 	bhi.w	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d056      	beq.n	8005cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c46:	e099      	b.n	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c48:	4b88      	ldr	r3, [pc, #544]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d02d      	beq.n	8005cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c54:	4b85      	ldr	r3, [pc, #532]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	08db      	lsrs	r3, r3, #3
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	4a84      	ldr	r2, [pc, #528]	; (8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
 8005c64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7e:	4b7b      	ldr	r3, [pc, #492]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cae:	e087      	b.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b6a      	ldr	r3, [pc, #424]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf2:	e065      	b.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d36:	e043      	b.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d7a:	e021      	b.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b37      	ldr	r3, [pc, #220]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	0a5b      	lsrs	r3, r3, #9
 8005dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de6:	ee17 2a90 	vmov	r2, s15
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005dee:	4b1f      	ldr	r3, [pc, #124]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e14:	ee17 2a90 	vmov	r2, s15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005e1c:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	0e1b      	lsrs	r3, r3, #24
 8005e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e42:	ee17 2a90 	vmov	r2, s15
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e4a:	e008      	b.n	8005e5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	3724      	adds	r7, #36	; 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	03d09000 	.word	0x03d09000
 8005e74:	46000000 	.word	0x46000000
 8005e78:	4c742400 	.word	0x4c742400
 8005e7c:	4a742400 	.word	0x4a742400
 8005e80:	4bbebc20 	.word	0x4bbebc20

08005e84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e8c:	4ba0      	ldr	r3, [pc, #640]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005e96:	4b9e      	ldr	r3, [pc, #632]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ea2:	4b9b      	ldr	r3, [pc, #620]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005eac:	4b98      	ldr	r3, [pc, #608]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	08db      	lsrs	r3, r3, #3
 8005eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8111 	beq.w	80060f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	f000 8083 	beq.w	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	f200 80a1 	bhi.w	8006022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d056      	beq.n	8005f9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005eec:	e099      	b.n	8006022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eee:	4b88      	ldr	r3, [pc, #544]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02d      	beq.n	8005f56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005efa:	4b85      	ldr	r3, [pc, #532]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	08db      	lsrs	r3, r3, #3
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	4a83      	ldr	r2, [pc, #524]	; (8006114 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f24:	4b7a      	ldr	r3, [pc, #488]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f54:	e087      	b.n	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800611c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f68:	4b69      	ldr	r3, [pc, #420]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f98:	e065      	b.n	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	4b58      	ldr	r3, [pc, #352]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fdc:	e043      	b.n	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff0:	4b47      	ldr	r3, [pc, #284]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006000:	ed97 6a03 	vldr	s12, [r7, #12]
 8006004:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006020:	e021      	b.n	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800611c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006034:	4b36      	ldr	r3, [pc, #216]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006044:	ed97 6a03 	vldr	s12, [r7, #12]
 8006048:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800604c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006064:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006066:	4b2a      	ldr	r3, [pc, #168]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	0a5b      	lsrs	r3, r3, #9
 800606c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800607c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006080:	edd7 6a07 	vldr	s13, [r7, #28]
 8006084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608c:	ee17 2a90 	vmov	r2, s15
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006094:	4b1e      	ldr	r3, [pc, #120]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	0c1b      	lsrs	r3, r3, #16
 800609a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ba:	ee17 2a90 	vmov	r2, s15
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80060c2:	4b13      	ldr	r3, [pc, #76]	; (8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	0e1b      	lsrs	r3, r3, #24
 80060c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e8:	ee17 2a90 	vmov	r2, s15
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060f0:	e008      	b.n	8006104 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	3724      	adds	r7, #36	; 0x24
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	58024400 	.word	0x58024400
 8006114:	03d09000 	.word	0x03d09000
 8006118:	46000000 	.word	0x46000000
 800611c:	4c742400 	.word	0x4c742400
 8006120:	4a742400 	.word	0x4a742400
 8006124:	4bbebc20 	.word	0x4bbebc20

08006128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006136:	4b53      	ldr	r3, [pc, #332]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b03      	cmp	r3, #3
 8006140:	d101      	bne.n	8006146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e099      	b.n	800627a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006146:	4b4f      	ldr	r3, [pc, #316]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4e      	ldr	r2, [pc, #312]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800614c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006152:	f7fb f91f 	bl	8001394 <HAL_GetTick>
 8006156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006158:	e008      	b.n	800616c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800615a:	f7fb f91b 	bl	8001394 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e086      	b.n	800627a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800616c:	4b45      	ldr	r3, [pc, #276]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1f0      	bne.n	800615a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006178:	4b42      	ldr	r3, [pc, #264]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	493f      	ldr	r1, [pc, #252]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006188:	4313      	orrs	r3, r2
 800618a:	628b      	str	r3, [r1, #40]	; 0x28
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	3b01      	subs	r3, #1
 8006192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	3b01      	subs	r3, #1
 800619c:	025b      	lsls	r3, r3, #9
 800619e:	b29b      	uxth	r3, r3
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	061b      	lsls	r3, r3, #24
 80061b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061bc:	4931      	ldr	r1, [pc, #196]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061c2:	4b30      	ldr	r3, [pc, #192]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	492d      	ldr	r1, [pc, #180]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061d4:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	f023 0220 	bic.w	r2, r3, #32
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	4928      	ldr	r1, [pc, #160]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061e6:	4b27      	ldr	r3, [pc, #156]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4a26      	ldr	r2, [pc, #152]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061ec:	f023 0310 	bic.w	r3, r3, #16
 80061f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061f2:	4b24      	ldr	r3, [pc, #144]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f6:	4b24      	ldr	r3, [pc, #144]	; (8006288 <RCCEx_PLL2_Config+0x160>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	69d2      	ldr	r2, [r2, #28]
 80061fe:	00d2      	lsls	r2, r2, #3
 8006200:	4920      	ldr	r1, [pc, #128]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006206:	4b1f      	ldr	r3, [pc, #124]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800620c:	f043 0310 	orr.w	r3, r3, #16
 8006210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006218:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	4a19      	ldr	r2, [pc, #100]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800621e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006224:	e00f      	b.n	8006246 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d106      	bne.n	800623a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800622c:	4b15      	ldr	r3, [pc, #84]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	4a14      	ldr	r2, [pc, #80]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006238:	e005      	b.n	8006246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	4a11      	ldr	r2, [pc, #68]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a0e      	ldr	r2, [pc, #56]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800624c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006252:	f7fb f89f 	bl	8001394 <HAL_GetTick>
 8006256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006258:	e008      	b.n	800626c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800625a:	f7fb f89b 	bl	8001394 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e006      	b.n	800627a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800626c:	4b05      	ldr	r3, [pc, #20]	; (8006284 <RCCEx_PLL2_Config+0x15c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	ffff0007 	.word	0xffff0007

0800628c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800629a:	4b53      	ldr	r3, [pc, #332]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d101      	bne.n	80062aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e099      	b.n	80063de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062aa:	4b4f      	ldr	r3, [pc, #316]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a4e      	ldr	r2, [pc, #312]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b6:	f7fb f86d 	bl	8001394 <HAL_GetTick>
 80062ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062bc:	e008      	b.n	80062d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80062be:	f7fb f869 	bl	8001394 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e086      	b.n	80063de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062d0:	4b45      	ldr	r3, [pc, #276]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f0      	bne.n	80062be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062dc:	4b42      	ldr	r3, [pc, #264]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	051b      	lsls	r3, r3, #20
 80062ea:	493f      	ldr	r1, [pc, #252]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	628b      	str	r3, [r1, #40]	; 0x28
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	3b01      	subs	r3, #1
 8006300:	025b      	lsls	r3, r3, #9
 8006302:	b29b      	uxth	r3, r3
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	3b01      	subs	r3, #1
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	3b01      	subs	r3, #1
 800631a:	061b      	lsls	r3, r3, #24
 800631c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006320:	4931      	ldr	r1, [pc, #196]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006326:	4b30      	ldr	r3, [pc, #192]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	492d      	ldr	r1, [pc, #180]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006334:	4313      	orrs	r3, r2
 8006336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006338:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	4928      	ldr	r1, [pc, #160]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800634a:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	4a26      	ldr	r2, [pc, #152]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006356:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800635a:	4b24      	ldr	r3, [pc, #144]	; (80063ec <RCCEx_PLL3_Config+0x160>)
 800635c:	4013      	ands	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	69d2      	ldr	r2, [r2, #28]
 8006362:	00d2      	lsls	r2, r2, #3
 8006364:	4920      	ldr	r1, [pc, #128]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800636a:	4b1f      	ldr	r3, [pc, #124]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	4a1e      	ldr	r2, [pc, #120]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800637c:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006388:	e00f      	b.n	80063aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d106      	bne.n	800639e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006390:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800639a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800639c:	e005      	b.n	80063aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800639e:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	4a11      	ldr	r2, [pc, #68]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b6:	f7fa ffed 	bl	8001394 <HAL_GetTick>
 80063ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063bc:	e008      	b.n	80063d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80063be:	f7fa ffe9 	bl	8001394 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e006      	b.n	80063de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063d0:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	58024400 	.word	0x58024400
 80063ec:	ffff0007 	.word	0xffff0007

080063f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e0f1      	b.n	80065e6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a78      	ldr	r2, [pc, #480]	; (80065f0 <HAL_SPI_Init+0x200>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00f      	beq.n	8006432 <HAL_SPI_Init+0x42>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a77      	ldr	r2, [pc, #476]	; (80065f4 <HAL_SPI_Init+0x204>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00a      	beq.n	8006432 <HAL_SPI_Init+0x42>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a75      	ldr	r2, [pc, #468]	; (80065f8 <HAL_SPI_Init+0x208>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d005      	beq.n	8006432 <HAL_SPI_Init+0x42>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d901      	bls.n	8006432 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e0d9      	b.n	80065e6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fba4 	bl	8006b80 <SPI_GetPacketSize>
 8006438:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a6c      	ldr	r2, [pc, #432]	; (80065f0 <HAL_SPI_Init+0x200>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00c      	beq.n	800645e <HAL_SPI_Init+0x6e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a6a      	ldr	r2, [pc, #424]	; (80065f4 <HAL_SPI_Init+0x204>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <HAL_SPI_Init+0x6e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a69      	ldr	r2, [pc, #420]	; (80065f8 <HAL_SPI_Init+0x208>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d002      	beq.n	800645e <HAL_SPI_Init+0x6e>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d811      	bhi.n	8006482 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006462:	4a63      	ldr	r2, [pc, #396]	; (80065f0 <HAL_SPI_Init+0x200>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a61      	ldr	r2, [pc, #388]	; (80065f4 <HAL_SPI_Init+0x204>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_SPI_Init+0x8c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a60      	ldr	r2, [pc, #384]	; (80065f8 <HAL_SPI_Init+0x208>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d104      	bne.n	8006486 <HAL_SPI_Init+0x96>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b10      	cmp	r3, #16
 8006480:	d901      	bls.n	8006486 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e0af      	b.n	80065e6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fa fcb8 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80064c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064cc:	d119      	bne.n	8006502 <HAL_SPI_Init+0x112>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064d6:	d103      	bne.n	80064e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10c      	bne.n	8006502 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064f0:	d107      	bne.n	8006502 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006500:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	431a      	orrs	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	ea42 0103 	orr.w	r1, r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006562:	ea42 0103 	orr.w	r1, r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d113      	bne.n	80065a2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800658c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40013000 	.word	0x40013000
 80065f4:	40003800 	.word	0x40003800
 80065f8:	40003c00 	.word	0x40003c00

080065fc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	; 0x28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4013      	ands	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006624:	2300      	movs	r3, #0
 8006626:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800662e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3330      	adds	r3, #48	; 0x30
 8006636:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d113      	bne.n	800666a <HAL_SPI_IRQHandler+0x6e>
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10e      	bne.n	800666a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
    handled = 1UL;
 8006666:	2301      	movs	r3, #1
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10f      	bne.n	8006694 <HAL_SPI_IRQHandler+0x98>
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
    handled = 1UL;
 8006690:	2301      	movs	r3, #1
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10f      	bne.n	80066be <HAL_SPI_IRQHandler+0xc2>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d105      	bne.n	80066be <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
    handled = 1UL;
 80066ba:	2301      	movs	r3, #1
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 816f 	bne.w	80069a4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80a0 	beq.w	8006812 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0208 	orr.w	r2, r2, #8
 80066e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699a      	ldr	r2, [r3, #24]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0210 	orr.w	r2, r2, #16
 80066f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006700:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0208 	bic.w	r2, r2, #8
 8006710:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00f      	beq.n	800673c <HAL_SPI_IRQHandler+0x140>
 800671c:	7cfb      	ldrb	r3, [r7, #19]
 800671e:	2b04      	cmp	r3, #4
 8006720:	d004      	beq.n	800672c <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <HAL_SPI_IRQHandler+0x140>
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	2b03      	cmp	r3, #3
 8006730:	d059      	beq.n	80067e6 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d154      	bne.n	80067e6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d13d      	bne.n	80067c6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800674a:	e036      	b.n	80067ba <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b0f      	cmp	r3, #15
 8006752:	d90b      	bls.n	800676c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800675c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800675e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006764:	1d1a      	adds	r2, r3, #4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	665a      	str	r2, [r3, #100]	; 0x64
 800676a:	e01d      	b.n	80067a8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b07      	cmp	r3, #7
 8006772:	d90b      	bls.n	800678c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	8812      	ldrh	r2, [r2, #0]
 800677c:	b292      	uxth	r2, r2
 800677e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006784:	1c9a      	adds	r2, r3, #2
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	665a      	str	r2, [r3, #100]	; 0x64
 800678a:	e00d      	b.n	80067a8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1c2      	bne.n	800674c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f93a 	bl	8006a40 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f90a 	bl	80069f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80067e4:	e0e3      	b.n	80069ae <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	2b05      	cmp	r3, #5
 80067ea:	d103      	bne.n	80067f4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f8f9 	bl	80069e4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80067f2:	e0d9      	b.n	80069a8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d103      	bne.n	8006802 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8e8 	bl	80069d0 <HAL_SPI_RxCpltCallback>
    return;
 8006800:	e0d2      	b.n	80069a8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006802:	7cfb      	ldrb	r3, [r7, #19]
 8006804:	2b03      	cmp	r3, #3
 8006806:	f040 80cf 	bne.w	80069a8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f8d6 	bl	80069bc <HAL_SPI_TxCpltCallback>
    return;
 8006810:	e0ca      	b.n	80069a8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00d      	beq.n	8006838 <HAL_SPI_IRQHandler+0x23c>
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006834:	619a      	str	r2, [r3, #24]

    return;
 8006836:	e0ba      	b.n	80069ae <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80b5 	beq.w	80069ae <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00f      	beq.n	800686e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006854:	f043 0204 	orr.w	r2, r3, #4
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699a      	ldr	r2, [r3, #24]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800686c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00f      	beq.n	8006898 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006896:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00f      	beq.n	80068c2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a8:	f043 0208 	orr.w	r2, r3, #8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699a      	ldr	r2, [r3, #24]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00f      	beq.n	80068ec <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0220 	orr.w	r2, r2, #32
 80068ea:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d05a      	beq.n	80069ac <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6919      	ldr	r1, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <HAL_SPI_IRQHandler+0x3b8>)
 8006912:	400b      	ands	r3, r1
 8006914:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800691c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006920:	d138      	bne.n	8006994 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006930:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d013      	beq.n	8006962 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800693e:	4a1e      	ldr	r2, [pc, #120]	; (80069b8 <HAL_SPI_IRQHandler+0x3bc>)
 8006940:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006946:	4618      	mov	r0, r3
 8006948:	f7fa fe4c 	bl	80015e4 <HAL_DMA_Abort_IT>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006966:	2b00      	cmp	r3, #0
 8006968:	d020      	beq.n	80069ac <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696e:	4a12      	ldr	r2, [pc, #72]	; (80069b8 <HAL_SPI_IRQHandler+0x3bc>)
 8006970:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006976:	4618      	mov	r0, r3
 8006978:	f7fa fe34 	bl	80015e4 <HAL_DMA_Abort_IT>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d014      	beq.n	80069ac <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006988:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006992:	e00b      	b.n	80069ac <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f82b 	bl	80069f8 <HAL_SPI_ErrorCallback>
    return;
 80069a2:	e003      	b.n	80069ac <HAL_SPI_IRQHandler+0x3b0>
    return;
 80069a4:	bf00      	nop
 80069a6:	e002      	b.n	80069ae <HAL_SPI_IRQHandler+0x3b2>
    return;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <HAL_SPI_IRQHandler+0x3b2>
    return;
 80069ac:	bf00      	nop
  }
}
 80069ae:	3728      	adds	r7, #40	; 0x28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	fffffc94 	.word	0xfffffc94
 80069b8:	08006a0d 	.word	0x08006a0d

080069bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff ffe0 	bl	80069f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0210 	orr.w	r2, r2, #16
 8006a6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6919      	ldr	r1, [r3, #16]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b3c      	ldr	r3, [pc, #240]	; (8006b7c <SPI_CloseTransfer+0x13c>)
 8006a8c:	400b      	ands	r3, r1
 8006a8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d014      	beq.n	8006ad6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00f      	beq.n	8006ad6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006abc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0220 	orr.w	r2, r2, #32
 8006ad4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d014      	beq.n	8006b0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00f      	beq.n	8006b0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00f      	beq.n	8006b36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1c:	f043 0201 	orr.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b46:	f043 0208 	orr.w	r2, r3, #8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	fffffc90 	.word	0xfffffc90

08006b80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3307      	adds	r3, #7
 8006b9e:	08db      	lsrs	r3, r3, #3
 8006ba0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e042      	b.n	8006c4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fa fac4 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2224      	movs	r2, #36	; 0x24
 8006be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f82d 	bl	8006c58 <UART_SetConfig>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e022      	b.n	8006c4e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fd81 	bl	8007718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fe08 	bl	800785c <UART_CheckIdleState>
 8006c4c:	4603      	mov	r3, r0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c58:	b5b0      	push	{r4, r5, r7, lr}
 8006c5a:	b08e      	sub	sp, #56	; 0x38
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4bbf      	ldr	r3, [pc, #764]	; (8006f84 <UART_SetConfig+0x32c>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4ab5      	ldr	r2, [pc, #724]	; (8006f88 <UART_SetConfig+0x330>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	4bb0      	ldr	r3, [pc, #704]	; (8006f8c <UART_SetConfig+0x334>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	f023 010f 	bic.w	r1, r3, #15
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4aa7      	ldr	r2, [pc, #668]	; (8006f90 <UART_SetConfig+0x338>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d176      	bne.n	8006de4 <UART_SetConfig+0x18c>
 8006cf6:	4ba7      	ldr	r3, [pc, #668]	; (8006f94 <UART_SetConfig+0x33c>)
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cfe:	2b28      	cmp	r3, #40	; 0x28
 8006d00:	d86c      	bhi.n	8006ddc <UART_SetConfig+0x184>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0xb0>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006dad 	.word	0x08006dad
 8006d0c:	08006ddd 	.word	0x08006ddd
 8006d10:	08006ddd 	.word	0x08006ddd
 8006d14:	08006ddd 	.word	0x08006ddd
 8006d18:	08006ddd 	.word	0x08006ddd
 8006d1c:	08006ddd 	.word	0x08006ddd
 8006d20:	08006ddd 	.word	0x08006ddd
 8006d24:	08006ddd 	.word	0x08006ddd
 8006d28:	08006db5 	.word	0x08006db5
 8006d2c:	08006ddd 	.word	0x08006ddd
 8006d30:	08006ddd 	.word	0x08006ddd
 8006d34:	08006ddd 	.word	0x08006ddd
 8006d38:	08006ddd 	.word	0x08006ddd
 8006d3c:	08006ddd 	.word	0x08006ddd
 8006d40:	08006ddd 	.word	0x08006ddd
 8006d44:	08006ddd 	.word	0x08006ddd
 8006d48:	08006dbd 	.word	0x08006dbd
 8006d4c:	08006ddd 	.word	0x08006ddd
 8006d50:	08006ddd 	.word	0x08006ddd
 8006d54:	08006ddd 	.word	0x08006ddd
 8006d58:	08006ddd 	.word	0x08006ddd
 8006d5c:	08006ddd 	.word	0x08006ddd
 8006d60:	08006ddd 	.word	0x08006ddd
 8006d64:	08006ddd 	.word	0x08006ddd
 8006d68:	08006dc5 	.word	0x08006dc5
 8006d6c:	08006ddd 	.word	0x08006ddd
 8006d70:	08006ddd 	.word	0x08006ddd
 8006d74:	08006ddd 	.word	0x08006ddd
 8006d78:	08006ddd 	.word	0x08006ddd
 8006d7c:	08006ddd 	.word	0x08006ddd
 8006d80:	08006ddd 	.word	0x08006ddd
 8006d84:	08006ddd 	.word	0x08006ddd
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006ddd 	.word	0x08006ddd
 8006d90:	08006ddd 	.word	0x08006ddd
 8006d94:	08006ddd 	.word	0x08006ddd
 8006d98:	08006ddd 	.word	0x08006ddd
 8006d9c:	08006ddd 	.word	0x08006ddd
 8006da0:	08006ddd 	.word	0x08006ddd
 8006da4:	08006ddd 	.word	0x08006ddd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e222      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006db4:	2304      	movs	r3, #4
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e21e      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e21a      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dca:	e216      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006dcc:	2320      	movs	r3, #32
 8006dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd2:	e212      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dda:	e20e      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de2:	e20a      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a6b      	ldr	r2, [pc, #428]	; (8006f98 <UART_SetConfig+0x340>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d130      	bne.n	8006e50 <UART_SetConfig+0x1f8>
 8006dee:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <UART_SetConfig+0x33c>)
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d826      	bhi.n	8006e48 <UART_SetConfig+0x1f0>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x1a8>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e19 	.word	0x08006e19
 8006e04:	08006e21 	.word	0x08006e21
 8006e08:	08006e29 	.word	0x08006e29
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e41 	.word	0x08006e41
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1e:	e1ec      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e20:	2304      	movs	r3, #4
 8006e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e26:	e1e8      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e28:	2308      	movs	r3, #8
 8006e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2e:	e1e4      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e30:	2310      	movs	r3, #16
 8006e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e36:	e1e0      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e38:	2320      	movs	r3, #32
 8006e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3e:	e1dc      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e40:	2340      	movs	r3, #64	; 0x40
 8006e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e46:	e1d8      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4e:	e1d4      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a51      	ldr	r2, [pc, #324]	; (8006f9c <UART_SetConfig+0x344>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d130      	bne.n	8006ebc <UART_SetConfig+0x264>
 8006e5a:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <UART_SetConfig+0x33c>)
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	d826      	bhi.n	8006eb4 <UART_SetConfig+0x25c>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0x214>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e85 	.word	0x08006e85
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	08006e95 	.word	0x08006e95
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ead 	.word	0x08006ead
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e1b6      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e1b2      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e94:	2308      	movs	r3, #8
 8006e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9a:	e1ae      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea2:	e1aa      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006ea4:	2320      	movs	r3, #32
 8006ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eaa:	e1a6      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb2:	e1a2      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eba:	e19e      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a37      	ldr	r2, [pc, #220]	; (8006fa0 <UART_SetConfig+0x348>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d130      	bne.n	8006f28 <UART_SetConfig+0x2d0>
 8006ec6:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <UART_SetConfig+0x33c>)
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	d826      	bhi.n	8006f20 <UART_SetConfig+0x2c8>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0x280>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006ef9 	.word	0x08006ef9
 8006ee0:	08006f01 	.word	0x08006f01
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f11 	.word	0x08006f11
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef6:	e180      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efe:	e17c      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f06:	e178      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0e:	e174      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f10:	2320      	movs	r3, #32
 8006f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f16:	e170      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f18:	2340      	movs	r3, #64	; 0x40
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1e:	e16c      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f26:	e168      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <UART_SetConfig+0x34c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d142      	bne.n	8006fb8 <UART_SetConfig+0x360>
 8006f32:	4b18      	ldr	r3, [pc, #96]	; (8006f94 <UART_SetConfig+0x33c>)
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b05      	cmp	r3, #5
 8006f3c:	d838      	bhi.n	8006fb0 <UART_SetConfig+0x358>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x2ec>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f5d 	.word	0x08006f5d
 8006f48:	08006f65 	.word	0x08006f65
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006fa9 	.word	0x08006fa9
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f62:	e14a      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f64:	2304      	movs	r3, #4
 8006f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f6a:	e146      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f72:	e142      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f74:	2310      	movs	r3, #16
 8006f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7a:	e13e      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f82:	e13a      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006f84:	cfff69f3 	.word	0xcfff69f3
 8006f88:	58000c00 	.word	0x58000c00
 8006f8c:	11fff4ff 	.word	0x11fff4ff
 8006f90:	40011000 	.word	0x40011000
 8006f94:	58024400 	.word	0x58024400
 8006f98:	40004400 	.word	0x40004400
 8006f9c:	40004800 	.word	0x40004800
 8006fa0:	40004c00 	.word	0x40004c00
 8006fa4:	40005000 	.word	0x40005000
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fae:	e124      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fb6:	e120      	b.n	80071fa <UART_SetConfig+0x5a2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4acc      	ldr	r2, [pc, #816]	; (80072f0 <UART_SetConfig+0x698>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d176      	bne.n	80070b0 <UART_SetConfig+0x458>
 8006fc2:	4bcc      	ldr	r3, [pc, #816]	; (80072f4 <UART_SetConfig+0x69c>)
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fca:	2b28      	cmp	r3, #40	; 0x28
 8006fcc:	d86c      	bhi.n	80070a8 <UART_SetConfig+0x450>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0x37c>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08007079 	.word	0x08007079
 8006fd8:	080070a9 	.word	0x080070a9
 8006fdc:	080070a9 	.word	0x080070a9
 8006fe0:	080070a9 	.word	0x080070a9
 8006fe4:	080070a9 	.word	0x080070a9
 8006fe8:	080070a9 	.word	0x080070a9
 8006fec:	080070a9 	.word	0x080070a9
 8006ff0:	080070a9 	.word	0x080070a9
 8006ff4:	08007081 	.word	0x08007081
 8006ff8:	080070a9 	.word	0x080070a9
 8006ffc:	080070a9 	.word	0x080070a9
 8007000:	080070a9 	.word	0x080070a9
 8007004:	080070a9 	.word	0x080070a9
 8007008:	080070a9 	.word	0x080070a9
 800700c:	080070a9 	.word	0x080070a9
 8007010:	080070a9 	.word	0x080070a9
 8007014:	08007089 	.word	0x08007089
 8007018:	080070a9 	.word	0x080070a9
 800701c:	080070a9 	.word	0x080070a9
 8007020:	080070a9 	.word	0x080070a9
 8007024:	080070a9 	.word	0x080070a9
 8007028:	080070a9 	.word	0x080070a9
 800702c:	080070a9 	.word	0x080070a9
 8007030:	080070a9 	.word	0x080070a9
 8007034:	08007091 	.word	0x08007091
 8007038:	080070a9 	.word	0x080070a9
 800703c:	080070a9 	.word	0x080070a9
 8007040:	080070a9 	.word	0x080070a9
 8007044:	080070a9 	.word	0x080070a9
 8007048:	080070a9 	.word	0x080070a9
 800704c:	080070a9 	.word	0x080070a9
 8007050:	080070a9 	.word	0x080070a9
 8007054:	08007099 	.word	0x08007099
 8007058:	080070a9 	.word	0x080070a9
 800705c:	080070a9 	.word	0x080070a9
 8007060:	080070a9 	.word	0x080070a9
 8007064:	080070a9 	.word	0x080070a9
 8007068:	080070a9 	.word	0x080070a9
 800706c:	080070a9 	.word	0x080070a9
 8007070:	080070a9 	.word	0x080070a9
 8007074:	080070a1 	.word	0x080070a1
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707e:	e0bc      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007086:	e0b8      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708e:	e0b4      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007096:	e0b0      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007098:	2320      	movs	r3, #32
 800709a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709e:	e0ac      	b.n	80071fa <UART_SetConfig+0x5a2>
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e0a8      	b.n	80071fa <UART_SetConfig+0x5a2>
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ae:	e0a4      	b.n	80071fa <UART_SetConfig+0x5a2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a90      	ldr	r2, [pc, #576]	; (80072f8 <UART_SetConfig+0x6a0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d130      	bne.n	800711c <UART_SetConfig+0x4c4>
 80070ba:	4b8e      	ldr	r3, [pc, #568]	; (80072f4 <UART_SetConfig+0x69c>)
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	d826      	bhi.n	8007114 <UART_SetConfig+0x4bc>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <UART_SetConfig+0x474>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080070e5 	.word	0x080070e5
 80070d0:	080070ed 	.word	0x080070ed
 80070d4:	080070f5 	.word	0x080070f5
 80070d8:	080070fd 	.word	0x080070fd
 80070dc:	08007105 	.word	0x08007105
 80070e0:	0800710d 	.word	0x0800710d
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ea:	e086      	b.n	80071fa <UART_SetConfig+0x5a2>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f2:	e082      	b.n	80071fa <UART_SetConfig+0x5a2>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070fa:	e07e      	b.n	80071fa <UART_SetConfig+0x5a2>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007102:	e07a      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007104:	2320      	movs	r3, #32
 8007106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710a:	e076      	b.n	80071fa <UART_SetConfig+0x5a2>
 800710c:	2340      	movs	r3, #64	; 0x40
 800710e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007112:	e072      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007114:	2380      	movs	r3, #128	; 0x80
 8007116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711a:	e06e      	b.n	80071fa <UART_SetConfig+0x5a2>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a76      	ldr	r2, [pc, #472]	; (80072fc <UART_SetConfig+0x6a4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d130      	bne.n	8007188 <UART_SetConfig+0x530>
 8007126:	4b73      	ldr	r3, [pc, #460]	; (80072f4 <UART_SetConfig+0x69c>)
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	2b05      	cmp	r3, #5
 8007130:	d826      	bhi.n	8007180 <UART_SetConfig+0x528>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <UART_SetConfig+0x4e0>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007151 	.word	0x08007151
 800713c:	08007159 	.word	0x08007159
 8007140:	08007161 	.word	0x08007161
 8007144:	08007169 	.word	0x08007169
 8007148:	08007171 	.word	0x08007171
 800714c:	08007179 	.word	0x08007179
 8007150:	2300      	movs	r3, #0
 8007152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007156:	e050      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715e:	e04c      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007166:	e048      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716e:	e044      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007170:	2320      	movs	r3, #32
 8007172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007176:	e040      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e03c      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007186:	e038      	b.n	80071fa <UART_SetConfig+0x5a2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <UART_SetConfig+0x6a8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d130      	bne.n	80071f4 <UART_SetConfig+0x59c>
 8007192:	4b58      	ldr	r3, [pc, #352]	; (80072f4 <UART_SetConfig+0x69c>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	2b05      	cmp	r3, #5
 800719c:	d826      	bhi.n	80071ec <UART_SetConfig+0x594>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <UART_SetConfig+0x54c>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071bd 	.word	0x080071bd
 80071a8:	080071c5 	.word	0x080071c5
 80071ac:	080071cd 	.word	0x080071cd
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	2302      	movs	r3, #2
 80071be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c2:	e01a      	b.n	80071fa <UART_SetConfig+0x5a2>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ca:	e016      	b.n	80071fa <UART_SetConfig+0x5a2>
 80071cc:	2308      	movs	r3, #8
 80071ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d2:	e012      	b.n	80071fa <UART_SetConfig+0x5a2>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071da:	e00e      	b.n	80071fa <UART_SetConfig+0x5a2>
 80071dc:	2320      	movs	r3, #32
 80071de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e2:	e00a      	b.n	80071fa <UART_SetConfig+0x5a2>
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ea:	e006      	b.n	80071fa <UART_SetConfig+0x5a2>
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f2:	e002      	b.n	80071fa <UART_SetConfig+0x5a2>
 80071f4:	2380      	movs	r3, #128	; 0x80
 80071f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a40      	ldr	r2, [pc, #256]	; (8007300 <UART_SetConfig+0x6a8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	f040 80ef 	bne.w	80073e4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007206:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800720a:	2b20      	cmp	r3, #32
 800720c:	dc46      	bgt.n	800729c <UART_SetConfig+0x644>
 800720e:	2b02      	cmp	r3, #2
 8007210:	f2c0 8081 	blt.w	8007316 <UART_SetConfig+0x6be>
 8007214:	3b02      	subs	r3, #2
 8007216:	2b1e      	cmp	r3, #30
 8007218:	d87d      	bhi.n	8007316 <UART_SetConfig+0x6be>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <UART_SetConfig+0x5c8>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	080072a3 	.word	0x080072a3
 8007224:	08007317 	.word	0x08007317
 8007228:	080072ab 	.word	0x080072ab
 800722c:	08007317 	.word	0x08007317
 8007230:	08007317 	.word	0x08007317
 8007234:	08007317 	.word	0x08007317
 8007238:	080072bb 	.word	0x080072bb
 800723c:	08007317 	.word	0x08007317
 8007240:	08007317 	.word	0x08007317
 8007244:	08007317 	.word	0x08007317
 8007248:	08007317 	.word	0x08007317
 800724c:	08007317 	.word	0x08007317
 8007250:	08007317 	.word	0x08007317
 8007254:	08007317 	.word	0x08007317
 8007258:	080072cb 	.word	0x080072cb
 800725c:	08007317 	.word	0x08007317
 8007260:	08007317 	.word	0x08007317
 8007264:	08007317 	.word	0x08007317
 8007268:	08007317 	.word	0x08007317
 800726c:	08007317 	.word	0x08007317
 8007270:	08007317 	.word	0x08007317
 8007274:	08007317 	.word	0x08007317
 8007278:	08007317 	.word	0x08007317
 800727c:	08007317 	.word	0x08007317
 8007280:	08007317 	.word	0x08007317
 8007284:	08007317 	.word	0x08007317
 8007288:	08007317 	.word	0x08007317
 800728c:	08007317 	.word	0x08007317
 8007290:	08007317 	.word	0x08007317
 8007294:	08007317 	.word	0x08007317
 8007298:	08007309 	.word	0x08007309
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d036      	beq.n	800730e <UART_SetConfig+0x6b6>
 80072a0:	e039      	b.n	8007316 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80072a2:	f7fe fb31 	bl	8005908 <HAL_RCCEx_GetD3PCLK1Freq>
 80072a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072a8:	e03b      	b.n	8007322 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072aa:	f107 0314 	add.w	r3, r7, #20
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fb40 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072b8:	e033      	b.n	8007322 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ba:	f107 0308 	add.w	r3, r7, #8
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fc8c 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072c8:	e02b      	b.n	8007322 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <UART_SetConfig+0x69c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d009      	beq.n	80072ea <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <UART_SetConfig+0x69c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	08db      	lsrs	r3, r3, #3
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	4a08      	ldr	r2, [pc, #32]	; (8007304 <UART_SetConfig+0x6ac>)
 80072e2:	fa22 f303 	lsr.w	r3, r2, r3
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072e8:	e01b      	b.n	8007322 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80072ea:	4b06      	ldr	r3, [pc, #24]	; (8007304 <UART_SetConfig+0x6ac>)
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072ee:	e018      	b.n	8007322 <UART_SetConfig+0x6ca>
 80072f0:	40011400 	.word	0x40011400
 80072f4:	58024400 	.word	0x58024400
 80072f8:	40007800 	.word	0x40007800
 80072fc:	40007c00 	.word	0x40007c00
 8007300:	58000c00 	.word	0x58000c00
 8007304:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007308:	4bc4      	ldr	r3, [pc, #784]	; (800761c <UART_SetConfig+0x9c4>)
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800730c:	e009      	b.n	8007322 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007314:	e005      	b.n	8007322 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007320:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 81da 	beq.w	80076de <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	4abc      	ldr	r2, [pc, #752]	; (8007620 <UART_SetConfig+0x9c8>)
 8007330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007334:	461a      	mov	r2, r3
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	fbb3 f3f2 	udiv	r3, r3, r2
 800733c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4413      	add	r3, r2
 8007348:	6a3a      	ldr	r2, [r7, #32]
 800734a:	429a      	cmp	r2, r3
 800734c:	d305      	bcc.n	800735a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007354:	6a3a      	ldr	r2, [r7, #32]
 8007356:	429a      	cmp	r2, r3
 8007358:	d903      	bls.n	8007362 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007360:	e1bd      	b.n	80076de <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	4618      	mov	r0, r3
 8007366:	f04f 0100 	mov.w	r1, #0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	4aac      	ldr	r2, [pc, #688]	; (8007620 <UART_SetConfig+0x9c8>)
 8007370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007374:	b29a      	uxth	r2, r3
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	f7f8 ffad 	bl	80002d8 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	020b      	lsls	r3, r1, #8
 8007390:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007394:	0202      	lsls	r2, r0, #8
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	6849      	ldr	r1, [r1, #4]
 800739a:	0849      	lsrs	r1, r1, #1
 800739c:	4608      	mov	r0, r1
 800739e:	f04f 0100 	mov.w	r1, #0
 80073a2:	1814      	adds	r4, r2, r0
 80073a4:	eb43 0501 	adc.w	r5, r3, r1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f8 ff8f 	bl	80002d8 <__aeabi_uldivmod>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4613      	mov	r3, r2
 80073c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c8:	d308      	bcc.n	80073dc <UART_SetConfig+0x784>
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d0:	d204      	bcs.n	80073dc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073d8:	60da      	str	r2, [r3, #12]
 80073da:	e180      	b.n	80076de <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80073e2:	e17c      	b.n	80076de <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ec:	f040 80be 	bne.w	800756c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80073f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	dc49      	bgt.n	800748c <UART_SetConfig+0x834>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	db7c      	blt.n	80074f6 <UART_SetConfig+0x89e>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d87a      	bhi.n	80074f6 <UART_SetConfig+0x89e>
 8007400:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <UART_SetConfig+0x7b0>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	08007493 	.word	0x08007493
 800740c:	0800749b 	.word	0x0800749b
 8007410:	080074f7 	.word	0x080074f7
 8007414:	080074f7 	.word	0x080074f7
 8007418:	080074a3 	.word	0x080074a3
 800741c:	080074f7 	.word	0x080074f7
 8007420:	080074f7 	.word	0x080074f7
 8007424:	080074f7 	.word	0x080074f7
 8007428:	080074b3 	.word	0x080074b3
 800742c:	080074f7 	.word	0x080074f7
 8007430:	080074f7 	.word	0x080074f7
 8007434:	080074f7 	.word	0x080074f7
 8007438:	080074f7 	.word	0x080074f7
 800743c:	080074f7 	.word	0x080074f7
 8007440:	080074f7 	.word	0x080074f7
 8007444:	080074f7 	.word	0x080074f7
 8007448:	080074c3 	.word	0x080074c3
 800744c:	080074f7 	.word	0x080074f7
 8007450:	080074f7 	.word	0x080074f7
 8007454:	080074f7 	.word	0x080074f7
 8007458:	080074f7 	.word	0x080074f7
 800745c:	080074f7 	.word	0x080074f7
 8007460:	080074f7 	.word	0x080074f7
 8007464:	080074f7 	.word	0x080074f7
 8007468:	080074f7 	.word	0x080074f7
 800746c:	080074f7 	.word	0x080074f7
 8007470:	080074f7 	.word	0x080074f7
 8007474:	080074f7 	.word	0x080074f7
 8007478:	080074f7 	.word	0x080074f7
 800747c:	080074f7 	.word	0x080074f7
 8007480:	080074f7 	.word	0x080074f7
 8007484:	080074f7 	.word	0x080074f7
 8007488:	080074e9 	.word	0x080074e9
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d02e      	beq.n	80074ee <UART_SetConfig+0x896>
 8007490:	e031      	b.n	80074f6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007492:	f7fc fdfb 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8007496:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007498:	e033      	b.n	8007502 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800749a:	f7fc fe0d 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 800749e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074a0:	e02f      	b.n	8007502 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fa44 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074b0:	e027      	b.n	8007502 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b2:	f107 0308 	add.w	r3, r7, #8
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fb90 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074c0:	e01f      	b.n	8007502 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c2:	4b58      	ldr	r3, [pc, #352]	; (8007624 <UART_SetConfig+0x9cc>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ce:	4b55      	ldr	r3, [pc, #340]	; (8007624 <UART_SetConfig+0x9cc>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	4a53      	ldr	r2, [pc, #332]	; (8007628 <UART_SetConfig+0x9d0>)
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074e0:	e00f      	b.n	8007502 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80074e2:	4b51      	ldr	r3, [pc, #324]	; (8007628 <UART_SetConfig+0x9d0>)
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074e6:	e00c      	b.n	8007502 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074e8:	4b4c      	ldr	r3, [pc, #304]	; (800761c <UART_SetConfig+0x9c4>)
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074ec:	e009      	b.n	8007502 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074f4:	e005      	b.n	8007502 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80ea 	beq.w	80076de <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	4a44      	ldr	r2, [pc, #272]	; (8007620 <UART_SetConfig+0x9c8>)
 8007510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007514:	461a      	mov	r2, r3
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	fbb3 f3f2 	udiv	r3, r3, r2
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	2b0f      	cmp	r3, #15
 8007534:	d916      	bls.n	8007564 <UART_SetConfig+0x90c>
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753c:	d212      	bcs.n	8007564 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	b29b      	uxth	r3, r3
 8007542:	f023 030f 	bic.w	r3, r3, #15
 8007546:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	b29b      	uxth	r3, r3
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	b29a      	uxth	r2, r3
 8007554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007556:	4313      	orrs	r3, r2
 8007558:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	e0bc      	b.n	80076de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800756a:	e0b8      	b.n	80076de <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800756c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007570:	2b20      	cmp	r3, #32
 8007572:	dc4b      	bgt.n	800760c <UART_SetConfig+0x9b4>
 8007574:	2b00      	cmp	r3, #0
 8007576:	f2c0 8087 	blt.w	8007688 <UART_SetConfig+0xa30>
 800757a:	2b20      	cmp	r3, #32
 800757c:	f200 8084 	bhi.w	8007688 <UART_SetConfig+0xa30>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <UART_SetConfig+0x930>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	08007613 	.word	0x08007613
 800758c:	0800762d 	.word	0x0800762d
 8007590:	08007689 	.word	0x08007689
 8007594:	08007689 	.word	0x08007689
 8007598:	08007635 	.word	0x08007635
 800759c:	08007689 	.word	0x08007689
 80075a0:	08007689 	.word	0x08007689
 80075a4:	08007689 	.word	0x08007689
 80075a8:	08007645 	.word	0x08007645
 80075ac:	08007689 	.word	0x08007689
 80075b0:	08007689 	.word	0x08007689
 80075b4:	08007689 	.word	0x08007689
 80075b8:	08007689 	.word	0x08007689
 80075bc:	08007689 	.word	0x08007689
 80075c0:	08007689 	.word	0x08007689
 80075c4:	08007689 	.word	0x08007689
 80075c8:	08007655 	.word	0x08007655
 80075cc:	08007689 	.word	0x08007689
 80075d0:	08007689 	.word	0x08007689
 80075d4:	08007689 	.word	0x08007689
 80075d8:	08007689 	.word	0x08007689
 80075dc:	08007689 	.word	0x08007689
 80075e0:	08007689 	.word	0x08007689
 80075e4:	08007689 	.word	0x08007689
 80075e8:	08007689 	.word	0x08007689
 80075ec:	08007689 	.word	0x08007689
 80075f0:	08007689 	.word	0x08007689
 80075f4:	08007689 	.word	0x08007689
 80075f8:	08007689 	.word	0x08007689
 80075fc:	08007689 	.word	0x08007689
 8007600:	08007689 	.word	0x08007689
 8007604:	08007689 	.word	0x08007689
 8007608:	0800767b 	.word	0x0800767b
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d037      	beq.n	8007680 <UART_SetConfig+0xa28>
 8007610:	e03a      	b.n	8007688 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007612:	f7fc fd3b 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8007616:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007618:	e03c      	b.n	8007694 <UART_SetConfig+0xa3c>
 800761a:	bf00      	nop
 800761c:	003d0900 	.word	0x003d0900
 8007620:	08007d08 	.word	0x08007d08
 8007624:	58024400 	.word	0x58024400
 8007628:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800762c:	f7fc fd44 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 8007630:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007632:	e02f      	b.n	8007694 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe f97b 	bl	8005934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007642:	e027      	b.n	8007694 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007644:	f107 0308 	add.w	r3, r7, #8
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe fac7 	bl	8005bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007652:	e01f      	b.n	8007694 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007654:	4b2c      	ldr	r3, [pc, #176]	; (8007708 <UART_SetConfig+0xab0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007660:	4b29      	ldr	r3, [pc, #164]	; (8007708 <UART_SetConfig+0xab0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	08db      	lsrs	r3, r3, #3
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	4a28      	ldr	r2, [pc, #160]	; (800770c <UART_SetConfig+0xab4>)
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007672:	e00f      	b.n	8007694 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <UART_SetConfig+0xab4>)
 8007676:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007678:	e00c      	b.n	8007694 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800767a:	4b25      	ldr	r3, [pc, #148]	; (8007710 <UART_SetConfig+0xab8>)
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800767e:	e009      	b.n	8007694 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007686:	e005      	b.n	8007694 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007692:	bf00      	nop
    }

    if (pclk != 0U)
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d021      	beq.n	80076de <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <UART_SetConfig+0xabc>)
 80076a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	441a      	add	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	2b0f      	cmp	r3, #15
 80076c2:	d909      	bls.n	80076d8 <UART_SetConfig+0xa80>
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ca:	d205      	bcs.n	80076d8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	e002      	b.n	80076de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80076fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3738      	adds	r7, #56	; 0x38
 8007702:	46bd      	mov	sp, r7
 8007704:	bdb0      	pop	{r4, r5, r7, pc}
 8007706:	bf00      	nop
 8007708:	58024400 	.word	0x58024400
 800770c:	03d09000 	.word	0x03d09000
 8007710:	003d0900 	.word	0x003d0900
 8007714:	08007d08 	.word	0x08007d08

08007718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01a      	beq.n	800782e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007816:	d10a      	bne.n	800782e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	605a      	str	r2, [r3, #4]
  }
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af02      	add	r7, sp, #8
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800786c:	f7f9 fd92 	bl	8001394 <HAL_GetTick>
 8007870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b08      	cmp	r3, #8
 800787e:	d10e      	bne.n	800789e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f82f 	bl	80078f2 <UART_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e025      	b.n	80078ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d10e      	bne.n	80078ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f819 	bl	80078f2 <UART_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e00f      	b.n	80078ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b09c      	sub	sp, #112	; 0x70
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	4613      	mov	r3, r2
 8007900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007902:	e0a9      	b.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790a:	f000 80a5 	beq.w	8007a58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790e:	f7f9 fd41 	bl	8001394 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800791a:	429a      	cmp	r2, r3
 800791c:	d302      	bcc.n	8007924 <UART_WaitOnFlagUntilTimeout+0x32>
 800791e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007920:	2b00      	cmp	r3, #0
 8007922:	d140      	bne.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007938:	667b      	str	r3, [r7, #100]	; 0x64
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e6      	bne.n	8007924 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	663b      	str	r3, [r7, #96]	; 0x60
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007976:	64ba      	str	r2, [r7, #72]	; 0x48
 8007978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800797c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e5      	bne.n	8007956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e069      	b.n	8007a7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d051      	beq.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c2:	d149      	bne.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
 80079ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e6      	bne.n	80079ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3308      	adds	r3, #8
 8007a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f023 0301 	bic.w	r3, r3, #1
 8007a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a20:	623a      	str	r2, [r7, #32]
 8007a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	69f9      	ldr	r1, [r7, #28]
 8007a26:	6a3a      	ldr	r2, [r7, #32]
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e5      	bne.n	8007a00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e010      	b.n	8007a7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69da      	ldr	r2, [r3, #28]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	4013      	ands	r3, r2
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	f43f af46 	beq.w	8007904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3770      	adds	r7, #112	; 0x70
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e027      	b.n	8007ae8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	; 0x24
 8007aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e02d      	b.n	8007b68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2224      	movs	r2, #36	; 0x24
 8007b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f84f 	bl	8007bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e02d      	b.n	8007be4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	; 0x24
 8007b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f811 	bl	8007bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c0c:	e031      	b.n	8007c72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c0e:	2310      	movs	r3, #16
 8007c10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c12:	2310      	movs	r3, #16
 8007c14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	0e5b      	lsrs	r3, r3, #25
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	0f5b      	lsrs	r3, r3, #29
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	7b3a      	ldrb	r2, [r7, #12]
 8007c3a:	4911      	ldr	r1, [pc, #68]	; (8007c80 <UARTEx_SetNbDataToProcess+0x94>)
 8007c3c:	5c8a      	ldrb	r2, [r1, r2]
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c42:	7b3a      	ldrb	r2, [r7, #12]
 8007c44:	490f      	ldr	r1, [pc, #60]	; (8007c84 <UARTEx_SetNbDataToProcess+0x98>)
 8007c46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c48:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	7b7a      	ldrb	r2, [r7, #13]
 8007c58:	4909      	ldr	r1, [pc, #36]	; (8007c80 <UARTEx_SetNbDataToProcess+0x94>)
 8007c5a:	5c8a      	ldrb	r2, [r1, r2]
 8007c5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c60:	7b7a      	ldrb	r2, [r7, #13]
 8007c62:	4908      	ldr	r1, [pc, #32]	; (8007c84 <UARTEx_SetNbDataToProcess+0x98>)
 8007c64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c66:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	08007d20 	.word	0x08007d20
 8007c84:	08007d28 	.word	0x08007d28

08007c88 <__libc_init_array>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	4d0d      	ldr	r5, [pc, #52]	; (8007cc0 <__libc_init_array+0x38>)
 8007c8c:	4c0d      	ldr	r4, [pc, #52]	; (8007cc4 <__libc_init_array+0x3c>)
 8007c8e:	1b64      	subs	r4, r4, r5
 8007c90:	10a4      	asrs	r4, r4, #2
 8007c92:	2600      	movs	r6, #0
 8007c94:	42a6      	cmp	r6, r4
 8007c96:	d109      	bne.n	8007cac <__libc_init_array+0x24>
 8007c98:	4d0b      	ldr	r5, [pc, #44]	; (8007cc8 <__libc_init_array+0x40>)
 8007c9a:	4c0c      	ldr	r4, [pc, #48]	; (8007ccc <__libc_init_array+0x44>)
 8007c9c:	f000 f820 	bl	8007ce0 <_init>
 8007ca0:	1b64      	subs	r4, r4, r5
 8007ca2:	10a4      	asrs	r4, r4, #2
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	42a6      	cmp	r6, r4
 8007ca8:	d105      	bne.n	8007cb6 <__libc_init_array+0x2e>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb0:	4798      	blx	r3
 8007cb2:	3601      	adds	r6, #1
 8007cb4:	e7ee      	b.n	8007c94 <__libc_init_array+0xc>
 8007cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cba:	4798      	blx	r3
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	e7f2      	b.n	8007ca6 <__libc_init_array+0x1e>
 8007cc0:	08007d38 	.word	0x08007d38
 8007cc4:	08007d38 	.word	0x08007d38
 8007cc8:	08007d38 	.word	0x08007d38
 8007ccc:	08007d3c 	.word	0x08007d3c

08007cd0 <memset>:
 8007cd0:	4402      	add	r2, r0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d100      	bne.n	8007cda <memset+0xa>
 8007cd8:	4770      	bx	lr
 8007cda:	f803 1b01 	strb.w	r1, [r3], #1
 8007cde:	e7f9      	b.n	8007cd4 <memset+0x4>

08007ce0 <_init>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr

08007cec <_fini>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr
